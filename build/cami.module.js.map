{
  "version": 3,
  "sources": ["../node_modules/lit-html/src/lit-html.ts", "../node_modules/goober/dist/goober.modern.js", "../node_modules/immer/src/utils/env.ts", "../node_modules/immer/src/utils/errors.ts", "../node_modules/immer/src/utils/common.ts", "../node_modules/immer/src/utils/plugins.ts", "../node_modules/immer/src/core/scope.ts", "../node_modules/immer/src/core/finalize.ts", "../node_modules/immer/src/core/proxy.ts", "../node_modules/immer/src/core/immerClass.ts", "../node_modules/immer/src/core/current.ts", "../node_modules/immer/src/plugins/patches.ts", "../node_modules/immer/src/plugins/mapset.ts", "../node_modules/immer/src/immer.ts", "../src/observables/observable.js", "../src/observables/observable-store.js", "../src/observables/observable-stream.js", "../src/config.js", "../src/trace.js", "../src/observables/observable-state.js", "../src/reactive-element.js", "../src/observables/observable-element.js", "../src/http.js", "../src/cami.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!global.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? (global.ShadyDOM!.wrap as <T extends Node>(node: T) => T)\n    : <T extends Node>(node: T) => node;\n\nconst trustedTypes = (global as unknown as Window).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${String(Math.random()).slice(9)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type TemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus cannot be used within an `<svg>` HTML element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!Array.isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html = type === SVG_RESULT ? '<svg>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: TemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Re-parent SVG nodes into template root\n    if (type === SVG_RESULT) {\n      const svgElement = this.el.content.firstChild!;\n      svgElement.replaceWith(...svgElement.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          for (const name of (node as Element).getAttributeNames()) {\n            if (name.endsWith(boundAttributeSuffix)) {\n              const realName = attrNames[attrNameIndex++];\n              const value = (node as Element).getAttribute(name)!;\n              const statics = value.split(marker);\n              const m = /([.?@])?(.*)/.exec(realName)!;\n              parts.push({\n                type: ATTRIBUTE_PART,\n                index: nodeIndex,\n                name: m[2],\n                strings: statics,\n                ctor:\n                  m[1] === '.'\n                    ? PropertyPart\n                    : m[1] === '?'\n                    ? BooleanAttributePart\n                    : m[1] === '@'\n                    ? EventPart\n                    : AttributePart,\n              });\n              (node as Element).removeAttribute(name);\n            } else if (name.startsWith(marker)) {\n              parts.push({\n                type: ELEMENT_PART,\n                index: nodeIndex,\n              });\n              (node as Element).removeAttribute(name);\n            }\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'template prep',\n        template: this,\n        clonableTemplate: this.el,\n        parts: this.parts,\n        strings,\n      });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'set part',\n            part,\n            value: values[i],\n            valueIndex: i,\n            values,\n            templateInstance: this,\n          });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unsed otherwise. The\n   * intention would clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent &&\n            debugLogEvent({\n              kind: 'commit nothing to child',\n              start: this._$startNode,\n              end: this._$endNode,\n              parent: this._$parent,\n              options: this.options,\n            });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and make do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit node',\n          start: this._$startNode,\n          parent: this._$parent,\n          value: value,\n          options: this.options,\n        });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit text',\n          node,\n          value,\n          options: this.options,\n        });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: textNode,\n            value,\n            options: this.options,\n          });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: wrap(this._$startNode).nextSibling as Text,\n            value,\n            options: this.options,\n          });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as TemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template updating',\n          template,\n          instance: this._$committedValue as TemplateInstance,\n          parts: (this._$committedValue as TemplateInstance)._$parts,\n          options: this.options,\n          values,\n        });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      instance._update(values);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated and updated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: TemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this metod\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type = ATTRIBUTE_PART as\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit attribute',\n          element: this.element,\n          name: this.name,\n          value,\n          options: this.options,\n        });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit property',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit boolean attribute',\n        element: this.element,\n        name: this.name,\n        value: !!(value && value !== nothing),\n        options: this.options,\n      });\n    (wrap(this.element) as Element).toggleAttribute(\n      this.name,\n      !!value && value !== nothing\n    );\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit event listener',\n        element: this.element,\n        name: this.name,\n        value: newListener,\n        options: this.options,\n        removeListener: shouldRemoveListener,\n        addListener: shouldAddListener,\n        oldListener,\n      });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit to element binding',\n        element: this.element,\n        value,\n        options: this.options,\n      });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('3.0.0');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'begin render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'end render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n", "let e={data:\"\"},t=t=>\"object\"==typeof window?((t?t.querySelector(\"#_goober\"):window._goober)||Object.assign((t||document.head).appendChild(document.createElement(\"style\")),{innerHTML:\" \",id:\"_goober\"})).firstChild:t||e,r=e=>{let r=t(e),l=r.data;return r.data=\"\",l},l=/(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\\s*)/g,a=/\\/\\*[^]*?\\*\\/|  +/g,n=/\\n+/g,o=(e,t)=>{let r=\"\",l=\"\",a=\"\";for(let n in e){let c=e[n];\"@\"==n[0]?\"i\"==n[1]?r=n+\" \"+c+\";\":l+=\"f\"==n[1]?o(c,n):n+\"{\"+o(c,\"k\"==n[1]?\"\":t)+\"}\":\"object\"==typeof c?l+=o(c,t?t.replace(/([^,])+/g,e=>n.replace(/(^:.*)|([^,])+/g,t=>/&/.test(t)?t.replace(/&/g,e):e?e+\" \"+t:t)):n):null!=c&&(n=/^--/.test(n)?n:n.replace(/[A-Z]/g,\"-$&\").toLowerCase(),a+=o.p?o.p(n,c):n+\":\"+c+\";\")}return r+(t&&a?t+\"{\"+a+\"}\":a)+l},c={},s=e=>{if(\"object\"==typeof e){let t=\"\";for(let r in e)t+=r+s(e[r]);return t}return e},i=(e,t,r,i,p)=>{let u=s(e),d=c[u]||(c[u]=(e=>{let t=0,r=11;for(;t<e.length;)r=101*r+e.charCodeAt(t++)>>>0;return\"go\"+r})(u));if(!c[d]){let t=u!==e?e:(e=>{let t,r,o=[{}];for(;t=l.exec(e.replace(a,\"\"));)t[4]?o.shift():t[3]?(r=t[3].replace(n,\" \").trim(),o.unshift(o[0][r]=o[0][r]||{})):o[0][t[1]]=t[2].replace(n,\" \").trim();return o[0]})(e);c[d]=o(p?{[\"@keyframes \"+d]:t}:t,r?\"\":\".\"+d)}let f=r&&c.g?c.g:null;return r&&(c.g=c[d]),((e,t,r,l)=>{l?t.data=t.data.replace(l,e):-1===t.data.indexOf(e)&&(t.data=r?e+t.data:t.data+e)})(c[d],t,i,f),d},p=(e,t,r)=>e.reduce((e,l,a)=>{let n=t[a];if(n&&n.call){let e=n(r),t=e&&e.props&&e.props.className||/^go/.test(e)&&e;n=t?\".\"+t:e&&\"object\"==typeof e?e.props?\"\":o(e,\"\"):!1===e?\"\":e}return e+l+(null==n?\"\":n)},\"\");function u(e){let r=this||{},l=e.call?e(r.p):e;return i(l.unshift?l.raw?p(l,[].slice.call(arguments,1),r.p):l.reduce((e,t)=>Object.assign(e,t&&t.call?t(r.p):t),{}):l,t(r.target),r.g,r.o,r.k)}let d,f,g,b=u.bind({g:1}),h=u.bind({k:1});function m(e,t,r,l){o.p=t,d=e,f=r,g=l}function j(e,t){let r=this||{};return function(){let l=arguments;function a(n,o){let c=Object.assign({},n),s=c.className||a.className;r.p=Object.assign({theme:f&&f()},c),r.o=/ *go\\d+/.test(s),c.className=u.apply(r,l)+(s?\" \"+s:\"\"),t&&(c.ref=o);let i=e;return e[0]&&(i=c.as||e,delete c.as),g&&i[0]&&g(c),d(i,c)}return t?t(a):a}}export{u as css,r as extractCss,b as glob,h as keyframes,m as setup,j as styled};\n", "// Should be no imports here!\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: unique symbol = Symbol.for(\"immer-nothing\")\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = Symbol.for(\"immer-draftable\")\n\nexport const DRAFT_STATE: unique symbol = Symbol.for(\"immer-state\")\n", "export const errors =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? [\n\t\t\t\t// All error codes, starting by 0:\n\t\t\t\tfunction(plugin: string) {\n\t\t\t\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t\t\t\t},\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t\t\t\t},\n\t\t\t\t\"This object has been frozen and should not be mutated\",\n\t\t\t\tfunction(data: any) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t\t\t\t\"Immer forbids circular references\",\n\t\t\t\t\"The first or second argument to `produce` must be a function\",\n\t\t\t\t\"The third argument to `produce` must be a function or undefined\",\n\t\t\t\t\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t\t\t\t\"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'current' expects a draft, got: ${thing}`\n\t\t\t\t},\n\t\t\t\t\"Object.defineProperty() cannot be used on an Immer draft\",\n\t\t\t\t\"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t\t\t\t\"Immer only supports deleting array indices\",\n\t\t\t\t\"Immer only supports setting array indices and the 'length' property\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'original' expects a draft, got: ${thing}`\n\t\t\t\t}\n\t\t\t\t// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n\t\t\t\t// See Patches.ts for additional errors\n\t\t  ]\n\t\t: []\n\nexport function die(error: number, ...args: any[]): never {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst e = errors[error]\n\t\tconst msg = typeof e === \"function\" ? e.apply(null, args as any) : e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n", "import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tArchType,\n\tdie\n} from \"../internal\"\n\nexport const getPrototypeOf = Object.getPrototypeOf\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(15, value)\n\treturn value[DRAFT_STATE].base_\n}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === ArchType.Object) {\n\t\tObject.entries(obj).forEach(([key, value]) => {\n\t\t\titer(key, value, obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): ArchType {\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_\n\t\t: Array.isArray(thing)\n\t\t? ArchType.Array\n\t\t: isMap(thing)\n\t\t? ArchType.Map\n\t\t: isSet(thing)\n\t\t? ArchType.Set\n\t\t: ArchType.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchType.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchType.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchType.Map) thing.set(propOrOldValue, value)\n\telse if (t === ArchType.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any, strict: boolean) {\n\tif (isMap(base)) {\n\t\treturn new Map(base)\n\t}\n\tif (isSet(base)) {\n\t\treturn new Set(base)\n\t}\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\n\tif (!strict && isPlainObject(base)) {\n\t\tif (!getPrototypeOf(base)) {\n\t\t\tconst obj = Object.create(null)\n\t\t\treturn Object.assign(obj, base)\n\t\t}\n\t\treturn {...base}\n\t}\n\n\tconst descriptors = Object.getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = Reflect.ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (_key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\treturn Object.isFrozen(obj)\n}\n", "import {\n\tImmerState,\n\tPatch,\n\tDrafted,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tArchType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(0, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ArchType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ArchType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n", "import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tArchType,\n\tgetPlugin\n} from \"../internal\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (state.type_ === ArchType.Object || state.type_ === ArchType.Array)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n", "import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tArchType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result = state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ArchType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n\t\tdie(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ArchType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n", "import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tgetPrototypeOf,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tArchType,\n\tImmerScope\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ArchType.Object\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ArchType.Array\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ArchType.Array : (ArchType.Object as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(value, state))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\tif (state.copy_) {\n\t\t\tdelete state.copy_[prop]\n\t\t}\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ArchType.Array || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop as any)))\n\t\tdie(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (\n\t\tprocess.env.NODE_ENV !== \"production\" &&\n\t\tprop !== \"length\" &&\n\t\tisNaN(parseInt(prop as any))\n\t)\n\t\tdie(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {\n\tbase_: any\n\tcopy_: any\n\tscope_: ImmerScope\n}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(\n\t\t\tstate.base_,\n\t\t\tstate.scope_.immer_.useStrictShallowCopy_\n\t\t)\n\t}\n}\n", "import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tautoFreeze_: boolean = true\n\tuseStrictShallowCopy_: boolean = false\n\n\tconstructor(config?: {autoFreeze?: boolean; useStrictShallowCopy?: boolean}) {\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tif (typeof config?.useStrictShallowCopy === \"boolean\")\n\t\t\tthis.setUseStrictShallowCopy(config!.useStrictShallowCopy)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(1, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (!state || !state.isManual_) die(9)\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to enable strict shallow copy.\n\t *\n\t * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n\t */\n\tsetUseStrictShallowCopy(value: boolean) {\n\t\tthis.useStrictShallowCopy_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: createProxyProxy(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n", "import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tisFrozen\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(10, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value) || isFrozen(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tif (state) {\n\t\tif (!state.modified_) return state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_)\n\t} else {\n\t\tcopy = shallowCopy(value, true)\n\t}\n\t// recurse\n\teach(copy, (key, childValue) => {\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\tif (state) {\n\t\tstate.finalized_ = false\n\t}\n\treturn copy\n}\n", "import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tProxyArrayState,\n\tMapState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tgetPrototypeOf,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tArchType,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING,\n\terrors\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst errorOffset = 16\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\terrors.push(\n\t\t\t'Sets cannot have \"replace\" patches.',\n\t\t\tfunction(op: string) {\n\t\t\t\treturn \"Unsupported patch operation: \" + op\n\t\t\t},\n\t\t\tfunction(path: string) {\n\t\t\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t\t\t},\n\t\t\t\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n\t\t)\n\t}\n\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ArchType.Object:\n\t\t\tcase ArchType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ArchType.Array:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ArchType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tfor (let i = copy_.length - 1; base_.length <= i; --i) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tinversePatches.push({\n\t\t\t\top: REMOVE,\n\t\t\t\tpath\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchType.Object || parentType === ArchType.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\")\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(errorOffset + 2, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\tdie(errorOffset)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(errorOffset + 1, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n", "// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tdie,\n\tArchType,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\tclass DraftMap extends Map {\n\t\t[DRAFT_STATE]: MapState\n\n\t\tconstructor(target: AnyMap, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tset(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tforEach(cb: (value: any, key: any, self: any) => void, thisArg?: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tget(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.entries()\n\t\t}\n\t}\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tclass DraftSet extends Set {\n\t\t[DRAFT_STATE]: SetState\n\t\tconstructor(target: AnySet, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tadd(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tforEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\t}\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n", "import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze,\n\tObjectish\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to enable strict shallow copy.\n *\n * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n */\nexport const setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\n", "import { produce } from \"immer\";\n\n/**\n * @typedef {Object} Observer\n * @description The observer object or function.\n * @property {Function} next - Function to handle new values.\n * @property {Function} error - Function to handle errors.\n * @property {Function} complete - Function to handle completion.\n */\n\n/**\n * @class\n * @description Class representing a Subscriber.\n */\nclass Subscriber {\n  /**\n   * @constructor\n   * @description Creates a new Subscriber instance.\n   * @param {Observer|Function} observer - The observer object or function.\n   */\n  constructor(observer) {\n    if (typeof observer === 'function') {\n      this.observer = { next: observer };\n    } else {\n      this.observer = observer;\n    }\n    this.teardowns = [];\n    if (typeof AbortController !== 'undefined') {\n      this.controller = new AbortController();\n      this.signal = this.controller.signal;\n    }\n    this.isUnsubscribed = false;\n  }\n\n  /**\n   * @method\n   * @description Notifies the observer of a new value.\n   * @param {any} result - The result to pass to the observer's next method.\n   * @example\n   * subscriber.next('Hello, world!');\n   */\n  next(result) {\n    if (!this.isUnsubscribed && this.observer.next) {\n      this.observer.next(result);\n    }\n  }\n\n  /**\n   * @method\n   * @description Notifies the observer that the observable has completed and no more data will be emitted.\n   * @example\n   * subscriber.complete();\n   */\n  complete() {\n    if (!this.isUnsubscribed) {\n      if (this.observer.complete) {\n        this.observer.complete();\n      }\n      this.unsubscribe();\n    }\n  }\n\n  /**\n   * @method\n   * @description Notifies the observer that an error has occurred.\n   * @param {Error} error - The error to pass to the observer's error method.\n   * @example\n   * subscriber.error(new Error('Something went wrong'));\n   */\n  error(error) {\n    if (!this.isUnsubscribed) {\n      if (this.observer.error) {\n        this.observer.error(error);\n      }\n      this.unsubscribe();\n    }\n  }\n\n  /**\n   * @method\n   * @description Adds a teardown function to the teardowns array.\n   * @param {Function} teardown - The teardown function to add to the teardowns array.\n   */\n  addTeardown(teardown) {\n    this.teardowns.push(teardown);\n  }\n\n  /**\n   * @method\n   * @description Unsubscribes from the observable, preventing any further notifications to the observer and triggering any teardown logic.\n   * @example\n   * subscriber.unsubscribe();\n   */\n  unsubscribe() {\n    if (!this.isUnsubscribed) {\n      this.isUnsubscribed = true;\n      if (this.controller) {\n        this.controller.abort();\n      }\n      this.teardowns.forEach(teardown => {\n        if (typeof teardown !== 'function') {\n          throw new Error('[Cami.js] Teardown must be a function. Please implement a teardown function in your subscriber.');\n        }\n        teardown();\n      });\n    }\n  }\n}\n\n/**\n * @class\n * @description Class representing an Observable.\n */\nclass Observable {\n  /**\n   * @constructor\n   * @description Creates a new Observable instance.\n   * @param {Function} subscribeCallback - The callback function to call when a new observer subscribes.\n   */\n  constructor(subscribeCallback = () => () => {}) {\n    this._observers = [];\n    this.subscribeCallback = subscribeCallback;\n  }\n\n  /**\n   * @method\n   * @description Subscribes an observer to the observable.\n   * @param {Observer|Function} observerOrNext - The observer to subscribe or the next function. Default is an empty function.\n   * @param {Function} error - The error function. Default is an empty function.\n   * @param {Function} complete - The complete function. Default is an empty function.\n   * @returns {Object} An object containing an unsubscribe method to stop receiving updates.\n   * @example\n   * const observable = new Observable();\n   * const subscription = observable.subscribe({\n   *   next: value => console.log(value),\n   *   error: err => console.error(err),\n   *   complete: () => console.log('Completed'),\n   * });\n   */\n  subscribe(observerOrNext = () => {}, error = () => {}, complete = () => {}) {\n    let observer;\n\n    if (typeof observerOrNext === 'function') {\n      observer = {\n        next: observerOrNext,\n        error,\n        complete,\n      };\n    } else if (typeof observerOrNext === 'object') {\n      observer = observerOrNext;\n    } else {\n      throw new Error('[Cami.js] First argument to subscribe must be a next callback or an observer object');\n    }\n\n    const subscriber = new Subscriber(observer);\n    let teardown = () => {};\n\n    try {\n      teardown = this.subscribeCallback(subscriber);\n    } catch (error) {\n      if (subscriber.error) {\n        subscriber.error(error);\n      } else {\n        console.error('[Cami.js] Error in Subscriber:', error);\n      }\n      return;\n    }\n\n    subscriber.addTeardown(teardown);\n    this._observers.push(subscriber);\n\n    return {\n      unsubscribe: () => subscriber.unsubscribe(),\n      complete: () => subscriber.complete(),\n      error: (err) => subscriber.error(err),\n    };\n  }\n\n  /**\n   * @method\n   * @description Passes a value to the observer's next method.\n   * @param {*} value - The value to be passed to the observer's next method.\n   * @example\n   * const observable = new Observable();\n   * observable.next('Hello, world!');\n   */\n  next(value) {\n    this._observers.forEach(observer => {\n      observer.next(value);\n    });\n  }\n\n  /**\n   * @method\n   * @description Passes an error to the observer's error method.\n   * @param {*} error - The error to be passed to the observer's error method.\n   * @example\n   * const observable = new Observable();\n   * observable.error(new Error('Something went wrong'));\n   */\n  error(error) {\n    this._observers.forEach(observer => {\n      observer.error(error);\n    });\n  }\n\n  /**\n   * @method\n   * @description Calls the complete method on all observers.\n   * @example\n   * const observable = new Observable();\n   * observable.complete();\n   */\n  complete() {\n    this._observers.forEach(observer => {\n      observer.complete();\n    });\n  }\n\n  /**\n   * @method\n   * @description Subscribes an observer with a next function to the observable.\n   * @param {Function} callbackFn - The callback function to call when a new value is emitted.\n   * @returns {Object} An object containing an unsubscribe method to stop receiving updates.\n   * @example\n   * const observable = new Observable();\n   * const subscription = observable.onValue(value => console.log(value));\n   */\n  onValue(callbackFn) {\n    return this.subscribe({\n      next: callbackFn\n    });\n  }\n\n  /**\n   * @method\n   * @description Subscribes an observer with an error function to the observable.\n   * @param {Function} callbackFn - The callback function to call when an error is emitted.\n   * @returns {Object} An object containing an unsubscribe method to stop receiving updates.\n   * @example\n   * const observable = new Observable();\n   * const subscription = observable.onError(err => console.error(err));\n   */\n  onError(callbackFn) {\n    return this.subscribe({\n      error: callbackFn\n    });\n  }\n\n  /**\n   * @method\n   * @description Subscribes an observer with a complete function to the observable.\n   * @param {Function} callbackFn - The callback function to call when the observable completes.\n   * @returns {Object} An object containing an unsubscribe method to stop receiving updates.\n   * @example\n   * const observable = new Observable();\n   * const subscription = observable.onEnd(() => console.log('Completed'));\n   */\n  onEnd(callbackFn) {\n    return this.subscribe({\n      complete: callbackFn\n    });\n  }\n\n  /**\n   * @method\n   * @description Returns an AsyncIterator which allows asynchronous iteration over emitted values.\n   * @returns {AsyncIterator} An object that conforms to the AsyncIterator protocol.\n   * @example\n   * const observable = new Observable();\n   * for await (const value of observable) {\n   *   console.log(value);\n   * }\n   */\n  [Symbol.asyncIterator]() {\n    let observer;\n    let resolve;\n    let promise = new Promise(r => (resolve = r));\n\n    observer = {\n      next: value => {\n        resolve({ value, done: false });\n        promise = new Promise(r => (resolve = r));\n      },\n      complete: () => {\n        resolve({ done: true });\n      },\n      error: err => {\n        throw err;\n      },\n    };\n\n    this.subscribe(observer);\n\n    return {\n      next: () => promise,\n    };\n  }\n}\n\nexport { Observable };\n", "import { Observable } from './observable.js';\nimport { produce } from \"immer\";\n\n/**\n * @class ObservableStore\n * @extends {Observable}\n * @description This class is used to create a store that can be observed for changes. Adding the actions on the store is recommended.\n * @example\n * ```javascript\n * const CartStore = cami.store({\n *   cartItems: [],\n *   add: (store, product) => {\n *     const cartItem = { ...product, cartItemId: Date.now() };\n *     store.cartItems.push(cartItem);\n *   },\n *   remove: (store, product) => {\n *     store.cartItems = store.cartItems.filter(item => item.cartItemId !== product.cartItemId);\n *   }\n * });\n * ```\n */\nclass ObservableStore extends Observable {\n  constructor(initialState) {\n    if (typeof initialState !== 'object' || initialState === null) {\n      throw new TypeError('[Cami.js] initialState must be an object');\n    }\n\n    super(subscriber => {\n      this._subscriber = subscriber;\n      return () => { this._subscriber = null; };\n    });\n\n    this.state = new Proxy(initialState, {\n      get: (target, property) => {\n        return target[property];\n      },\n      set: (target, property, value) => {\n        target[property] = value;\n        this._observers.forEach(observer => observer.next(this.state));\n        if (this.devTools) {\n          this.devTools.send(property, this.state);\n        }\n        return true;\n      }\n    });\n\n    this.reducers = {};\n    this.middlewares = [];\n    this.devTools = this._connectToDevTools();\n\n    Object.keys(initialState).forEach(key => {\n      if (typeof initialState[key] === 'function') {\n        this.register(key, initialState[key]);\n      } else {\n        this.state[key] = initialState[key];\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method _applyMiddleware\n   * @param {string} action - The action type\n   * @param {...any} args - The arguments to pass to the action\n   * @returns {void}\n   * @description This method applies all registered middlewares to the given action and arguments.\n   */\n  _applyMiddleware(action, ...args) {\n    const context = {\n      state: this.state,\n      action,\n      payload: args,\n    };\n\n    for (const middleware of this.middlewares) {\n      middleware(context);\n    }\n  }\n\n  /**\n   * @private\n   * @method _connectToDevTools\n   * @returns {Object|null} - Returns the devTools object if available, else null\n   * @description This method connects the store to the Redux DevTools extension if it is available.\n   */\n  _connectToDevTools() {\n    if (typeof window !== 'undefined' && window['__REDUX_DEVTOOLS_EXTENSION__']) {\n      const devTools = window['__REDUX_DEVTOOLS_EXTENSION__'].connect();\n      devTools.init(this.state);\n      return devTools;\n    }\n    return null;\n  }\n\n  /**\n   * @method use\n   * @memberof ObservableStore\n   * @param {Function} middleware - The middleware function to use\n   * @description This method registers a middleware function to be used with the store. Useful if you like redux-style middleware.\n   * @example\n   * ```javascript\n   * const loggerMiddleware = (context) => {\n   *   console.log(`Action ${context.action} was dispatched with payload:`, context.payload);\n   * };\n   * CartStore.use(loggerMiddleware);\n   * ```\n   */\n  use(middleware) {\n    this.middlewares.push(middleware);\n  }\n\n  /**\n   * @method register\n   * @memberof ObservableStore\n   * @param {string} action - The action type\n   * @param {Function} reducer - The reducer function for the action\n   * @throws {Error} - Throws an error if the action type is already registered\n   * @description This method registers a reducer function for a given action type. Useful if you like redux-style reducers.\n   * @example\n   * ```javascript\n   * CartStore.register('add', (store, product) => {\n   *   const cartItem = { ...product, cartItemId: Date.now() };\n   *   store.cartItems.push(cartItem);\n   * });\n   * ```\n   */\n  register(action, reducer) {\n    if (this.reducers[action]) {\n      throw new Error(`[Cami.js] Action type ${action} is already registered.`);\n    }\n    this.reducers[action] = reducer;\n\n    this[action] = (...args) => {\n      this.dispatch(action, ...args);\n    };\n  }\n\n  /**\n   * @method dispatch\n   * @memberof ObservableStore\n   * @param {string|Function} action - The action type or a function\n   * @param {Object} payload - The payload for the action\n   * @throws {Error} - Throws an error if the action type is not a string\n   * @description This method dispatches an action to the store. Useful if you like redux-style actions / flux.\n   * @example\n   * ```javascript\n   * CartStore.dispatch('add', product);\n   * ```\n   */\n  dispatch(action, payload) {\n    if (typeof action === 'function') {\n      return action(this.dispatch.bind(this), () => this.state);\n    }\n\n    if (typeof action !== 'string') {\n      throw new Error(`[Cami.js] Action type must be a string. Got: ${typeof action}`);\n    }\n\n    const reducer = this.reducers[action];\n    if (!reducer) {\n      console.warn(`No reducer found for action ${action}`);\n      return;\n    }\n\n    this._applyMiddleware(action, payload);\n\n    this.state = produce(this.state, draft => {\n      reducer(draft, payload);\n    });\n\n    this._observers.forEach(observer => observer.next(this.state));\n\n    if (this.devTools) {\n      this.devTools.send(action, this.state);\n    }\n  }\n}\n\n/**\n * @private\n * @function _localStorageEnhancer\n * @param {Function} StoreClass - The class of the store to enhance.\n * @param {Object} initialState - The initial state for the new store instance.\n * @param {Object} options - Configuration options for the store.\n * @param {string} [options.name='default-store'] - The name of the store to use as the key in localStorage.\n * @param {number} [options.expiry=86400000] - The time in milliseconds until the stored state expires (default is 24 hours).\n * @returns {Function} A function that takes initialState and options, and returns an enhanced store instance with localStorage support.\n * @description This enhancer adds the ability to persist the store's state in localStorage. It returns a function that, when called with initialState and options, creates a new store instance with localStorage support. The state of the store is automatically saved to localStorage whenever it changes, and it is rehydrated from localStorage when the store is created. The enhanced store also includes a `reset()` method for resetting the store's state.\n * @example\n * ```javascript\n * // Enhance the ObservableStore with localStorage capabilities\n * const enhancedCreateStore = _localStorageEnhancer(ObservableStore);\n * // Create a store instance with initialState and provide a name to be used as the localStorage key\n * const storeWithLocalStorage = enhancedCreateStore({ items: [] }, { name: 'my-store', expiry: 1000 * 60 * 60 * 24 });\n * // Initialize or reset the store's state as needed\n * storeWithLocalStorage.reset();\n * ```\n */\n  const _localStorageEnhancer = (StoreClass) => {\n    return (initialState, options) => {\n      const storeName = options?.name || 'default-store';\n      const shouldLoad = options?.load !== false;\n      const defaultExpiry = 24 * 60 * 60 * 1000;\n      const expiry = options?.expiry !== undefined ? options.expiry : defaultExpiry;\n      const store = new StoreClass(initialState);\n\n      store.init = () => {\n        if (shouldLoad) {\n          const storedState = localStorage.getItem(storeName);\n          const storedExpiry = localStorage.getItem(`${storeName}-expiry`);\n          const currentTime = new Date().getTime();\n\n          if (storedState && storedExpiry) {\n            const isExpired = currentTime >= parseInt(storedExpiry, 10);\n            if (!isExpired) {\n              store.state = JSON.parse(storedState);\n            } else {\n              localStorage.removeItem(storeName);\n              localStorage.removeItem(`${storeName}-expiry`);\n            }\n          }\n        }\n      };\n\n      store.init();\n\n      store.reset = () => {\n        localStorage.removeItem(storeName);\n        localStorage.removeItem(`${storeName}-expiry`);\n\n        store.state = initialState;\n\n        store._observers.forEach(observer => observer.next(store.state));\n      };\n\n      store.subscribe((state) => {\n        const currentTime = new Date().getTime();\n        const expiryTime = currentTime + expiry;\n\n        localStorage.setItem(storeName, JSON.stringify(state));\n        localStorage.setItem(`${storeName}-expiry`, expiryTime.toString());\n      });\n\n      return store;\n    };\n  };\n\n/**\n * @function store\n * @param {Object} initialState - The initial state of the store.\n * @param {Object} [options] - Configuration options for the store.\n * @param {boolean} [options.localStorage=true] - Whether to use localStorage for state persistence.\n * @param {string} [options.name='cami-store'] - The name of the store to use as the key in localStorage.\n * @param {number} [options.expiry=86400000] - The time in milliseconds until the stored state expires (default is 24 hours).\n * @returns {ObservableStore} A new instance of ObservableStore with the provided initial state, enhanced with localStorage if enabled.\n * @description This function creates a new instance of ObservableStore with the provided initial state and enhances it with localStorage support if enabled. The store's state will be automatically persisted to and loaded from localStorage, using the provided name as the key. The `localStorage` option enables this behavior and can be toggled off if persistence is not needed.\n * @example\n * ```javascript\n * // Create a store with default localStorage support\n * const CartStore = store({ cartItems: [] });\n *\n * // Create a store without localStorage support\n * const NonPersistentStore = store({ items: [] }, { localStorage: false });\n * ```\n */\nconst store = (initialState, options = {}) => {\n  const defaultOptions = {\n    localStorage: true,\n    name: 'cami-store',\n    expiry: 86400000, // 24 hours\n  };\n\n  const finalOptions = { ...defaultOptions, ...options };\n\n  if (finalOptions.localStorage) {\n    const enhancedStore = _localStorageEnhancer(ObservableStore)(initialState, finalOptions);\n    return enhancedStore;\n  } else {\n    return new ObservableStore(initialState);\n  }\n}\n\nexport { ObservableStore, store };\n", "import { Observable } from './observable.js';\nimport { ObservableState } from './observable-state.js';\n\n/**\n * @class ObservableStream\n * @description ObservableStream class that extends Observable and provides additional methods for data transformation\n * @extends Observable\n */\nclass ObservableStream extends Observable {\n  /**\n   * @method\n   * @static\n   * @param {any} value - The value to create an Observable from\n   * @returns {ObservableStream} A new ObservableStream that emits the values from the value\n   *\n   * @example\n   * // Example 1: Creating an ObservableStream from a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   */\n  static from(value) {\n    if (value instanceof Observable) {\n      return new ObservableStream(subscriber => {\n        const subscription = value.subscribe({\n          next: v => subscriber.next(v),\n          error: err => subscriber.error(err),\n          complete: () => subscriber.complete(),\n        });\n        return () => {\n          if (!subscription.closed) {\n            subscription.unsubscribe();\n          }\n        };\n      });\n    } else if (value[Symbol.asyncIterator]) {\n      return new ObservableStream(subscriber => {\n        let isCancelled = false;\n        (async () => {\n          try {\n            for await (const v of value) {\n              if (isCancelled) return;\n              subscriber.next(v);\n            }\n            subscriber.complete();\n          } catch (err) {\n            subscriber.error(err);\n          }\n        })();\n        return () => {\n          isCancelled = true;\n        };\n      });\n    } else if (value[Symbol.iterator]) {\n      return new ObservableStream(subscriber => {\n        try {\n          for (const v of value) {\n            subscriber.next(v);\n          }\n          subscriber.complete();\n        } catch (err) {\n          subscriber.error(err);\n        }\n        return () => {\n          if (!subscription.closed) {\n            subscription.unsubscribe();\n          }\n        };\n      });\n    } else if (value instanceof Promise) {\n      return new ObservableStream(subscriber => {\n        value.then(\n          v => {\n            subscriber.next(v);\n            subscriber.complete();\n          },\n          err => subscriber.error(err)\n        );\n        return () => {};\n      });\n    } else {\n      throw new TypeError('[Cami.js] ObservableStream.from requires an Observable, AsyncIterable, Iterable, or Promise');\n    }\n  }\n\n  /**\n   * @method\n   * @param {Function} transformFn - The function to transform the data\n   * @returns {ObservableStream} A new ObservableStream instance with transformed data\n   *\n   * @example\n   * // Example 1: Transforming an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const transformedStream = observableStream.map(data => data.map(item => item * 2));\n   *\n   * // Example 2: Transforming a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const transformedStream = observableStream.map(event => ({ x: event.clientX, y: event.clientY }));\n   */\n  map(transformFn) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => subscriber.next(transformFn(value)),\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} predicateFn - The function to filter the data\n   * @returns {ObservableStream} A new ObservableStream instance with filtered data\n   *\n   * @example\n   * // Example 1: Filtering an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const filteredStream = observableStream.filter(data => data.someProperty === 'someValue');\n   *\n   * // Example 2: Filtering a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const filteredStream = observableStream.filter(event => event.target.id === 'someId');\n   */\n  filter(predicateFn) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => {\n          if (predicateFn(value)) {\n            subscriber.next(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} reducerFn - The function to reduce the data\n   * @param {any} initialValue - The initial value for the reducer\n   * @returns {Promise} A promise that resolves with the reduced value\n   *\n   * @example\n   * // Example 1: Reducing an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const reducedValuePromise = observableStream.reduce((acc, data) => acc + data.someProperty, 0);\n   *\n   * // Example 2: Reducing a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const reducedValuePromise = observableStream.reduce((acc, event) => acc + 1, 0);\n   */\n  reduce(reducerFn, initialValue) {\n    return new Promise((resolve, reject) => {\n      let accumulator = initialValue;\n      const subscription = this.subscribe({\n        next: value => {\n          accumulator = reducerFn(accumulator, value);\n        },\n        error: err => reject(err),\n        complete: () => resolve(accumulator),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {Observable} notifier - The Observable that will complete this Observable\n   * @returns {ObservableStream} A new ObservableStream that completes when the notifier emits\n   *\n   * @example\n   * // Example 1: Completing an API data stream when another stream emits\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const notifierStream = new ObservableStream(subscriber => {\n   *   setTimeout(() => subscriber.next(), 5000);\n   * });\n   * const completedStream = observableStream.takeUntil(notifierStream);\n   *\n   * // Example 2: Completing a user event stream when another stream emits\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const notifierStream = new ObservableStream(subscriber => {\n   *   setTimeout(() => subscriber.next(), 5000);\n   * });\n   * const completedStream = observableStream.takeUntil(notifierStream);\n   */\n  takeUntil(notifier) {\n    return new ObservableStream(subscriber => {\n      const sourceSubscription = this.subscribe({\n        next: value => subscriber.next(value),\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      const notifierSubscription = notifier.subscribe({\n        next: () => {\n          subscriber.complete();\n          sourceSubscription.unsubscribe();\n          notifierSubscription.unsubscribe();\n        },\n        error: err => subscriber.error(err),\n      });\n\n      return () => {\n        sourceSubscription.unsubscribe();\n        notifierSubscription.unsubscribe();\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @param {number} n - The number of values to take\n   * @returns {ObservableStream} A new ObservableStream that completes after emitting n values\n   *\n   * @example\n   * // Example 1: Taking a certain number of values from an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const takenStream = observableStream.take(5);\n   *\n   * // Example 2: Taking a certain number of values from a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const takenStream = observableStream.take(5);\n   */\n  take(n) {\n    return new ObservableStream(subscriber => {\n      let i = 0;\n      const subscription = this.subscribe({\n        next: value => {\n          if (i++ < n) {\n            subscriber.next(value);\n          } else {\n            subscriber.complete();\n            subscription.unsubscribe();\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {number} n - The number of values to drop\n   * @returns {ObservableStream} A new ObservableStream that starts emitting after n values have been emitted\n   *\n   * @example\n   * // Example 1: Dropping a certain number of values from an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const droppedStream = observableStream.drop(5);\n   *\n   * // Example 2: Dropping a certain number of values from a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const droppedStream = observableStream.drop(5);\n   */\n  drop(n) {\n    return new ObservableStream(subscriber => {\n      let i = 0;\n      const subscription = this.subscribe({\n        next: value => {\n          if (i++ >= n) {\n            subscriber.next(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} transformFn - The function to transform the data into Observables\n   * @returns {ObservableStream} A new ObservableStream that emits the values from the inner Observables\n   *\n   * @example\n   * // Example 1: Transforming an API data stream into inner Observables\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const flatMappedStream = observableStream.flatMap(data => ObservableStream.from(fetch(`https://api.example.com/data/${data.id}`).then(response => response.json())));\n   *\n   * // Example 2: Transforming a user event stream into inner Observables\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const positionStream = clickStream.flatMap(event => ObservableStream.from({ x: event.clientX, y: event.clientY }));\n   *\n   * // Example 3: Transforming a stream of search terms into a stream of search results\n   * const searchTerms = new ObservableStream(subscriber => {\n   *   const input = document.querySelector('#search-input');\n   *   input.addEventListener('input', event => subscriber.next(event.target.value));\n   * });\n   * const searchResults = searchTerms.debounce(300).flatMap(term => ObservableStream.from(fetch(`https://api.example.com/search?q=${term}`).then(response => response.json())));\n   */\n  flatMap(transformFn) {\n    return new ObservableStream(subscriber => {\n      const subscriptions = new Set();\n\n      const sourceSubscription = this.subscribe({\n        next: value => {\n          const innerObservable = transformFn(value);\n          const innerSubscription = innerObservable.subscribe({\n            next: innerValue => subscriber.next(innerValue),\n            error: err => subscriber.error(err),\n            complete: () => {\n              subscriptions.delete(innerSubscription);\n              if (subscriptions.size === 0) {\n                subscriber.complete();\n              }\n            },\n          });\n          subscriptions.add(innerSubscription);\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          if (subscriptions.size === 0) {\n            subscriber.complete();\n          }\n        },\n      });\n\n      return () => {\n        sourceSubscription.unsubscribe();\n        subscriptions.forEach(subscription => subscription.unsubscribe());\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} transformFn - The function to transform the data into Observables\n   * @returns {ObservableStream} A new ObservableStream that emits the values from the inner Observables\n   * @example\n   * // Example 1: Transforming click events into Observables\n   * const clickStream = new ObservableStream();\n   * document.addEventListener('click', (event) => clickStream.push(event));\n   * const positionStream = clickStream.switchMap((event) => {\n   *   return new ObservableStream((subscriber) => {\n   *     subscriber.push({ x: event.clientX, y: event.clientY });\n   *     subscriber.complete();\n   *   });\n   * });\n   * positionStream.subscribe({\n   *   next: (position) => console.log(`Clicked at position: ${position.x}, ${position.y}`),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Transforming API responses into Observables\n   * const apiStream = new ObservableStream();\n   * fetch('https://api.example.com/data')\n   *   .then((response) => response.json())\n   *   .then((data) => apiStream.push(data))\n   *   .catch((error) => apiStream.error(error));\n   * const transformedStream = apiStream.switchMap((data) => {\n   *   return new ObservableStream((subscriber) => {\n   *     subscriber.push(transformData(data));\n   *     subscriber.complete();\n   *   });\n   * });\n   * transformedStream.subscribe({\n   *   next: (transformedData) => console.log(transformedData),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  switchMap(transformFn) {\n    return new ObservableStream(subscriber => {\n      let innerSubscription = null;\n\n      const sourceSubscription = this.subscribe({\n        next: value => {\n          if (innerSubscription) {\n            innerSubscription.unsubscribe();\n          }\n\n          const innerObservable = transformFn(value);\n          innerSubscription = innerObservable.subscribe({\n            next: innerValue => subscriber.next(innerValue),\n            error: err => subscriber.error(err),\n            complete: () => {\n              if (innerSubscription) {\n                innerSubscription.unsubscribe();\n                innerSubscription = null;\n              }\n            },\n          });\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          if (innerSubscription) {\n            innerSubscription.unsubscribe();\n          }\n          subscriber.complete();\n        },\n      });\n\n      return () => {\n        sourceSubscription.unsubscribe();\n        if (innerSubscription) {\n          innerSubscription.unsubscribe();\n        }\n      };\n    });\n  };\n\n  /**\n   * @method\n   * @returns {Promise} A promise that resolves with an array of all values emitted by the Observable\n   * @example\n   * // Example: Collecting all emitted values from an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.toArray().then((values) => console.log(values)); // Logs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   */\n  toArray() {\n    return new Promise((resolve, reject) => {\n      const values = [];\n      this.subscribe({\n        next: value => values.push(value),\n        error: err => reject(err),\n        complete: () => resolve(values),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} callback - The function to call for each value emitted by the Observable\n   * @returns {Promise} A promise that resolves when the Observable completes\n   * @example\n   * // Example: Logging each value emitted by an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.forEach((value) => console.log(value)); // Logs each number from 0 to 9\n   */\n  forEach(callback) {\n    return new Promise((resolve, reject) => {\n      this.subscribe({\n        next: value => callback(value),\n        error: err => reject(err),\n        complete: () => resolve(),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} predicate - The function to test each value\n   * @returns {Promise} A promise that resolves with a boolean indicating whether every value satisfies the predicate\n   * @example\n   * // Example: Checking if all emitted values are even\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.every((value) => value % 2 === 0).then((allEven) => console.log(allEven)); // Logs: false\n   */\n  every(predicate) {\n    return new Promise((resolve, reject) => {\n      let every = true;\n      this.subscribe({\n        next: value => {\n          if (!predicate(value)) {\n            every = false;\n            resolve(false);\n          }\n        },\n        error: err => reject(err),\n        complete: () => resolve(every),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} predicate - The function to test each value\n   * @returns {Promise} A promise that resolves with the first value that satisfies the predicate\n   * @example\n   * // Example: Finding the first emitted value that is greater than 5\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.find((value) => value > 5).then((value) => console.log(value)); // Logs: 6\n   */\n  find(predicate) {\n    return new Promise((resolve, reject) => {\n      const subscription = this.subscribe({\n        next: value => {\n          if (predicate(value)) {\n            resolve(value);\n            subscription.unsubscribe();\n          }\n        },\n        error: err => reject(err),\n        complete: () => resolve(undefined),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} predicate - The function to test each value\n   * @returns {Promise} A promise that resolves with a boolean indicating whether some value satisfies the predicate\n   * @example\n   * // Example: Checking if any emitted values are greater than 5\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.some((value) => value > 5).then((anyGreaterThan5) => console.log(anyGreaterThan5)); // Logs: true\n   */\n  some(predicate) {\n    return new Promise((resolve, reject) => {\n      const subscription = this.subscribe({\n        next: value => {\n          if (predicate(value)) {\n            resolve(true);\n            subscription.unsubscribe();\n          }\n        },\n        error: err => reject(err),\n        complete: () => resolve(false),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} callback - The function to call when the Observable completes\n   * @returns {ObservableStream} A new ObservableStream that calls the callback when it completes\n   * @example\n   * // Example: Logging a message when the ObservableStream completes\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * const finalStream = numberStream.finally(() => console.log('Stream completed'));\n   * finalStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9, then logs 'Stream completed'\n   */\n  finally(callback) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => subscriber.next(value),\n        error: err => {\n          callback();\n          subscriber.error(err);\n        },\n        complete: () => {\n          callback();\n          subscriber.complete();\n        },\n      });\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @description Converts the ObservableStream to an ObservableState\n   * @returns {ObservableState} A new ObservableState that represents the current value of the stream\n   * @example\n   * // Example: Converting an ObservableStream to an ObservableState\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * const numberState = numberStream.toState();\n   * numberState.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9\n   */\n  toState(initialValue = null) {\n    const state = new ObservableState(initialValue, null, { name: 'ObservableStream' });\n    this.subscribe({\n      next: value => state.update(() => value),\n      error: err => state.error(err),\n      complete: () => state.complete(),\n    });\n    return state;\n  }\n\n  /**\n   * @method\n   * @description Pushes a value to the observers. The value can be an Observable, an async iterable, an iterable, a Promise, or any other value.\n   * @param {any} value - The value to push\n   * @example\n   * // Example 1: Pushing values from an Observable\n   * const sourceStream = new ObservableStream();\n   * const targetStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   sourceStream.push(i);\n   * }\n   * sourceStream.end();\n   * targetStream.push(sourceStream);\n   * targetStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9\n   *\n   * // Example 2: Pushing values from a Promise\n   * const promiseStream = new ObservableStream();\n   * const promise = new Promise((resolve) => {\n   *   setTimeout(() => resolve('Hello, world!'), 1000);\n   * });\n   * promiseStream.push(promise);\n   * promiseStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs 'Hello, world!' after 1 second\n   */\n  push(value) {\n    if (value instanceof Observable) {\n      const subscription = value.subscribe({\n        next: v => this._observers.forEach(observer => observer.next(v)),\n        error: err => this._observers.forEach(observer => observer.error(err)),\n        complete: () => this._observers.forEach(observer => observer.complete()),\n      });\n    } else if (value[Symbol.asyncIterator]) {\n      (async () => {\n        try {\n          for await (const v of value) {\n            this._observers.forEach(observer => observer.next(v));\n          }\n          this._observers.forEach(observer => observer.complete());\n        } catch (err) {\n          this._observers.forEach(observer => observer.error(err));\n        }\n      })();\n    } else if (value[Symbol.iterator]) {\n      try {\n        for (const v of value) {\n          this._observers.forEach(observer => observer.next(v));\n        }\n        this._observers.forEach(observer => observer.complete());\n      } catch (err) {\n        this._observers.forEach(observer => observer.error(err));\n      }\n    } else if (value instanceof Promise) {\n      value.then(\n        v => {\n          this._observers.forEach(observer => observer.next(v));\n          this._observers.forEach(observer => observer.complete());\n        },\n        err => this._observers.forEach(observer => observer.error(err))\n      );\n    } else {\n      this._observers.forEach(observer => observer.next(value));\n    }\n  }\n\n  /**\n   * @method\n   * @description Subscribes to a stream and pushes its values to the observers.\n   * @param {ObservableStream} stream - The stream to plug\n   * @example\n   * // Example: Plugging one ObservableStream into another\n   * const sourceStream = new ObservableStream();\n   * const targetStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   sourceStream.push(i);\n   * }\n   * sourceStream.end();\n   * targetStream.plug(sourceStream);\n   * targetStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9\n   */\n  plug(stream) {\n    stream.subscribe({\n      next: value => this.push(value),\n      error: err => this._observers.forEach(observer => observer.error(err)),\n      complete: () => this._observers.forEach(observer => observer.complete()),\n    });\n  }\n\n  /**\n   * @method\n   * @description Ends the stream by calling the complete method of each observer.\n   * @example\n   * // Example: Ending an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   *   complete: () => console.log('Stream completed'),\n   * }); // Logs each number from 0 to 9, then logs 'Stream completed'\n   */\n  end() {\n    this._observers.forEach(observer => {\n      if (observer && typeof observer.complete === 'function') {\n        observer.complete();\n      }\n    });\n  }\n\n  /**\n   * @method\n   * @description Catches errors on the ObservableStream and replaces them with a new stream.\n   * @param {Function} fn - A function that receives the error and returns a new ObservableStream.\n   * @returns {ObservableStream} - Returns a new ObservableStream that replaces the original stream when an error occurs.\n   * @example\n   * // Example: Catching and handling errors in an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   if (i === 5) {\n   *     numberStream.error(new Error('Something went wrong'));\n   *   } else {\n   *     numberStream.push(i);\n   *   }\n   * }\n   * numberStream.end();\n   * const errorHandledStream = numberStream.catchError((error) => {\n   *   console.error(error);\n   *   return new ObservableStream((subscriber) => {\n   *     subscriber.push('Error handled');\n   *     subscriber.complete();\n   *   });\n   * });\n   * errorHandledStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 4, logs the error, then logs 'Error handled'\n   */\n  catchError(fn) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => subscriber.next(value),\n        error: err => {\n          const newStream = fn(err);\n          newStream.subscribe({\n            next: value => subscriber.next(value),\n            error: err => subscriber.error(err),\n            complete: () => subscriber.complete(),\n          });\n        },\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {number} delay - The debounce delay in milliseconds\n   * @returns {ObservableStream} A new ObservableStream that emits the latest value after the debounce delay\n   * @example\n   * // Example: Debouncing an ObservableStream of click events\n   * const clickStream = new ObservableStream();\n   * document.addEventListener('click', (event) => clickStream.push(event));\n   * const debouncedStream = clickStream.debounce(500);\n   * debouncedStream.subscribe({\n   *   next: (event) => console.log(`Clicked at position: ${event.clientX}, ${event.clientY}`),\n   *   error: (err) => console.error(err),\n   * }); // Logs the position of the last click event that occurred at least 500 milliseconds after the previous click event\n   */\n  debounce(delay) {\n    return new ObservableStream(subscriber => {\n      let timeoutId = null;\n      const subscription = this.subscribe({\n        next: value => {\n          clearTimeout(timeoutId);\n          timeoutId = setTimeout(() => {\n            subscriber.next(value);\n          }, delay);\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          clearTimeout(timeoutId);\n          subscriber.complete();\n        },\n      });\n\n      return () => {\n        clearTimeout(timeoutId);\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} sideEffectFn - The function to perform side effect\n   * @returns {ObservableStream} A new ObservableStream that is identical to the source\n   * @example\n   * // Example: Logging each value emitted by an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * const loggedStream = numberStream.tap((value) => console.log(value));\n   * loggedStream.subscribe({\n   *   next: (value) => {},\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9\n   */\n  tap(sideEffectFn) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => {\n          sideEffectFn(value);\n          subscriber.next(value);\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {number} duration - The throttle duration in milliseconds\n   * @returns {ObservableStream} A new ObservableStream that emits a value then ignores subsequent source values for duration milliseconds, then repeats this process.\n   * @example\n   * // Example 1: Throttling scroll events\n   * const scrollStream = new ObservableStream(subscriber => {\n   *   window.addEventListener('scroll', event => subscriber.next(event));\n   * });\n   * const throttledScrollStream = scrollStream.throttle(200);\n   * throttledScrollStream.subscribe({\n   *   next: (event) => console.log('Scroll event:', event),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Throttling search input for autocomplete\n   * const searchInput = document.querySelector('#search-input');\n   * const searchStream = new ObservableStream(subscriber => {\n   *   searchInput.addEventListener('input', event => subscriber.next(event.target.value));\n   * });\n   * const throttledSearchStream = searchStream.throttle(300);\n   * throttledSearchStream.subscribe({\n   *   next: (searchTerm) => console.log('Search term:', searchTerm),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  throttle(duration) {\n    return new ObservableStream(subscriber => {\n      let lastEmitTime = 0;\n      const subscription = this.subscribe({\n        next: value => {\n          const currentTime = Date.now();\n          if (currentTime - lastEmitTime > duration) {\n            lastEmitTime = currentTime;\n            subscriber.next(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @returns {ObservableStream} A new ObservableStream that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n   * @example\n   * // Example 1: Filtering out consecutive duplicate search terms\n   * const searchInput = document.querySelector('#search-input');\n   * const searchStream = new ObservableStream(subscriber => {\n   *   searchInput.addEventListener('input', event => subscriber.next(event.target.value));\n   * });\n   * const distinctSearchStream = searchStream.distinctUntilChanged();\n   * distinctSearchStream.subscribe({\n   *   next: (searchTerm) => console.log('Search term:', searchTerm),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Filtering out consecutive duplicate API responses\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const distinctDataStream = observableStream.distinctUntilChanged();\n   * distinctDataStream.subscribe({\n   *   next: (data) => console.log('API data:', data),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  distinctUntilChanged() {\n    return new ObservableStream(subscriber => {\n      let lastValue;\n      let isFirstValue = true;\n      const subscription = this.subscribe({\n        next: value => {\n          if (isFirstValue || value !== lastValue) {\n            isFirstValue = false;\n            lastValue = value;\n            subscriber.next(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {function} transformFn - The function to transform each value in the source ObservableStream\n   * @returns {ObservableStream} A new ObservableStream that emits the results of applying a given transform function to each value emitted by the source ObservableStream, sequentially.\n   * @example\n   * // Example 1: Transforming a stream of search terms into a stream of search results\n   * const searchInput = document.querySelector('#search-input');\n   * const searchStream = new ObservableStream(subscriber => {\n   *   searchInput.addEventListener('input', event => subscriber.next(event.target.value));\n   * });\n   * const resultsStream = searchStream.concatMap(searchTerm =>\n   *   ObservableStream.from(fetch(`https://api.example.com/search?query=${searchTerm}`).then(response => response.json()))\n   * );\n   * resultsStream.subscribe({\n   *   next: (results) => console.log('Search results:', results),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Transforming a stream of click events into a stream of clicked elements\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event.target));\n   * });\n   * const elementsStream = clickStream.concatMap(target =>\n   *   ObservableStream.from(Promise.resolve(target))\n   * );\n   * elementsStream.subscribe({\n   *   next: (element) => console.log('Clicked element:', element),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  concatMap(transformFn) {\n    return new ObservableStream(subscriber => {\n      let innerSubscription = null;\n      let waiting = false;\n      const sourceValues = [];\n\n      const sourceSubscription = this.subscribe({\n        next: value => {\n          if (!waiting) {\n            waiting = true;\n            const innerObservable = transformFn(value);\n            innerSubscription = innerObservable.subscribe({\n              next: innerValue => subscriber.next(innerValue),\n              error: err => subscriber.error(err),\n              complete: () => {\n                if (sourceValues.length > 0) {\n                  const nextValue = sourceValues.shift();\n                  const nextInnerObservable = transformFn(nextValue);\n                  innerSubscription = nextInnerObservable.subscribe({\n                    next: innerValue => subscriber.next(innerValue),\n                    error: err => subscriber.error(err),\n                    complete: () => waiting = false,\n                  });\n                } else {\n                  waiting = false;\n                }\n              },\n            });\n          } else {\n            sourceValues.push(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          if (!waiting) {\n            subscriber.complete();\n          }\n        },\n      });\n\n      return () => {\n        sourceSubscription.unsubscribe();\n        if (innerSubscription) {\n          innerSubscription.unsubscribe();\n        }\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @param {...ObservableStream} observables - The source ObservableStreams\n   * @returns {ObservableStream} A new ObservableStream that emits an array with the latest values from each source ObservableStream, whenever any source ObservableStream emits.\n   * @example\n   * // Example 1: Combining multiple API data streams\n   * const apiDataStream1 = fetch('https://api.example.com/data1').then(response => response.json());\n   * const apiDataStream2 = fetch('https://api.example.com/data2').then(response => response.json());\n   * const observableStream1 = ObservableStream.from(apiDataStream1);\n   * const observableStream2 = ObservableStream.from(apiDataStream2);\n   * const combinedStream = observableStream1.combineLatest(observableStream2);\n   * combinedStream.subscribe({\n   *   next: ([data1, data2]) => console.log('API data:', data1, data2),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Combining multiple user event streams\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const scrollStream = new ObservableStream(subscriber => {\n   *   window.addEventListener('scroll', event => subscriber.next(event));\n   * });\n   * const combinedStream = clickStream.combineLatest(scrollStream);\n   * combinedStream.subscribe({\n   *   next: ([clickEvent, scrollEvent]) => console.log('User events:', clickEvent, scrollEvent),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  combineLatest(...observables) {\n    return new ObservableStream(subscriber => {\n      const values = new Array(observables.length).fill(undefined);\n      const subscriptions = observables.map((observable, i) =>\n        observable.subscribe({\n          next: value => {\n            values[i] = value;\n            if (!values.includes(undefined)) {\n              subscriber.next([...values]);\n            }\n          },\n          error: err => subscriber.error(err),\n          complete: () => {},\n        })\n      );\n\n      return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    });\n  }\n\n  /**\n   * @method\n   * @param {...any} initialValues - The initial values to start with\n   * @returns {ObservableStream} A new ObservableStream that emits the specified initial values, followed by all values emitted by the source ObservableStream.\n   * @example\n   * // Example 1: Prepending an API data stream with a loading state\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const loadingStream = observableStream.startWith('loading');\n   * loadingStream.subscribe({\n   *   next: (state) => console.log('State:', state),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Prepending a user event stream with an initial event\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const initialEvent = { type: 'initial' };\n   * const eventStream = clickStream.startWith(initialEvent);\n   * eventStream.subscribe({\n   *   next: (event) => console.log('Event:', event),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  startWith(...initialValues) {\n    return new ObservableStream(subscriber => {\n      initialValues.forEach(value => subscriber.next(value));\n      const subscription = this.subscribe({\n        next: value => subscriber.next(value),\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n}\n\nexport { ObservableStream };\n", "/**\n * @private\n * @type {Object}\n * @property {boolean} events - A flag to control event firing\n * @description This is the default configuration for Cami.js\n */\nconst _config = {\n  events: {\n    _state: true,\n    get isEnabled() { return this._state; },\n    enable: function() { this._state = true; },\n    disable: function() { this._state = false; }\n  },\n  debug: {\n    _state: false,\n    get isEnabled() { return this._state; },\n    enable: function() {\n      console.log('Cami.js debug mode enabled');\n      this._state = true;\n    },\n    disable: function() { this._state = false; }\n  }\n};\n\nexport { _config };\n", "import { _config } from './config.js';\n\n/**\n * @private\n * @function\n * Logs the trace of a function execution if debug mode is enabled.\n *\n * @param {string} functionName - The name of the function to trace.\n * @param {...any} messages - Additional messages to log in the console.\n *\n * @example\n * _trace('myFunction', 'This is a test message');\n */\nfunction _trace(functionName, ...messages) {\n  if (_config.debug.isEnabled) {\n    if (functionName === 'cami:state:change') {\n      console.groupCollapsed(`%c[${functionName}]`, 'color: #666666; padding: 1px 3px; border: 1px solid #bbbbbb; border-radius: 2px; font-size: 90%; display: inline-block;', `${messages[0]} changed`);\n      console.log(`oldValue:`, messages[1]);\n      console.log(`newValue:`, messages[2]);\n    } else {\n      console.groupCollapsed(`%c[${functionName}]`, 'color: #666666; padding: 1px 3px; border: 1px solid #bbbbbb; border-radius: 2px; font-size: 90%; display: inline-block;', ...messages);\n    }\n\n    console.trace();\n    console.groupEnd();\n  }\n}\n\nexport { _trace };\n", "import { Observable } from './observable.js';\nimport { ObservableStream } from './observable-stream.js';\nimport { produce } from 'immer';\nimport { _config } from '../config.js';\nimport { _trace } from '../trace.js';\n\n/**\n * @private\n * @class\n * @description DependencyTracker is an object that holds the current dependency.\n * It is used to track dependencies between observables.\n * @type {Object}\n */\nconst DependencyTracker = {\n  current: null\n};\n\n/**\n * @class\n * @extends Observable\n * @description This class extends the Observable class and adds methods for updating the value of the observable.\n * @example\n * import { ObservableState } from 'cami-js';\n * const observable = new ObservableState(10);\n * console.log(observable.value); // 10\n */\nclass ObservableState extends Observable {\n  /**\n   * @constructor\n   * @param {any} initialValue - The initial value of the observable\n   * @param {Subscriber} subscriber - The subscriber to the observable\n   * @param {Object} options - Additional options for the observable\n   * @param {boolean} options.last - Whether the subscriber is the last observer\n   * @example\n   * const observable = new ObservableState(10);\n   */\n  constructor(initialValue = null, subscriber = null, {last = false, name = null} = {}) {\n    super();\n    if (last) {\n      this._lastObserver = subscriber;\n    } else {\n      this._observers.push(subscriber);\n    }\n    this._value = produce(initialValue, draft => {});\n    this._pendingUpdates = [];\n    this._updateScheduled = false;\n    this._name = name;\n  }\n\n  /**\n   * @method\n   * @returns {any} The current value of the observable\n   * @example\n   * const value = observable.value;\n   */\n  get value() {\n    if (DependencyTracker.current != null) {\n      DependencyTracker.current.addDependency(this);\n    }\n    return this._value;\n  }\n\n  /**\n   * @method\n   * @param {any} newValue - The new value to set for the observable\n   * @description This method sets a new value for the observable by calling the update method with the new value.\n   * @example\n   * observable.value = 20;\n   */\n  set value(newValue) {\n    this.update(() => newValue);\n  }\n\n  /**\n   * @method\n   * @description Merges properties from the provided object into the observable's value\n   * @param {Object} obj - The object whose properties to merge\n   * @example\n   * observable.assign({ key: 'value' });\n   */\n  assign(obj) {\n    if (typeof this._value !== 'object' || this._value === null) {\n      throw new Error('[Cami.js] Observable value is not an object');\n    }\n    this.update(value => Object.assign(value, obj));\n  }\n\n  /**\n   * @method\n   * @description Sets a new value for a specific key in the observable's value. If the key is nested, it should be provided as a string with keys separated by dots.\n   * @param {string} key - The key to set the new value for\n   * @param {any} value - The new value to set\n   * @throws Will throw an error if the observable's value is not an object\n   * @example\n   * observable.set('key.subkey', 'new value');\n   */\n  set(key, value) {\n    if (typeof this._value !== 'object' || this._value === null) {\n      throw new Error('[Cami.js] Observable value is not an object');\n    }\n    this.update(state => {\n      const keys = key.split('.');\n      let current = state;\n      for (let i = 0; i < keys.length - 1; i++) {\n        current = current[keys[i]];\n      }\n      current[keys[keys.length - 1]] = value;\n    });\n  }\n\n  /**\n   * @method\n   * @description Deletes a specific key from the observable's value. If the key is nested, it should be provided as a string with keys separated by dots.\n   * @param {string} key - The key to delete\n   * @throws Will throw an error if the observable's value is not an object\n   * @example\n   * observable.delete('key.subkey');\n   */\n  delete(key) {\n    if (typeof this._value !== 'object' || this._value === null) {\n      throw new Error('[Cami.js] Observable value is not an object');\n    }\n    this.update(state => {\n      const keys = key.split('.');\n      let current = state;\n      for (let i = 0; i < keys.length - 1; i++) {\n        current = current[keys[i]];\n      }\n      delete current[keys[keys.length - 1]];\n    });\n  }\n\n  /**\n   * @method\n   * @description Removes all key/value pairs from the observable's value\n   * @example\n   * observable.clear();\n   */\n  clear() {\n    this.update(() => ({}));\n  }\n\n  /**\n   * @method\n   * @description Adds one or more elements to the end of the observable's value\n   * @param {...any} elements - The elements to add\n   * @example\n   * observable.push(1, 2, 3);\n   */\n  push(...elements) {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.push(...elements);\n    });\n  }\n\n  /**\n   * @method\n   * @description Removes the last element from the observable's value\n   * @example\n   * observable.pop();\n   */\n  pop() {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.pop();\n    });\n  }\n\n  /**\n   * @method\n   * @description Removes the first element from the observable's value\n   * @example\n   * observable.shift();\n   */\n  shift() {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.shift();\n    });\n  }\n\n  /**\n   * @method\n   * @description Changes the contents of the observable's value by removing, replacing, or adding elements\n   * @param {number} start - The index at which to start changing the array\n   * @param {number} deleteCount - The number of elements to remove\n   * @param {...any} items - The elements to add to the array\n   * @example\n   * observable.splice(0, 1, 'newElement');\n   */\n  splice(start, deleteCount, ...items) {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(arr => {\n      arr.splice(start, deleteCount, ...items);\n    });\n  }\n\n  /**\n   * @method\n   * @description Adds one or more elements to the beginning of the observable's value\n   * @param {...any} elements - The elements to add\n   * @example\n   * observable.unshift('newElement');\n   */\n  unshift(...elements) {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.unshift(...elements);\n    });\n  }\n\n  /**\n   * @method\n   * @description Reverses the order of the elements in the observable's value\n   * @example\n   * observable.reverse();\n   */\n  reverse() {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.reverse();\n    });\n  }\n\n  /**\n   * @method\n   * @description Sorts the elements in the observable's value\n   * @param {Function} [compareFunction] - The function used to determine the order of the elements\n   * @example\n   * observable.sort((a, b) => a - b);\n   */\n  sort(compareFunction) {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.sort(compareFunction);\n    });\n  }\n\n  /**\n   * @method\n   * @description Changes all elements in the observable's value to a static value\n   * @param {any} value - The value to fill the array with\n   * @param {number} [start=0] - The index to start filling at\n   * @param {number} [end=this._value.length] - The index to stop filling at\n   * @example\n   * observable.fill('newElement', 0, 2);\n   */\n  fill(value, start = 0, end = this._value.length) {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(arr => {\n      arr.fill(value, start, end);\n    });\n  }\n\n  /**\n   * @method\n   * @description Shallow copies part of the observable's value to another location in the same array\n   * @param {number} target - The index to copy the elements to\n   * @param {number} start - The start index to begin copying elements from\n   * @param {number} [end=this._value.length] - The end index to stop copying elements from\n   * @example\n   * observable.copyWithin(0, 1, 2);\n   */\n  copyWithin(target, start, end = this._value.length) {\n    if (!Array.isArray(this._value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(arr => {\n      arr.copyWithin(target, start, end);\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} updater - The function to update the value\n   * @description This method adds the updater function to the pending updates queue.\n   * It uses a synchronous approach to schedule the updates, ensuring the whole state is consistent at each tick.\n   * This is done to batch multiple updates together and avoid unnecessary re-renders.\n   * @example\n   * observable.update(value => value + 1);\n   */\n  update(updater) {\n    this._pendingUpdates.push(updater);\n    this._scheduleupdate();\n  }\n\n  _scheduleupdate() {\n    if (!this._updateScheduled) {\n      this._updateScheduled = true;\n      this._applyUpdates();\n    }\n  }\n\n  /**\n   * @private\n   * @method\n   * @description This method notifies all observers of the observable with the current value.\n   * It first creates a list of observers by combining the regular observers and the last observer.\n   * Then, it iterates over this list and calls each observer with the current value.\n   * If the observer is a function, it is called directly.\n   * If the observer is an object with a 'next' method, the 'next' method is called.\n   */\n  _notifyObservers() {\n    const observersWithLast = [...this._observers, this._lastObserver];\n    observersWithLast.forEach(observer => {\n      if (observer && typeof observer === 'function') {\n        observer(this._value);\n      } else if (observer && observer.next) {\n        observer.next(this._value);\n      }\n    });\n  }\n\n  /**\n   * @method\n   * @private\n   * @description This method applies all the pending updates to the value.\n   * It then notifies all the observers with the updated value.\n   */\n  _applyUpdates() {\n    let oldValue = this._value;\n    while (this._pendingUpdates.length > 0) {\n      const updater = this._pendingUpdates.shift();\n      if ((typeof this._value === 'object' && this._value !== null && this._value.constructor === Object) || Array.isArray(this._value)) {\n        this._value = produce(this._value, updater);\n      } else {\n        this._value = updater(this._value);\n      }\n    }\n    if (oldValue !== this._value) {\n      this._notifyObservers();\n\n      if (_config.events.isEnabled && typeof window !== 'undefined') {\n        const event = new CustomEvent('cami:state:change', {\n          detail: {\n            name: this._name,\n            oldValue: oldValue,\n            newValue: this._value\n          }\n        });\n        window.dispatchEvent(event);\n      }\n\n      _trace('cami:state:change', this._name, oldValue, this._value);\n    }\n    this._updateScheduled = false;\n  }\n\n  /**\n   * @method\n   * @description Converts the ObservableState to an ObservableStream.\n   * @returns {ObservableStream} The ObservableStream that emits the same values as the ObservableState.\n   * @example\n   * const stream = observable.toStream();\n   */\n  toStream() {\n    const stream = new ObservableStream();\n    this.subscribe({\n      next: value => stream.emit(value),\n      error: err => stream.error(err),\n      complete: () => stream.end(),\n    });\n    return stream;\n  }\n\n  /**\n   * @method\n   * @description Calls the complete method of all observers.\n   * @example\n   * observable.complete();\n   */\n  complete() {\n    this._observers.forEach(observer => {\n      if (observer && typeof observer.complete === 'function') {\n        observer.complete();\n      }\n    });\n  }\n}\n\n/**\n * @class\n * @extends ObservableState\n * @description ComputedState class that extends ObservableState and holds additional methods for computed observables\n */\nclass ComputedState extends ObservableState {\n  /**\n   * @constructor\n   * @param {Function} computeFn - The function to compute the value of the observable\n   * @example\n   * const computedState = new ComputedState(() => observable.value * 2);\n   */\n  constructor(computeFn) {\n    super(null);\n    this.computeFn = computeFn;\n    this.dependencies = new Set();\n    this.subscriptions = new Map();\n    this._compute();\n  }\n\n  /**\n   * @method\n   * @returns {any} The current value of the observable\n   * @example\n   * const value = computedState.value;\n   */\n  get value() {\n    if (DependencyTracker.current) {\n      DependencyTracker.current.addDependency(this);\n    }\n    return this._value;\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Computes the new value of the observable and notifies observers if it has changed\n   */\n  _compute() {\n    /**\n     * @description The tracker object is used to manage dependencies between observables.\n     * It has a method 'addDependency' which takes an observable as an argument.\n     * If the observable is not already in the dependencies set, it adds the observable to the set,\n     * and sets up a subscription to the observable.\n     * The subscription calls the 'compute' method of the ComputedState instance whenever the observable's value changes.\n     * This ensures that the ComputedState's value is always up-to-date with its dependencies.\n     */\n    const tracker = {\n      addDependency: (observable) => {\n        if (!this.dependencies.has(observable)) {\n          const subscription = observable.onValue(() => this._compute());\n          this.dependencies.add(observable);\n          this.subscriptions.set(observable, subscription);\n        }\n      }\n    };\n\n    /**\n     * @description The DependencyTracker is a global object that is used to track dependencies of computed observables.\n     * It is set to the current tracker object before the compute function is called.\n     * This allows the compute function to add dependencies to the tracker object as it executes.\n     * After the compute function has finished executing, the DependencyTracker is set back to null.\n     * This is done to prevent further dependencies from being added after the computation is complete.\n     * This ensures that the dependencies of the computed observable are accurately tracked and updated.\n     */\n    DependencyTracker.current = tracker;\n    const newValue = this.computeFn();\n    DependencyTracker.current = null;\n\n    if (newValue !== this._value) {\n      this._value = newValue;\n      this._notifyObservers();\n    }\n  }\n\n  /**\n   * @method\n   * @description Unsubscribes from all dependencies\n   * @example\n   * // Assuming `obs` is an instance of ObservableState\n   * obs.dispose(); // This will unsubscribe obs from all its dependencies\n   */\n  dispose() {\n    this.subscriptions.forEach((subscription) => {\n      subscription.unsubscribe();\n    });\n  }\n}\n\n/**\n * @function\n * @param {Function} computeFn - The function to compute the value of the observable\n * @returns {ComputedState} A new instance of ComputedState\n * @example\n * // Assuming `computeFn` is a function that computes the value of the observable\n * const computedValue = computed(computeFn);\n */\nconst computed = function(computeFn) {\n  return new ComputedState(computeFn);\n};\n\n/**\n * @function\n * @param {Function} effectFn - The function to call for the effect\n * @returns {Function} A function that when called, unsubscribes from all dependencies and runs cleanup function\n * @description This function sets up an effect that is run when the observable changes\n * @example\n * // Assuming `effectFn` is a function that is called when the observable changes\n * const effectFunction = effect(effectFn);\n */\nconst effect = function(effectFn) {\n  let cleanup = () => {};\n  let dependencies = new Set();\n  let subscriptions = new Map();\n\n  /**\n   * The tracker object is used to keep track of dependencies for the effect function.\n   * It provides a method to add a dependency (an observable) to the dependencies set.\n   * If the observable is not already a dependency, it is added to the set and a subscription is created\n   * to run the effect function whenever the observable's value changes.\n   * This mechanism allows the effect function to respond to state changes in its dependencies.\n   */\n  const tracker = {\n    addDependency: (observable) => {\n      if (!dependencies.has(observable)) {\n        const subscription = observable.onValue(_runEffect);\n        dependencies.add(observable);\n        subscriptions.set(observable, subscription);\n      }\n    }\n  };\n\n  /**\n   * The _runEffect function is responsible for running the effect function and managing its dependencies.\n   * Before the effect function is run, any cleanup from the previous run is performed and the current tracker\n   * is set to this tracker. This allows the effect function to add dependencies via the tracker while it is running.\n   * After the effect function has run, the current tracker is set back to null to prevent further dependencies\n   * from being added outside of the effect function.\n   * The effect function is expected to return a cleanup function, which is saved for the next run.\n   * The cleanup function, initially empty, is replaced by the one returned from effectFn (run by the observable) before each new run and on effect disposal.\n   */\n  const _runEffect = () => {\n    cleanup();\n    DependencyTracker.current = tracker;\n    cleanup = effectFn() || (() => {});\n    DependencyTracker.current = null;\n  };\n\n  if (typeof window !== 'undefined') {\n    requestAnimationFrame(_runEffect);\n  } else {\n    setTimeout(_runEffect, 0);\n  }\n\n  /**\n   * @method\n   * @description Unsubscribes from all dependencies and runs cleanup function\n   * @returns {void}\n   * @example\n   * // Assuming `dispose` is the function returned by `effect`\n   * dispose(); // This will unsubscribe from all dependencies and run cleanup function\n   */\n  const dispose = () => {\n    subscriptions.forEach((subscription) => {\n      subscription.unsubscribe();\n    });\n    cleanup();\n  };\n\n  return dispose;\n};\n\nexport { ObservableState, computed, effect };\n", "import { html, render } from 'lit-html';\nimport { produce } from \"immer\"\nimport { Observable } from './observables/observable.js';\nimport { ObservableStore } from './observables/observable-store.js';\nimport { ObservableState, computed, effect } from './observables/observable-state.js';\nimport { ObservableStream } from './observables/observable-stream.js';\nimport { _trace } from './trace.js';\n\n/**\n * @typedef ObservableProperty\n * @property {function(): any} get - A getter function that returns the current value of the property. If the property is a primitive value, this will return the value directly from the ObservableState instance. If the property is a non-primitive value, this will return an ObservableProxy that wraps the ObservableState instance. This getter is used when accessing the property on a ReactiveElement instance. This polymorphic behavior allows the ObservableProperty to handle both primitive and non-primitive values, and handle nested properties (only proxies can handle nested properties, whereas getters/setter traps cannot)\n * @property {function(any): void} set - A setter function that updates the value of the property. It updates the ObservableState instance with the new value. This setter is used when assigning a new value to the property on a ReactiveElement instance.\n * @example\n * // Primitive value example from _001_counter.html\n * // this.count is an ObservableProperty, where if you get the value, it returns the current value of the property, and if you set the value, it updates the property with the new value\n * // ObservableProperty is just Object.defineProperty with a getter and setter, where the Object is the ReactiveElement instance\n * class CounterElement extends ReactiveElement {\n *   count = 0\n *\n *   template() {\n *     return html`\n *       <button @click=${() => this.count--}>-</button>\n *       <button @click=${() => this.count++}>+</button>\n *       <div>Count: ${this.count}</div>\n *     `;\n *   }\n * }\n *\n * // Non-primitive value example from _003_todo.html\n * // this.query returns an ObservableProperty / ObservableProxy\n * // this.todos is an ObservableProxy, where if you get the value, it returns the current value of the property, and if you set the value, it updates the property with the new value\n * // We use Proxy instead of Object.defineProperty because it allows us to handle nested properties\n * class TodoListElement extends ReactiveElement {\n *   todos = this.query({\n *     queryKey: ['todos'],\n *     queryFn: () => {\n *       return fetch(\"https://api.camijs.com/todos?_limit=5\").then(res => res.json())\n *     },\n *     staleTime: 1000 * 60 * 5 // 5 minutes\n *   })\n *\n *   template() {\n *     // ...template code...\n *   }\n * }\n *\n * // Array value example from _010_taskmgmt.html\n * // this.tasks is an ObservableProxy, where if you get the value, it returns the current value of the property, and if you set the value, it updates the property with the new value\n * // We use Proxy instead of Object.defineProperty because it allows us to handle nested properties\n * class TaskManagerElement extends ReactiveElement {\n *   tasks = [];\n *   filter = 'all';\n *\n *   // ...other methods...\n *\n *   template() {\n *     // ...template code...\n *   }\n * }\n */\n\n/**\n * @typedef ObservableState\n * @property {any} value - The current value of the observable state. This is the value that is returned when accessing a primitive property on a ReactiveElement instance. It can also be used to set a new value for the observable state.\n * @property {function(function(any): any): void} update - A function that updates the value of the observable state. It takes an updater function that receives the current value and returns the new value. This is used when assigning a new value to a primitive property on a ReactiveElement instance. It allows deeply nested updates.\n * @property {function(): void} [dispose] - An optional function that cleans up the observable state when it is no longer needed. This is used internally by ReactiveElement to manage memory.\n */\n\n/**\n * @typedef ObservableProxy\n * @property {function(): any} get - A getter function that returns the current value of the property. If the property is a primitive value, this will return the value directly from the ObservableState instance. If the property is a non-primitive value, this will return an ObservableProxy that wraps the ObservableState instance. This getter is used when accessing a non-primitive property on a ReactiveElement instance. We use Proxy instead of Object.defineProperty because it allows us to handle nested properties.\n * @property {function(any): void} set - A setter function that updates the value of the property. It updates the ObservableState instance with the new value. This setter is used when assigning a new value to a non-primitive property on a ReactiveElement instance.\n */\n\n/**\n * @private\n * @description A cache for storing the results of queries.\n * @type {Map<string, any>}\n */\nconst QueryCache = new Map();\n\n/**\n * @class\n * @description This class is needed to create reactive web components that can automatically update their view when their state changes. All properties are automatically converted to observables. This is achieved by using creating an ObservableProperty, which provides a getter and setter for the property. The getter returns the current value of the property, and the setter updates the value of the property and triggers a re-render of the component.\n * @example\n * ```javascript\n * const { html, ReactiveElement } = cami;\n *\n * class CounterElement extends ReactiveElement {\n *   // Here, 'count' is automatically initialized as an ObservableProperty.\n *   // This means that any changes to 'count' will automatically trigger a re-render of the component.\n *   count = 0\n *\n *   template() {\n *     return html`\n *       <button @click=${() => this.count--}>-</button>\n *       <button @click=${() => this.count++}>+</button>\n *       <div>Count: ${this.count}</div>\n *     `;\n *   }\n * }\n *\n * customElements.define('counter-component', CounterElement);\n * ```\n */\nclass ReactiveElement extends HTMLElement {\n  /**\n   * @constructor\n   * @description Constructs a new instance of ReactiveElement.\n   */\n  constructor() {\n    super();\n    this.onCreate();\n    this._unsubscribers = new Map();\n    this._computed = computed.bind(this);\n    this.effect = effect.bind(this);\n    this._queryFunctions = new Map();\n  }\n\n  /**\n   * @method\n   * @description Creates ObservableProperty or ObservableProxy instances for all properties in the provided object.\n   * @param {Object} attributes - An object with attribute names as keys and optional parsing functions as values.\n   * @example\n   * // In _009_dataFromProps.html, the todos attribute is parsed as JSON and the data property is extracted:\n   * this.observableAttributes({\n   *   todos: (v) => JSON.parse(v).data\n   * });\n   * @returns {void}\n   */\n  observableAttributes(attributes) {\n    Object.entries(attributes).forEach(([attrName, parseFn]) => {\n      // Retrieve the attribute value and apply the transformation function if provided\n      let attrValue = this.getAttribute(attrName);\n      const transformFn = typeof parseFn === 'function' ? parseFn : (v) => v;\n      attrValue = produce(attrValue, transformFn);\n\n      // Create an ObservableProperty or ObservableProxy for the attribute\n      const observable = this._observable(attrValue, attrName);\n      if (this._isObjectOrArray(observable.value)) {\n        this._createObservablePropertyForObjOrArr(this, attrName, observable, true);\n      } else {\n        this._createObservablePropertyForPrimitive(this, attrName, observable, true);\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Creates a computed observable state and registers it. The computed state is recalculated whenever\n   * one of its dependencies changes. This is useful for creating derived state that automatically updates.\n   *\n   * @example\n   * // Assuming `this.count` is an observable\n   * const countSquared = this._computed(() => this.count * this.count);\n   * // `countSquared` will automatically update when `this.count` changes\n   *\n   * @param {Function} computeFn - The function to compute the state\n   * @returns {ObservableState} The computed observable state\n   */\n  _computed(computeFn) {\n    const observableState = super._computed(computeFn);\n    console.log(observableState);\n    this._registerObservables(observableState);\n    return observableState;\n  }\n\n  /**\n   * @method\n   * @description Creates an effect and registers its dispose function. The effect is used to perform side effects in response to state changes.\n   * This method is useful when working with ObservableProperties or ObservableProxies because it triggers the effect whenever the value of the underlying ObservableState changes.\n   * @example\n   * // Assuming `this.count` is an ObservableProperty\n   * this.effect(() => {\n   *   console.log(`The count is now: ${this.count}`);\n   * });\n   * // The console will log the current count whenever `this.count` changes\n   *\n   * @param {Function} effectFn - The function to create the effect\n   * @returns {void}\n   */\n  effect(effectFn) {\n    const dispose = super.effect(effectFn);\n    this._unsubscribers.set(effectFn, dispose);\n  }\n\n  /**\n   * @method\n   * @description Subscribes to a store and creates an observable for a specific key in the store. This is useful for\n   * synchronizing the component's state with a global store.\n   *\n   * @example\n   * // Assuming there is a store for cart items\n   * // `cartItems` will be an observable reflecting the current state of cart items in the store\n   * this.cartItems = this.connect(CartStore, 'cartItems');\n   *\n   * @param {ObservableStore} store - The store to subscribe to\n   * @param {string} key - The key in the store to create an observable for\n   * @returns {ObservableProxy} An observable property or proxy for the store key\n   */\n  connect(store, key) {\n    if (!(store instanceof ObservableStore)) {\n      throw new TypeError('Expected store to be an instance of ObservableStore');\n    }\n\n    const observable = this._observable(store.state[key], key);\n    const unsubscribe = store.subscribe(newState => {\n      observable.update(() => newState[key]);\n    });\n    this._unsubscribers.set(key, unsubscribe);\n\n    if (this._isObjectOrArray(observable.value)) {\n      return this._observableProxy(observable);\n    } else {\n      return new Proxy(observable, {\n        get: () => observable.value,\n        set: (target, property, value) => {\n          if (property === 'value') {\n            observable.update(() => value);\n          } else {\n            target[property] = value;\n          }\n          return true;\n        }\n      });\n    }\n  }\n\n  /**\n   * @method\n   * @description Creates an ObservableStream from a subscription function.\n   * @param {Function} subscribeFn - The subscription function.\n   * @returns {ObservableStream} An ObservableStream that emits values produced by the subscription function.\n   * @example\n   * // In a FormElement component\n   * const inputValidation$ = this.stream();\n   * inputValidation$\n   *   .map(e => this.validateEmail(e.target.value))\n   *   .debounce(300)\n   *   .subscribe(({ isEmailValid, emailError, email }) => {\n   *     this.emailError = emailError;\n   *     this.isEmailValid = isEmailValid;\n   *     this.email = email;\n   *     this.isEmailAvailable = this.queryEmail(this.email);\n   *   });\n   */\n  stream(subscribeFn) {\n    return new ObservableStream(subscribeFn);\n  }\n\n  /**\n   * @method\n   * @throws {Error} If the method template() is not implemented\n   * @returns {void}\n   * @example\n   * // Here's a simple example of a template method implementation\n   * template() {\n   *   return html`<div>Hello World</div>`;\n   * }\n   */\n  template() {\n    throw new Error('[Cami.js] You have to implement the method template()!');\n  }\n\n  /**\n   * @method\n   * @description Fetches data from an API and caches it. This method is based on the TanStack Query defaults: https://tanstack.com/query/latest/docs/react/guides/important-defaults.\n   * @param {Object} options - The options for the query.\n   * @param {Array|string} options.queryKey - The key for the query.\n   * @param {Function} options.queryFn - The function to fetch data.\n   * @param {number} [options.staleTime=0] - The stale time for the query.\n   * @param {boolean} [options.refetchOnWindowFocus=true] - Whether to refetch on window focus.\n   * @param {boolean} [options.refetchOnMount=true] - Whether to refetch on mount.\n   * @param {boolean} [options.refetchOnReconnect=true] - Whether to refetch on network reconnect.\n   * @param {number} [options.refetchInterval=null] - The interval to refetch data.\n   * @param {number} [options.gcTime=1000 * 60 * 5] - The garbage collection time for the query.\n   * @param {number} [options.retry=3] - The number of retry attempts.\n   * @param {Function} [options.retryDelay=(attempt) => Math.pow(2, attempt) * 1000] - The delay before retrying a failed query.\n   * @example\n   * // In _012_blog.html, a query is set up to fetch posts with a stale time of 5 minutes:\n   * const posts = this.query({\n   *   queryKey: [\"posts\"],\n   *   queryFn: () => fetch(\"https://jsonplaceholder.typicode.com/posts?_limit=5\").then(res => res.json()),\n   *   staleTime: 1000 * 60 * 5\n   * });\n   * @returns {ObservableProxy} A proxy that contains the state of the query.\n   */\n  query({ queryKey, queryFn, staleTime = 0, refetchOnWindowFocus = true, refetchOnMount = true, refetchOnReconnect = true, refetchInterval = null, gcTime = 1000 * 60 * 5, retry = 3, retryDelay = (attempt) => Math.pow(2, attempt) * 1000 }) {\n    const key = Array.isArray(queryKey)\n    ? queryKey.map(k => typeof k === 'object' ? JSON.stringify(k) : k).join(':')\n    : queryKey;\n    this._queryFunctions.set(key, queryFn);\n\n    _trace('query', 'Starting query with key:', key);\n\n    const queryState = this._observable({\n      data: null,\n      status: 'pending',\n      fetchStatus: 'idle',\n      error: null,\n      lastUpdated: QueryCache.has(key) ? QueryCache.get(key).lastUpdated : null\n    }, key);\n\n    const queryProxy = this._observableProxy(queryState);\n\n    const fetchData = async (attempt = 0) => {\n      const now = Date.now();\n      const cacheEntry = QueryCache.get(key);\n\n      if (cacheEntry && (now - cacheEntry.lastUpdated) < staleTime) {\n        _trace('fetchData (if)', 'Using cached data for key:', key);\n        queryState.update(state => {\n          state.data = cacheEntry.data;\n          state.status = 'success';\n          state.fetchStatus = 'idle';\n        });\n      } else {\n        _trace('fetchData (else)', 'Fetching data for key:', key);\n        try {\n          queryState.update(state => {\n            state.status = 'pending';\n            state.fetchStatus = 'fetching';\n          });\n          const data = await queryFn();\n          QueryCache.set(key, { data, lastUpdated: now });\n          queryState.update(state => {\n            state.data = data;\n            state.status = 'success';\n            state.fetchStatus = 'idle';\n          });\n        } catch (error) {\n          _trace('fetchData (catch)', 'Fetch error for key:', key, error);\n          if (attempt < retry) {\n            setTimeout(() => fetchData(attempt + 1), retryDelay(attempt));\n          } else {\n            queryState.update(state => {\n              state.error = { message: error.message };\n              state.status = 'error';\n              state.fetchStatus = 'idle';\n            });\n          }\n        }\n      }\n    }\n\n    // Refetch data when new instances of the query mount\n    if (refetchOnMount) {\n      _trace('query', 'Setting up refetch on mount for key:', key);\n      fetchData();\n    }\n\n    // Refetch data when window is refocused\n    if (refetchOnWindowFocus) {\n      _trace('query', 'Setting up refetch on window focus for key:', key);\n      const refetchOnFocus = () => fetchData();\n      window.addEventListener('focus', refetchOnFocus);\n      this._unsubscribers.set(`focus:${key}`, () => window.removeEventListener('focus', refetchOnFocus));\n    }\n\n    // Refetch data when network is reconnected\n    if (refetchOnReconnect) {\n      _trace('query', 'Setting up refetch on reconnect for key:', key);\n      window.addEventListener('online', fetchData);\n      this._unsubscribers.set(`online:${key}`, () => window.removeEventListener('online', fetchData));\n    }\n\n    // Refetch data at a specific interval\n    if (refetchInterval) {\n      _trace('query', 'Setting up refetch interval for key:', key);\n      const intervalId = setInterval(fetchData, refetchInterval);\n      this._unsubscribers.set(`interval:${key}`, () => clearInterval(intervalId));\n    }\n\n    // Garbage collect data after gcTime\n    const gcTimeout = setTimeout(() => {\n      QueryCache.delete(key);\n    }, gcTime);\n    this._unsubscribers.set(`gc:${key}`, () => clearTimeout(gcTimeout));\n\n    return queryProxy;\n  }\n\n  /**\n   * @method\n   * @description Performs a mutation and returns an observable proxy. This method is inspired by the TanStack Query mutate method: https://tanstack.com/query/latest/docs/react/guides/mutations.\n   * @param {Object} options - The options for the mutation.\n   * @param {Function} options.mutationFn - The function to perform the mutation.\n   * @param {Function} [options.onMutate] - The function to be called before the mutation is performed.\n   * @param {Function} [options.onError] - The function to be called if the mutation encounters an error.\n   * @param {Function} [options.onSuccess] - The function to be called if the mutation is successful.\n   * @param {Function} [options.onSettled] - The function to be called after the mutation has either succeeded or failed.\n   * @example\n   * // In _012_blog.html, a mutation is set up to add a new post with optimistic UI updates:\n   * const addPost = this.mutation({\n   *   mutationFn: (newPost) => fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n   *     method: \"POST\",\n   *     body: JSON.stringify(newPost),\n   *     headers: {\n   *       \"Content-type\": \"application/json; charset=UTF-8\"\n   *     }\n   *   }).then(res => res.json()),\n   *   onMutate: (newPost) => {\n   *     // Snapshot the previous state\n   *     const previousPosts = this.posts.data;\n   *     // Optimistically update to the new value\n   *     this.posts.update(state => {\n   *       state.data.push({ ...newPost, id: Date.now() });\n   *     });\n   *     // Return the rollback function and the new post\n   *     return {\n   *       rollback: () => {\n   *         this.posts.update(state => {\n   *           state.data = previousPosts;\n   *         });\n   *       },\n   *       optimisticPost: newPost\n   *     };\n   *   }\n   * });\n   * @returns {ObservableProxy} A proxy that contains the state of the mutation.\n   */\n  mutation({ mutationFn, onMutate, onError, onSuccess, onSettled }) {\n    const mutationState = this._observable({\n      data: null,\n      status: 'idle',\n      error: null,\n      isSettled: false\n    }, 'mutation');\n\n    const mutationProxy = this._observableProxy(mutationState);\n\n    const performMutation = async (variables) => {\n      _trace('mutation', 'Starting mutation for variables:', variables);\n      let context;\n      const previousState = mutationState.value;\n\n      if (onMutate) {\n        _trace('mutation', 'Performing optimistic update for variables:', variables);\n        context = onMutate(variables, previousState);\n        mutationState.update(state => {\n          state.data = context.optimisticData;\n          state.status = 'pending';\n          state.error = null;\n        });\n      } else {\n        _trace('mutation', 'Performing mutation without optimistic update for variables:', variables);\n        mutationState.update(state => {\n          state.status = 'pending';\n          state.error = null;\n        });\n      }\n\n      try {\n        const data = await mutationFn(variables);\n        mutationState.update(state => {\n          state.data = data;\n          state.status = 'success';\n        });\n        if (onSuccess) {\n          onSuccess(data, variables, context);\n        }\n        _trace('mutation', 'Mutation successful for variables:', variables, data);\n      } catch (error) {\n        _trace('mutation', 'Mutation error for variables:', variables, error);\n        mutationState.update(state => {\n          state.error = { message: error.message };\n          state.status = 'error';\n          if (!onError && context && context.rollback) {\n            _trace('mutation', 'Rolling back mutation for variables:', variables);\n            context.rollback();\n          }\n        });\n        if (onError) {\n          onError(error, variables, context);\n        }\n      } finally {\n        if (!mutationState.value.isSettled) {\n          mutationState.update(state => {\n            state.isSettled = true\n          });\n          if (onSettled) {\n            _trace('mutation', 'Calling onSettled for variables:', variables);\n            onSettled(mutationState.value.data, mutationState.value.error, variables, context);\n          }\n        }\n      }\n    };\n\n    mutationProxy.mutate = performMutation;\n\n    mutationProxy.reset = () => {\n      mutationState.update(state => {\n        state.data = null;\n        state.status = 'idle';\n        state.error = null;\n        state.isSettled = false;\n      });\n    };\n\n    return mutationProxy;\n  }\n\n  /**\n   * @method\n   * @description Invalidates the queries with the given key, causing them to refetch if needed. This method is particularly useful when used in conjunction with mutations, such as in the `onSettled` callback, to ensure that the UI reflects the latest state.\n   *\n   * @example\n   * // In a mutation's `onSettled` callback within a `BlogComponent`:\n   * this.addPost = this.mutation({\n   *   // ...mutation config...\n   *   onSettled: () => {\n   *     // Invalidate the posts query to refetch the true state\n   *     this.invalidateQueries(['posts']);\n   *   }\n   * });\n   *\n   * @param {Array|string} queryKey - The key for the query to invalidate.\n   * @returns {void}\n   */\n  invalidateQueries(queryKey) {\n    // Convert the queryKey to a string if it's an array for consistency with the cache keys\n    const key = Array.isArray(queryKey) ? queryKey.join(':') : queryKey;\n    _trace('invalidateQueries', 'Invalidating query with key:', key);\n\n    QueryCache.delete(key);\n\n    this._refetchQuery(key);\n  }\n\n  /**\n   * @method\n   * @description Called when the component is created. Can be overridden by subclasses to add initialization logic.\n   * This method is a hook for the connectedCallback, which is invoked each time the custom element is appended into a document-connected element.\n   * @returns {void}\n   * @example\n   * onCreate() {\n   *   // Example initialization logic here\n   *   this.posts = this.query({\n   *     queryKey: [\"posts\"],\n   *     queryFn: () => {\n   *       return fetch(\"https://jsonplaceholder.typicode.com/posts?_limit=5\")\n   *         .then(res => res.json())\n   *     },\n   *     staleTime: 1000 * 60 * 5 // 5 minutes\n   *   });\n   * }\n   */\n  onCreate() {\n    // Default implementation does nothing.\n    // Subclasses can override this to add initialization logic.\n  }\n\n\n  /**\n   * @method\n   * @description Invoked when the custom element is appended into a document-connected element. Sets up initial state and triggers initial rendering.\n   * This is typically used to initialize component state, fetch data, and set up event listeners.\n   *\n   * @example\n   * // In a TodoList component\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   this.fetchTodos(); // Fetch todos when the component is added to the DOM\n   * }\n   * @returns {void}\n   */\n  connectedCallback() {\n    this._setup({ infer: true });\n    this.effect(() => this._react());\n    this.onConnect();\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is connected to the document's DOM.\n   * @returns {void}\n   * Subclasses can override this to add initialization logic when the component is added to the DOM.\n   *\n   * @example\n   * // In a UserCard component\n   * onConnect() {\n   *   this.showUserDetails(); // Display user details when the component is connected\n   * }\n   */\n  onConnect() {\n    // Default implementation does nothing.\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is disconnected from the document's DOM.\n   * This is a good place to remove event listeners, cancel any ongoing network requests, or clean up any resources.\n   * @returns {void}\n   * @example\n   * // In a Modal component\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   this.close(); // Close the modal when it's disconnected from the DOM\n   * }\n   * @returns {void}\n   */\n  disconnectedCallback() {\n    this.onDisconnect();\n    this._unsubscribers.forEach(unsubscribe => unsubscribe());\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is disconnected from the document's DOM.\n   * Subclasses can override this to add cleanup logic when the component is removed from the DOM.\n   * @returns {void}\n   *\n   * @example\n   * // In a VideoPlayer component\n   * onDisconnect() {\n   *   this.stopPlayback(); // Stop video playback when the component is removed\n   * }\n   **/\n  onDisconnect() {\n    // Default implementation does nothing.\n  }\n\n  /**\n   * @method\n   * @description Invoked when an attribute of the custom element is added, removed, updated, or replaced.\n   * This can be used to react to attribute changes, such as updating the component state or modifying its appearance.\n   *\n   * @example\n   * // In a ThemeSwitcher component\n   * attributeChangedCallback(name, oldValue, newValue) {\n   *   super.attributeChangedCallback(name, oldValue, newValue);\n   *   if (name === 'theme') {\n   *     this.updateTheme(newValue); // Update the theme when the `theme` attribute changes\n   *   }\n   * }\n   * @param {string} name - The name of the attribute that changed\n   * @param {string} oldValue - The old value of the attribute\n   * @param {string} newValue - The new value of the attribute\n   * @returns {void}\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    this.onAttributeChange(name, oldValue, newValue);\n  }\n\n  /**\n   * @method\n   * @description Invoked when an attribute of the custom element is added, removed, updated, or replaced.\n   * @returns {void}\n   * Subclasses can override this to add logic that should run when an attribute changes.\n   *\n   * @example\n   * // In a CollapsiblePanel component\n   * onAttributeChange(name, oldValue, newValue) {\n   *   if (name === 'collapsed') {\n   *     this.toggleCollapse(newValue === 'true'); // Toggle collapse when the `collapsed` attribute changes\n   *   }\n   * }\n   **/\n  onAttributeChange(name, oldValue, newValue) {\n    // Default implementation does nothing.\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is moved to a new document.\n   * This can be used to update bindings or perform re-initialization as needed when the component is adopted into a new DOM context.\n   * @returns {void}\n   * @example\n   * // In a DragDropContainer component\n   * adoptedCallback() {\n   *   super.adoptedCallback();\n   *   this.updateDragDropContext(); // Update context when the component is moved to a new document\n   * }\n   * @returns {void}\n   */\n  adoptedCallback() {\n    this.onAdopt();\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is moved to a new document.\n   * Subclasses can override this to add logic that should run when the component is moved to a new document.\n   * @returns {void}\n   * @example\n   * // In a DataGrid component\n   * onAdopt() {\n   *   this.refreshData(); // Refresh data when the component is adopted into a new document\n   * }\n   **/\n  onAdopt() {\n    // Default implementation does nothing.\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Checks if the provided value is an object or an array.\n   * @param {any} value - The value to check.\n   * @returns {boolean} True if the value is an object or an array, false otherwise.\n   */\n  _isObjectOrArray(value) {\n    return value !== null && (typeof value === 'object' || Array.isArray(value));\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Private method. Creates an ObservableProperty for the provided key in the given context when the provided value is an object or an array.\n   * @param {Object} context - The context in which the property is defined.\n   * @param {string} key - The property key.\n   * @param {ObservableState} observable - The observable to bind to the property.\n   * @param {boolean} [isAttribute=false] - Whether the property is an attribute.\n   * @throws {TypeError} If observable is not an instance of ObservableState.\n   * @returns {void}\n   */\n  _createObservablePropertyForObjOrArr(context, key, observable, isAttribute = false) {\n    if (!(observable instanceof ObservableState)) {\n      throw new TypeError('Expected observable to be an instance of ObservableState');\n    }\n\n    const proxy = this._observableProxy(observable);\n    Object.defineProperty(context, key, {\n      get: () => proxy,\n      set: newValue => {\n        observable.update(() => newValue);\n        if (isAttribute) {\n          this.setAttribute(key, newValue);\n        }\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Private method. Handles the case when the provided value is not an object or an array.\n   * This method creates an ObservableProperty for the provided key in the given context.\n   * An ObservableProperty is a special type of property that can notify about changes in its state.\n   * This is achieved by defining a getter and a setter for the property using Object.defineProperty.\n   * The getter simply returns the current value of the observable.\n   * The setter updates the observable with the new value and, if the property is an attribute, also updates the attribute.\n   * @param {Object} context - The context in which the property is defined.\n   * @param {string} key - The property key.\n   * @param {ObservableState} observable - The observable to bind to the property.\n   * @param {boolean} [isAttribute=false] - Whether the property is an attribute.\n   * @throws {TypeError} If observable is not an instance of ObservableState.\n   * @returns {void}\n   */\n  _createObservablePropertyForPrimitive(context, key, observable, isAttribute = false) {\n    if (!(observable instanceof ObservableState)) {\n      throw new TypeError('Expected observable to be an instance of ObservableState');\n    }\n\n    Object.defineProperty(context, key, {\n      get: () => observable.value,\n      set: newValue => {\n        observable.update(() => newValue);\n        if (isAttribute) {\n          this.setAttribute(key, newValue);\n        }\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Creates a proxy for the observable.\n   * @param {ObservableState} observable - The observable for which a proxy is to be created.\n   * @throws {TypeError} If observable is not an instance of ObservableState.\n   * @returns {ObservableProxy} The created proxy.\n   */\n  _observableProxy(observable) {\n    if (!(observable instanceof ObservableState)) {\n      throw new TypeError('Expected observable to be an instance of ObservableState');\n    }\n\n    return new Proxy(observable, {\n      get: (target, property) => {\n        // If the property is a function, bind it to the target\n        // Example: this.playlist.push(song) in _012_playlist.html\n        if (typeof target[property] === 'function') {\n          return target[property].bind(target);\n        }\n        // If the property exists in the target, return it\n        // Example: this.user.name in _005_nested1.html\n        else if (property in target) {\n          return target[property];\n        }\n        // If the property is a function of the target's value, return it\n        // Example: this.playlist.sort() in _012_playlist.html\n        else if (typeof target.value[property] === 'function') {\n          return (...args) => target.value[property](...args);\n        }\n        // Otherwise, return the property of the target's value\n        // Example: this.user.age in _005_nested1.html\n        else {\n          return target.value[property];\n        }\n      },\n      set: (target, property, value) => {\n        // Set the property value and update the target\n        // Example: this.user.assign({ [key]: event.target.value }) in _005_nested1.html\n        target[property] = value;\n        target.update(() => target.value);\n        return true;\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Defines the observables, computed properties, effects, and attributes for the element.\n   * @param {Object} config - The configuration object.\n   * @returns {void}\n   */\n  _setup(config) {\n    if (config.infer === true) {\n      Object.keys(this).forEach(key => {\n        if (typeof this[key] !== 'function' && !key.startsWith('_')) {\n          if (this[key] instanceof Observable) {\n            return;\n          } else {\n            const observable = this._observable(this[key], key);\n            if (this._isObjectOrArray(observable.value)) {\n              this._createObservablePropertyForObjOrArr(this, key, observable);\n            } else {\n              this._createObservablePropertyForPrimitive(this, key, observable);\n            }\n          }\n        }\n      })\n    }\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Creates an observable with an initial value.\n   * @param {any} initialValue - The initial value for the observable.\n   * @param {string} [name] - The name of the observable.\n   * @throws {Error} If the type of initialValue is not allowed in observables.\n   * @returns {ObservableState} The created observable state.\n   */\n  _observable(initialValue, name = null) {\n    if (!this._isAllowedType(initialValue)) {\n      const type = Object.prototype.toString.call(initialValue);\n      throw new Error(`[Cami.js] The type ${type} of initialValue is not allowed in observables.`);\n    }\n\n    const observable = new ObservableState(initialValue);\n\n    this._registerObservables(observable);\n    return observable;\n  }\n\n  /**\n   * @private\n   * @method\n   * Refetches the data for the given query key.\n   * @param {string} key - The key for the query to refetch.\n   * @returns {void}\n   */\n  _refetchQuery(key) {\n    _trace('_refetchQuery', 'Refetching query with key:', key);\n    const queryFn = this._queryFunctions.get(key);\n\n    if (queryFn) {\n      _trace('_refetchQuery', 'Found query function for key:', key);\n      // Snapshot the previous state before the optimistic update\n      const previousState = QueryCache.get(key) || { data: undefined, status: 'idle', error: null };\n\n      // Optimistically update the UI assuming the fetch will succeed\n      QueryCache.set(key, {\n        ...previousState,\n        status: 'pending',\n        error: null,\n      });\n\n      // Trigger the refetch\n      queryFn().then(data => {\n        QueryCache.set(key, {\n          data: data,\n          status: 'success',\n          error: null,\n          lastUpdated: Date.now(),\n        });\n        _trace('_refetchQuery', 'Refetch successful for key:', key, data);\n      }).catch(error => {\n        if (previousState.data !== undefined) {\n          _trace('_refetchQuery', 'Rolling back refetch for key:', key);\n          QueryCache.set(key, previousState);\n        }\n\n        QueryCache.set(key, {\n          ...previousState,\n          status: 'error',\n          error: error,\n        });\n      }).finally(() => {\n        this.query({ queryKey: key, queryFn: queryFn });\n        _trace('_refetchQuery', 'Refetch complete for key:', key);\n      });\n    }\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Checks if the provided value is of an allowed type\n   * @param {any} value - The value to check\n   * @returns {boolean} True if the value is of an allowed type, false otherwise\n   */\n  _isAllowedType(value) {\n    const allowedTypes = ['number', 'string', 'boolean', 'object', 'undefined'];\n    const valueType = typeof value;\n\n    if (valueType === 'object') {\n      return value === null || Array.isArray(value) || this._isPlainObject(value);\n    }\n\n    return allowedTypes.includes(valueType);\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Checks if the provided value is a plain object\n   * @param {any} value - The value to check\n   * @returns {boolean} True if the value is a plain object, false otherwise\n   */\n  _isPlainObject(value) {\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\n      return false;\n    }\n\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.prototype;\n  }\n\n\n  /**\n   * @private\n   * @method\n   * @description Registers an observable state to the list of unsubscribers\n   * @param {ObservableState} observableState - The observable state to register\n   * @returns {void}\n   */\n  _registerObservables(observableState) {\n    if (!(observableState instanceof ObservableState)) {\n      throw new TypeError('Expected observableState to be an instance of ObservableState');\n    }\n\n    // Only computeds and effects have a dispose method\n    this._unsubscribers.set(observableState, () => {\n     if (typeof observableState.dispose === 'function') {\n       observableState.dispose();\n     }\n   });\n  }\n\n  /**\n   * @private\n   * @method\n   * This method is responsible for updating the view whenever the state changes. It does this by rendering the template with the current state.\n   * @returns {void}\n   */\n  _react() {\n    const template = this.template();\n    render(template, this);\n  }\n}\n\nexport { ReactiveElement };\n\n", "import { ObservableStream } from './observable-stream.js';\n\n/**\n * @class\n * @description Observable class that wraps a DOM element and allows observing its events.\n * @example\n * ```javascript\n * const { ObservableElement } = cami;\n * const draggableElement = new ObservableElement(\".draggable\");\n * draggableElement.on('mousedown').subscribe({\n *   next: event => console.log('drag event', event),\n *   error: err => console.error(err),\n * });\n * ```\n */\nclass ObservableElement extends ObservableStream {\n  /**\n   * @constructor\n   * @param {string|Element} selectorOrElement - The CSS selector of the element to observe or the DOM element itself\n   * @throws {Error} If no element matches the provided selector or the provided DOM element is null\n   * @example\n   * ```javascript\n   * const { ObservableElement } = cami;\n   * const draggableElement = new ObservableElement(\".draggable\");\n   * ```\n   */\n  constructor(selectorOrElement) {\n    super();\n    /** @type {Element} */\n    if (typeof selectorOrElement === 'string') {\n      this.element = document.querySelector(selectorOrElement);\n      if (!this.element) {\n        throw new Error(`[Cami.js] Element not found for selector: ${selectorOrElement}`);\n      }\n    } else if (selectorOrElement instanceof Element || selectorOrElement instanceof Document) {\n      this.element = selectorOrElement;\n    } else {\n      throw new Error(`[Cami.js] Invalid argument: ${selectorOrElement}`);\n    }\n  }\n\n  /**\n   * @method\n   * @param {string} eventType - The type of the event to observe\n   * @param {Object} options - The options to pass to addEventListener\n   * @returns {ObservableStream} An ObservableStream that emits the observed events\n   * @example\n   * ```javascript\n   * const { ObservableElement } = cami;\n   * const draggableElement = new ObservableElement(\".draggable\");\n   * draggableElement.on('mousedown').subscribe({\n   *   next: event => console.log('drag event', event),\n   *   error: err => console.error(err),\n   * });\n   * ```\n   */\n  on(eventType, options = {}) {\n    return new ObservableStream(subscriber => {\n      const eventListener = event => {\n        subscriber.next(event);\n      };\n\n      this.element.addEventListener(eventType, eventListener, options);\n\n      return () => {\n        this.element.removeEventListener(eventType, eventListener, options);\n      };\n    });\n  }\n}\n\nexport { ObservableElement };\n", "/**\n * @license\n * Copyright (c) 2023 Kenn Costales\n * MIT License\n */\n\nimport { ObservableStream } from './observables/observable-stream.js';\n\n/**\n * @class HTTPStream\n * @extends ObservableStream\n * @description A class that extends ObservableStream and provides additional methods for handling HTTP requests.\n */\nclass HTTPStream extends ObservableStream {\n  _handlers = {};\n\n  /**\n   * @method toJson\n   * @memberof HTTPStream\n   * @description Converts the response data to JSON.\n   * @returns {Promise} A promise that resolves to the JSON data.\n   * @example\n   * http('https://api.example.com/data')\n   *   .toJson()\n   *   .then(data => console.log(data))\n   *   .catch(error => console.error(error));\n   */\n  toJson() {\n    return new Promise((resolve, reject) => {\n      this.subscribe({\n        next: data => {\n          try {\n            if (typeof data === 'object') {\n              resolve(data);\n            } else {\n              resolve(JSON.parse(data));\n            }\n          } catch (error) {\n            reject(error);\n          }\n        },\n        error: error => reject(error)\n      });\n    });\n  }\n\n  /**\n   * @method on\n   * @memberof HTTPStream\n   * @description Registers an event handler for a specified event.\n   * @param {string} event - The event to register the handler for.\n   * @param {function} handler - The handler function.\n   * @returns {HTTPStream} The HTTPStream instance.\n   */\n  on(event, handler) {\n    if (!this._handlers[event]) {\n      this._handlers[event] = [];\n    }\n    this._handlers[event].push(handler);\n    return this;\n  }\n}\n\n/**\n * @function http\n * @description Sends an HTTP request.\n * @param {Object|string} config - The configuration object or URL string.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http('https://api.example.com/data')\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n **/\nconst http = (config) => {\n  if (typeof config === 'string') {\n    return http.get(config);\n  }\n\n  return new HTTPStream((observer) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(config.method || 'GET', config.url);\n\n    if (config.headers) {\n      Object.keys(config.headers).forEach((key) => {\n        xhr.setRequestHeader(key, config.headers[key]);\n      });\n    }\n\n    xhr.onload = () => {\n      let response = xhr.responseText;\n      const transformResponse = config.transformResponse || ((data) => {\n        try {\n          return JSON.parse(data);\n        } catch {\n          return data;\n        }\n      });\n      response = transformResponse(response);\n      observer.next(response);\n      observer.complete();\n    };\n\n    xhr.onerror = () => observer.error(xhr.statusText);\n    xhr.send(config.data ? JSON.stringify(config.data) : null);\n\n    return () => {\n      xhr.abort();\n    };\n  });\n};\n\n/**\n * @function http.get\n * @description Sends a GET request.\n * @param {string} url - The URL to send the GET request to.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.get('https://api.example.com/data')\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.get = (url, config = {}) => {\n  config.url = url;\n  config.method = 'GET';\n  return http(config);\n};\n\n/**\n * @function http.post\n * @description Sends a POST request.\n * @param {string} url - The URL to send the POST request to.\n * @param {Object} [data={}] - The data to send in the body of the POST request.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.post('https://jsonplaceholder.typicode.com/posts', { title: 'foo', body: 'bar', userId: 1 })\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.post = (url, data = {}, config = {}) => {\n  config.url = url;\n  config.data = data;\n  config.method = 'POST';\n  return http(config);\n};\n\n/**\n * @function http.put\n * @description Sends a PUT request.\n * @param {string} url - The URL to send the PUT request to.\n * @param {Object} [data={}] - The data to send in the body of the PUT request.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.put('https://jsonplaceholder.typicode.com/posts/1', { id: 1, title: 'foo', body: 'bar', userId: 1 })\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.put = (url, data = {}, config = {}) => {\n  config.url = url;\n  config.data = data;\n  config.method = 'PUT';\n  return http(config);\n};\n\n/**\n * @function http.patch\n * @description Sends a PATCH request.\n * @param {string} url - The URL to send the PATCH request to.\n * @param {Object} [data={}] - The data to send in the body of the PATCH request.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.patch('https://jsonplaceholder.typicode.com/posts/1', { title: 'foo' })\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.patch = (url, data = {}, config = {}) => {\n  config.url = url;\n  config.data = data;\n  config.method = 'PATCH';\n  return http(config);\n};\n\n/**\n * @function http.delete\n * @description Sends a DELETE request.\n * @param {string} url - The URL to send the DELETE request to.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.delete('https://jsonplaceholder.typicode.com/posts/1')\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.delete = (url, config = {}) => {\n  config.url = url;\n  config.method = 'DELETE';\n  return http(config);\n};\n\n/**\n * @function http.sse\n * @description Establishes a Server-Sent Events connection.\n * @param {string} url - The URL to establish a Server-Sent Events connection.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream with methods to register event handlers, handle errors, and close the connection.\n * @example\n * const stream = http.sse('https://api.example.com/events');\n * stream.on('message', event => console.log(event.data));\n * stream.catchError(error => console.error(error));\n */\nhttp.sse = (url, config = {}) => {\n  const stream = new HTTPStream((observer) => {\n    const source = new EventSource(url, config);\n\n    source.onmessage = (event) => {\n      if (stream._handlers[event.type]) {\n        stream._handlers[event.type].forEach(handler => handler(event));\n      }\n      observer.next(event);\n    };\n    source.onerror = (error) => observer.error(error);\n\n    return () => {\n      source.close();\n    };\n  });\n\n  return stream;\n};\n\nexport { http };\n", "/**\n * @license\n * Copyright (c) 2023 Kenn Costales\n * MIT License\n */\n\n/**\n * @module cami\n */\nimport { html, render, svg } from 'lit-html';\nimport { css } from 'goober';\nimport { produce } from \"immer\"\nimport { ReactiveElement } from './reactive-element.js';\nimport { ObservableStore, store } from './observables/observable-store.js';\nimport { Observable } from './observables/observable.js';\nimport { ObservableState, computed, effect } from './observables/observable-state.js';\nimport { ObservableStream } from './observables/observable-stream.js';\nimport { ObservableElement } from './observables/observable-element.js';\nimport { _config } from './config.js';\nimport { _trace } from './trace.js';\nimport { http } from './http.js';\n\nconst { debug, events } = _config;\n\n/**\n * @exports store - The store object from observable-store.js. This uses local storage by default.\n * @exports html - The html function from 'lit-html'\n * @exports svg - The svg function from 'lit-html'\n * @exports css - The css function from 'goober'\n * @exports ReactiveElement - The ReactiveElement class from reactive_element.js\n * @exports ObservableStream - The ObservableStream class from observable-stream.js\n * @exports ObservableElement - The ObservableElement class from observable-element.js\n * @exports Observable - The Observable class from observable.js\n * @exports ObservableState - The ObservableState class from observable-state.js\n * @exports ObservableStore - The ObservableStore class from observable-store.js\n * @exports http - The http function from http.js\n * @exports debug - The debug property from _config\n * @exports events - The events property from _config\n */\nexport { store, html, svg, css, ReactiveElement, ObservableStream, ObservableElement, Observable, ObservableState, ObservableStore, http, debug, events };\n"],
  "mappings": "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",
  "names": ["global", "globalThis", "trustedTypes", "policy", "createPolicy", "createHTML", "s", "boundAttributeSuffix", "marker", "Math", "random", "String", "slice", "markerMatch", "nodeMarker", "d", "document", "createMarker", "createComment", "isPrimitive", "value", "isArray", "Array", "isIterable", "Symbol", "iterator", "SPACE_CHAR", "textEndRegex", "commentEndRegex", "comment2EndRegex", "tagEndRegex", "RegExp", "singleQuoteAttrEndRegex", "doubleQuoteAttrEndRegex", "rawTextElement", "tag", "type", "strings", "values", "_$litType$", "html", "svg", "noChange", "for", "nothing", "templateCache", "WeakMap", "walker", "createTreeWalker", "trustFromTemplateString", "tsa", "stringFromTSA", "hasOwnProperty", "Error", "getTemplateHtml", "l", "length", "attrNames", "rawTextEndRegex", "regex", "i", "attrName", "match", "attrNameEndIndex", "lastIndex", "exec", "test", "end", "startsWith", "push", "Template", "constructor", "options", "node", "this", "parts", "nodeIndex", "attrNameIndex", "partCount", "el", "createElement", "currentNode", "content", "svgElement", "firstChild", "replaceWith", "childNodes", "nextNode", "nodeType", "hasAttributes", "name", "getAttributeNames", "endsWith", "realName", "statics", "getAttribute", "split", "m", "index", "ctor", "PropertyPart", "BooleanAttributePart", "EventPart", "AttributePart", "removeAttribute", "tagName", "textContent", "emptyScript", "append", "data", "indexOf", "_options", "innerHTML", "resolveDirective", "part", "parent", "attributeIndex", "currentDirective", "__directives", "__directive", "nextDirectiveConstructor", "_$initialize", "_$resolve", "TemplateInstance", "template", "_$parts", "_$disconnectableChildren", "_$template", "_$parent", "parentNode", "_$isConnected", "fragment", "creationScope", "importNode", "partIndex", "templatePart", "ChildPart", "nextSibling", "ElementPart", "_$setValue", "__isConnected", "startNode", "endNode", "_$committedValue", "_$startNode", "_$endNode", "isConnected", "directiveParent", "_$clear", "_commitText", "_commitTemplateResult", "_commitNode", "_commitIterable", "insertBefore", "_insert", "createTextNode", "result", "_$getTemplate", "h", "_update", "instance", "_clone", "get", "set", "itemParts", "itemPart", "item", "start", "from", "_$notifyConnectionChanged", "n", "remove", "element", "fill", "valueIndex", "noCommit", "change", "v", "_commitValue", "setAttribute", "toggleAttribute", "super", "newListener", "oldListener", "shouldRemoveListener", "capture", "once", "passive", "shouldAddListener", "removeEventListener", "addEventListener", "event", "call", "host", "handleEvent", "polyfillSupport", "global", "litHtmlPolyfillSupport", "Template", "ChildPart", "litHtmlVersions", "push", "render", "value", "container", "options", "partOwnerNode", "renderBefore", "part", "endNode", "insertBefore", "createMarker", "_$setValue", "e", "t", "l", "a", "n", "o", "e", "t", "r", "c", "s", "i", "p", "u", "d", "f", "b", "u", "h", "NOTHING", "DRAFTABLE", "DRAFT_STATE", "errors", "plugin", "thing", "data", "die", "error", "args", "e", "msg", "getPrototypeOf", "isDraft", "value", "isDraftable", "isPlainObject", "_a", "isMap", "isSet", "objectCtorString", "proto", "Ctor", "each", "obj", "iter", "getArchtype", "key", "value", "entry", "index", "thing", "state", "DRAFT_STATE", "isMap", "isSet", "has", "prop", "set", "thing", "propOrOldValue", "value", "t", "getArchtype", "is", "x", "y", "isMap", "target", "isSet", "latest", "state", "shallowCopy", "base", "strict", "isPlainObject", "getPrototypeOf", "obj", "__spreadValues", "descriptors", "DRAFT_STATE", "keys", "i", "key", "desc", "freeze", "deep", "isFrozen", "isDraft", "isDraftable", "dontMutateFrozenCollections", "each", "_key", "die", "plugins", "getPlugin", "pluginKey", "plugin", "currentScope", "getCurrentScope", "createScope", "parent_", "immer_", "usePatchesInScope", "scope", "patchListener", "getPlugin", "revokeScope", "leaveScope", "revokeDraft", "enterScope", "immer", "draft", "state", "DRAFT_STATE", "processResult", "result", "baseDraft", "isReplaced", "die", "isDraftable", "finalize", "maybeFreeze", "NOTHING", "rootScope", "value", "path", "isFrozen", "each", "key", "childValue", "finalizeProperty", "resultEach", "isSet", "parentState", "targetObject", "prop", "rootPath", "targetIsSet", "isDraft", "has", "res", "set", "deep", "freeze", "createProxyProxy", "base", "parent", "isArray", "target", "traps", "objectTraps", "arrayTraps", "revoke", "proxy", "source", "latest", "readPropFromProto", "peek", "prepareCopy", "createProxy", "desc", "getDescriptorFromProto", "current", "currentState", "is", "markChanged", "owner", "getPrototypeOf", "fn", "_a", "proto", "shallowCopy", "Immer", "config", "recipe", "defaultBase", "self", "curriedProduce", "args", "hasError", "p", "ip", "patches", "inversePatches", "i", "patch", "applyPatchesImpl", "isMap", "currentImpl", "copy", "immer", "Immer", "produce", "produceWithPatches", "setAutoFreeze", "setUseStrictShallowCopy", "applyPatches", "createDraft", "finishDraft", "Subscriber", "observer", "result", "error", "teardown", "Observable", "subscribeCallback", "observerOrNext", "complete", "subscriber", "err", "value", "callbackFn", "resolve", "promise", "r", "ObservableStore", "Observable", "initialState", "subscriber", "target", "property", "value", "observer", "key", "action", "args", "context", "middleware", "devTools", "reducer", "payload", "produce", "draft", "_localStorageEnhancer", "StoreClass", "options", "storeName", "shouldLoad", "defaultExpiry", "expiry", "store", "storedState", "storedExpiry", "currentTime", "isExpired", "state", "expiryTime", "defaultOptions", "finalOptions", "__spreadValues", "enhancedStore", "ObservableStream", "_ObservableStream", "Observable", "value", "subscriber", "subscription", "v", "err", "isCancelled", "__async", "iter", "__forAwait", "more", "temp", "error", "transformFn", "predicateFn", "reducerFn", "initialValue", "resolve", "reject", "accumulator", "notifier", "sourceSubscription", "notifierSubscription", "n", "i", "subscriptions", "innerObservable", "innerSubscription", "innerValue", "values", "callback", "predicate", "every", "state", "ObservableState", "observer", "stream", "fn", "newStream", "delay", "timeoutId", "sideEffectFn", "duration", "lastEmitTime", "currentTime", "lastValue", "isFirstValue", "waiting", "sourceValues", "nextValue", "nextInnerObservable", "observables", "observable", "initialValues", "_config", "_trace", "functionName", "messages", "_config", "DependencyTracker", "ObservableState", "Observable", "initialValue", "subscriber", "last", "name", "produce", "draft", "newValue", "obj", "value", "key", "state", "keys", "current", "i", "elements", "start", "deleteCount", "items", "arr", "compareFunction", "end", "target", "updater", "observersWithLast", "observer", "oldValue", "_config", "event", "_trace", "stream", "ObservableStream", "err", "ComputedState", "computeFn", "tracker", "observable", "subscription", "computed", "effect", "effectFn", "cleanup", "dependencies", "subscriptions", "_runEffect", "dispose", "QueryCache", "ReactiveElement", "computed", "effect", "attributes", "attrName", "parseFn", "attrValue", "transformFn", "v", "produce", "observable", "computeFn", "observableState", "effectFn", "dispose", "store", "key", "ObservableStore", "unsubscribe", "newState", "target", "property", "value", "subscribeFn", "ObservableStream", "queryKey", "queryFn", "staleTime", "refetchOnWindowFocus", "refetchOnMount", "refetchOnReconnect", "refetchInterval", "gcTime", "retry", "retryDelay", "attempt", "k", "_trace", "queryState", "queryProxy", "fetchData", "__async", "now", "cacheEntry", "state", "data", "error", "refetchOnFocus", "intervalId", "gcTimeout", "mutationFn", "onMutate", "onError", "onSuccess", "onSettled", "mutationState", "mutationProxy", "performMutation", "variables", "context", "previousState", "name", "oldValue", "newValue", "isAttribute", "ObservableState", "proxy", "args", "config", "Observable", "initialValue", "type", "__spreadProps", "__spreadValues", "allowedTypes", "valueType", "prototype", "template", "j", "ObservableElement", "ObservableStream", "selectorOrElement", "eventType", "options", "subscriber", "eventListener", "event", "HTTPStream", "ObservableStream", "__publicField", "resolve", "reject", "data", "error", "event", "handler", "http", "config", "observer", "xhr", "key", "response", "transformResponse", "e", "url", "stream", "source", "debug", "events", "_config"]
}
