{
  "version": 3,
  "sources": ["../src/html.js", "../src/produce.js", "../src/observables/observable.js", "../src/config.js", "../src/trace.js", "../src/observables/observable-store.js", "../src/observables/observable-stream.js", "../src/observables/observable-state.js", "../src/observables/observable-proxy.js", "../src/reactive-element.js", "../src/observables/observable-element.js", "../src/http.js", "../src/cami.js"],
  "sourcesContent": ["/**\n * @license\n * lit-html\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\nconst wrap = (node) => node;\nconst trustedTypes = global.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n    ? trustedTypes.createPolicy('cami-html', {\n        createHTML: (s) => s,\n    })\n    : undefined;\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$cami$';\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `cami$${String(Math.random()).slice(9)}$`;\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\nconst d = document;\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\nconst isPrimitive = (value) => value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value) => isArray(value) ||\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof value?.[Symbol.iterator] === 'function';\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`, 'g');\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag = (type) => (strings, ...values) => {\n    return {\n        // This property needs to remain unminified.\n        ['_$camiType$']: type,\n        strings,\n        values,\n    };\n};\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nconst html = tag(HTML_RESULT);\n/**\n * Interprets a template literal as an SVG fragment that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus cannot be used within an `<svg>` HTML element.\n */\nconst svg = tag(SVG_RESULT);\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nconst noChange = Symbol.for('cami-noChange');\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nconst nothing = Symbol.for('cami-nothing');\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap();\nconst walker = d.createTreeWalker(d, 129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */);\nfunction trustFromTemplateString(tsa, stringFromTSA) {\n    // A security check to prevent spoofing of Lit template results.\n    // In the future, we may be able to replace this with Array.isTemplateObject,\n    // though we might need to make that check inside of the html and svg\n    // functions, because precompiled templates don't come in as\n    // TemplateStringArray objects.\n    if (!Array.isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n        let message = 'invalid template strings array';\n        throw new Error(message);\n    }\n    return policy !== undefined\n        ? policy.createHTML(stringFromTSA)\n        : stringFromTSA;\n}\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (strings, type) => {\n    // Insert makers into the template HTML to represent the position of\n    // bindings. The following code scans the template strings to determine the\n    // syntactic position of the bindings. They can be in text position, where\n    // we insert an HTML comment, attribute value position, where we insert a\n    // sentinel string and re-write the attribute name, or inside a tag where\n    // we insert the sentinel string.\n    const l = strings.length - 1;\n    // Stores the case-sensitive bound attribute names in the order of their\n    // parts. ElementParts are also reflected in this array as undefined\n    // rather than a string, to disambiguate from attribute bindings.\n    const attrNames = [];\n    let html = type === SVG_RESULT ? '<svg>' : '';\n    // When we're inside a raw text tag (not it's text content), the regex\n    // will still be tagRegex so we can find attributes, but will switch to\n    // this regex when the tag ends.\n    let rawTextEndRegex;\n    // The current parsing state, represented as a reference to one of the\n    // regexes\n    let regex = textEndRegex;\n    for (let i = 0; i < l; i++) {\n        const s = strings[i];\n        // The index of the end of the last attribute name. When this is\n        // positive at end of a string, it means we're in an attribute value\n        // position and need to rewrite the attribute name.\n        // We also use a special value of -2 to indicate that we encountered\n        // the end of a string in attribute name position.\n        let attrNameEndIndex = -1;\n        let attrName;\n        let lastIndex = 0;\n        let match;\n        // The conditions in this loop handle the current parse state, and the\n        // assignments to the `regex` variable are the state transitions.\n        while (lastIndex < s.length) {\n            // Make sure we start searching from where we previously left off\n            regex.lastIndex = lastIndex;\n            match = regex.exec(s);\n            if (match === null) {\n                break;\n            }\n            lastIndex = regex.lastIndex;\n            if (regex === textEndRegex) {\n                if (match[COMMENT_START] === '!--') {\n                    regex = commentEndRegex;\n                }\n                else if (match[COMMENT_START] !== undefined) {\n                    // We started a weird comment, like </{\n                    regex = comment2EndRegex;\n                }\n                else if (match[TAG_NAME] !== undefined) {\n                    if (rawTextElement.test(match[TAG_NAME])) {\n                        // Record if we encounter a raw-text element. We'll switch to\n                        // this regex at the end of the tag.\n                        rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n                    }\n                    regex = tagEndRegex;\n                }\n                else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n                    regex = tagEndRegex;\n                }\n            }\n            else if (regex === tagEndRegex) {\n                if (match[ENTIRE_MATCH] === '>') {\n                    // End of a tag. If we had started a raw-text element, use that\n                    // regex\n                    regex = rawTextEndRegex ?? textEndRegex;\n                    // We may be ending an unquoted attribute value, so make sure we\n                    // clear any pending attrNameEndIndex\n                    attrNameEndIndex = -1;\n                }\n                else if (match[ATTRIBUTE_NAME] === undefined) {\n                    // Attribute name position\n                    attrNameEndIndex = -2;\n                }\n                else {\n                    attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n                    attrName = match[ATTRIBUTE_NAME];\n                    regex =\n                        match[QUOTE_CHAR] === undefined\n                            ? tagEndRegex\n                            : match[QUOTE_CHAR] === '\"'\n                                ? doubleQuoteAttrEndRegex\n                                : singleQuoteAttrEndRegex;\n                }\n            }\n            else if (regex === doubleQuoteAttrEndRegex ||\n                regex === singleQuoteAttrEndRegex) {\n                regex = tagEndRegex;\n            }\n            else if (regex === commentEndRegex || regex === comment2EndRegex) {\n                regex = textEndRegex;\n            }\n            else {\n                // Not one of the five state regexes, so it must be the dynamically\n                // created raw text regex and we're at the close of that element.\n                regex = tagEndRegex;\n                rawTextEndRegex = undefined;\n            }\n        }\n        // We have four cases:\n        //  1. We're in text position, and not in a raw text element\n        //     (regex === textEndRegex): insert a comment marker.\n        //  2. We have a non-negative attrNameEndIndex which means we need to\n        //     rewrite the attribute name to add a bound attribute suffix.\n        //  3. We're at the non-first binding in a multi-binding attribute, use a\n        //     plain marker.\n        //  4. We're somewhere else inside the tag. If we're in attribute name\n        //     position (attrNameEndIndex === -2), add a sequential suffix to\n        //     generate a unique attribute name.\n        // Detect a binding next to self-closing tag end and insert a space to\n        // separate the marker from the tag end:\n        const end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n        html +=\n            regex === textEndRegex\n                ? s + nodeMarker\n                : attrNameEndIndex >= 0\n                    ? (attrNames.push(attrName),\n                        s.slice(0, attrNameEndIndex) +\n                            boundAttributeSuffix +\n                            s.slice(attrNameEndIndex)) +\n                        marker +\n                        end\n                    : s + marker + (attrNameEndIndex === -2 ? i : end);\n    }\n    const htmlResult = html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n    // Returned as an array for terseness\n    return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\nclass Template {\n    constructor(\n    // This property needs to remain unminified.\n    { strings, ['_$camiType$']: type }, options) {\n        this.parts = [];\n        let node;\n        let nodeIndex = 0;\n        let attrNameIndex = 0;\n        const partCount = strings.length - 1;\n        const parts = this.parts;\n        // Create template element\n        const [html, attrNames] = getTemplateHtml(strings, type);\n        this.el = Template.createElement(html, options);\n        walker.currentNode = this.el.content;\n        // Re-parent SVG nodes into template root\n        if (type === SVG_RESULT) {\n            const svgElement = this.el.content.firstChild;\n            svgElement.replaceWith(...svgElement.childNodes);\n        }\n        // Walk the template to find binding markers and create TemplateParts\n        while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n            if (node.nodeType === 1) {\n                // TODO (justinfagnani): for attempted dynamic tag names, we don't\n                // increment the bindingIndex, and it'll be off by 1 in the element\n                // and off by two after it.\n                if (node.hasAttributes()) {\n                    for (const name of node.getAttributeNames()) {\n                        if (name.endsWith(boundAttributeSuffix)) {\n                            const realName = attrNames[attrNameIndex++];\n                            const value = node.getAttribute(name);\n                            const statics = value.split(marker);\n                            const m = /([.?@])?(.*)/.exec(realName);\n                            parts.push({\n                                type: ATTRIBUTE_PART,\n                                index: nodeIndex,\n                                name: m[2],\n                                strings: statics,\n                                ctor: m[1] === '.'\n                                    ? PropertyPart\n                                    : m[1] === '?'\n                                        ? BooleanAttributePart\n                                        : m[1] === '@'\n                                            ? EventPart\n                                            : AttributePart,\n                            });\n                            node.removeAttribute(name);\n                        }\n                        else if (name.startsWith(marker)) {\n                            parts.push({\n                                type: ELEMENT_PART,\n                                index: nodeIndex,\n                            });\n                            node.removeAttribute(name);\n                        }\n                    }\n                }\n                // TODO (justinfagnani): benchmark the regex against testing for each\n                // of the 3 raw text element names.\n                if (rawTextElement.test(node.tagName)) {\n                    // For raw text elements we need to split the text content on\n                    // markers, create a Text node for each segment, and create\n                    // a TemplatePart for each marker.\n                    const strings = node.textContent.split(marker);\n                    const lastIndex = strings.length - 1;\n                    if (lastIndex > 0) {\n                        node.textContent = trustedTypes\n                            ? trustedTypes.emptyScript\n                            : '';\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        // We can't use empty text nodes as markers because they're\n                        // normalized when cloning in IE (could simplify when\n                        // IE is no longer supported)\n                        for (let i = 0; i < lastIndex; i++) {\n                            node.append(strings[i], createMarker());\n                            // Walk past the marker node we just added\n                            walker.nextNode();\n                            parts.push({ type: CHILD_PART, index: ++nodeIndex });\n                        }\n                        // Note because this marker is added after the walker's current\n                        // node, it will be walked to in the outer loop (and ignored), so\n                        // we don't need to adjust nodeIndex here\n                        node.append(strings[lastIndex], createMarker());\n                    }\n                }\n            }\n            else if (node.nodeType === 8) {\n                const data = node.data;\n                if (data === markerMatch) {\n                    parts.push({ type: CHILD_PART, index: nodeIndex });\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        parts.push({ type: COMMENT_PART, index: nodeIndex });\n                        // Move to the end of the match\n                        i += marker.length - 1;\n                    }\n                }\n            }\n            nodeIndex++;\n        }\n    }\n    // Overridden via `camiHtmlPolyfillSupport` to provide platform support.\n    /** @nocollapse */\n    static createElement(html, _options) {\n        const el = d.createElement('template');\n        el.innerHTML = html;\n        return el;\n    }\n}\nfunction resolveDirective(part, value, parent = part, attributeIndex) {\n    // Bail early if the value is explicitly noChange. Note, this means any\n    // nested directive is still attached and is not run.\n    if (value === noChange) {\n        return value;\n    }\n    let currentDirective = attributeIndex !== undefined\n        ? parent.__directives?.[attributeIndex]\n        : parent.__directive;\n    const nextDirectiveConstructor = isPrimitive(value)\n        ? undefined\n        : // This property needs to remain unminified.\n            value['_$camiDirective$'];\n    if (currentDirective?.constructor !== nextDirectiveConstructor) {\n        // This property needs to remain unminified.\n        currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n        if (nextDirectiveConstructor === undefined) {\n            currentDirective = undefined;\n        }\n        else {\n            currentDirective = new nextDirectiveConstructor(part);\n            currentDirective._$initialize(part, parent, attributeIndex);\n        }\n        if (attributeIndex !== undefined) {\n            (parent.__directives ??= [])[attributeIndex] =\n                currentDirective;\n        }\n        else {\n            parent.__directive = currentDirective;\n        }\n    }\n    if (currentDirective !== undefined) {\n        value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);\n    }\n    return value;\n}\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance {\n    constructor(template, parent) {\n        this._$parts = [];\n        /** @internal */\n        this._$disconnectableChildren = undefined;\n        this._$template = template;\n        this._$parent = parent;\n    }\n    // Called by ChildPart parentNode getter\n    get parentNode() {\n        return this._$parent.parentNode;\n    }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    // This method is separate from the constructor because we need to return a\n    // DocumentFragment and we don't want to hold onto it with an instance field.\n    _clone(options) {\n        const { el: { content }, parts: parts, } = this._$template;\n        const fragment = (options?.creationScope ?? d).importNode(content, true);\n        walker.currentNode = fragment;\n        let node = walker.nextNode();\n        let nodeIndex = 0;\n        let partIndex = 0;\n        let templatePart = parts[0];\n        while (templatePart !== undefined) {\n            if (nodeIndex === templatePart.index) {\n                let part;\n                if (templatePart.type === CHILD_PART) {\n                    part = new ChildPart(node, node.nextSibling, this, options);\n                }\n                else if (templatePart.type === ATTRIBUTE_PART) {\n                    part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);\n                }\n                else if (templatePart.type === ELEMENT_PART) {\n                    part = new ElementPart(node, this, options);\n                }\n                this._$parts.push(part);\n                templatePart = parts[++partIndex];\n            }\n            if (nodeIndex !== templatePart?.index) {\n                node = walker.nextNode();\n                nodeIndex++;\n            }\n        }\n        // We need to set the currentNode away from the cloned tree so that we\n        // don't hold onto the tree even if the tree is detached and should be\n        // freed.\n        walker.currentNode = d;\n        return fragment;\n    }\n    _update(values) {\n        let i = 0;\n        for (const part of this._$parts) {\n            if (part !== undefined) {\n                if (part.strings !== undefined) {\n                    part._$setValue(values, part, i);\n                    // The number of values the part consumes is part.strings.length - 1\n                    // since values are in between template spans. We increment i by 1\n                    // later in the loop, so increment it by part.strings.length - 2 here\n                    i += part.strings.length - 2;\n                }\n                else {\n                    part._$setValue(values[i]);\n                }\n            }\n            i++;\n        }\n    }\n}\nclass ChildPart {\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        // ChildParts that are not at the root should always be created with a\n        // parent; only RootChildNode's won't, so they return the local isConnected\n        // state\n        return this._$parent?._$isConnected ?? this.__isConnected;\n    }\n    constructor(startNode, endNode, parent, options) {\n        this.type = CHILD_PART;\n        this._$committedValue = nothing;\n        // The following fields will be patched onto ChildParts when required by\n        // AsyncDirective\n        /** @internal */\n        this._$disconnectableChildren = undefined;\n        this._$startNode = startNode;\n        this._$endNode = endNode;\n        this._$parent = parent;\n        this.options = options;\n        // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n        // no _$parent); the value on a non-root-part is \"don't care\", but checking\n        // for parent would be more code\n        this.__isConnected = options?.isConnected ?? true;\n    }\n    /**\n     * The parent node into which the part renders its content.\n     *\n     * A ChildPart's content consists of a range of adjacent child nodes of\n     * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n     * `.endNode`).\n     *\n     * - If both `.startNode` and `.endNode` are non-null, then the part's content\n     * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n     *\n     * - If `.startNode` is non-null but `.endNode` is null, then the part's\n     * content consists of all siblings following `.startNode`, up to and\n     * including the last child of `.parentNode`. If `.endNode` is non-null, then\n     * `.startNode` will always be non-null.\n     *\n     * - If both `.endNode` and `.startNode` are null, then the part's content\n     * consists of all child nodes of `.parentNode`.\n     */\n    get parentNode() {\n        let parentNode = wrap(this._$startNode).parentNode;\n        const parent = this._$parent;\n        if (parent !== undefined &&\n            parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */) {\n            // If the parentNode is a DocumentFragment, it may be because the DOM is\n            // still in the cloned fragment during initial render; if so, get the real\n            // parentNode the part will be committed into by asking the parent.\n            parentNode = parent.parentNode;\n        }\n        return parentNode;\n    }\n    /**\n     * The part's leading marker node, if any. See `.parentNode` for more\n     * information.\n     */\n    get startNode() {\n        return this._$startNode;\n    }\n    /**\n     * The part's trailing marker node, if any. See `.parentNode` for more\n     * information.\n     */\n    get endNode() {\n        return this._$endNode;\n    }\n    _$setValue(value, directiveParent = this) {\n        value = resolveDirective(this, value, directiveParent);\n        if (isPrimitive(value)) {\n            // Non-rendering child values. It's important that these do not render\n            // empty text nodes to avoid issues with preventing default <slot>\n            // fallback content.\n            if (value === nothing || value == null || value === '') {\n                if (this._$committedValue !== nothing) {\n                    this._$clear();\n                }\n                this._$committedValue = nothing;\n            }\n            else if (value !== this._$committedValue && value !== noChange) {\n                this._commitText(value);\n            }\n            // This property needs to remain unminified.\n        }\n        else if (value['_$camiType$'] !== undefined) {\n            this._commitTemplateResult(value);\n        }\n        else if (value.nodeType !== undefined) {\n            this._commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this._commitIterable(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);\n    }\n    _commitNode(value) {\n        if (this._$committedValue !== value) {\n            this._$clear();\n            this._$committedValue = this._insert(value);\n        }\n    }\n    _commitText(value) {\n        // If the committed value is a primitive it means we called _commitText on\n        // the previous render, and we know that this._$startNode.nextSibling is a\n        // Text node. We can now just replace the text content (.data) of the node.\n        if (this._$committedValue !== nothing &&\n            isPrimitive(this._$committedValue)) {\n            const node = wrap(this._$startNode).nextSibling;\n            node.data = value;\n        }\n        else {\n            {\n                this._commitNode(d.createTextNode(value));\n            }\n        }\n        this._$committedValue = value;\n    }\n    _commitTemplateResult(result) {\n        // This property needs to remain unminified.\n        const { values, ['_$camiType$']: type } = result;\n        // If $camiType$ is a number, result is a plain TemplateResult and we get\n        // the template from the template cache. If not, result is a\n        // CompiledTemplateResult and _$camiType$ is a CompiledTemplate and we need\n        // to create the <template> element the first time we see it.\n        const template = typeof type === 'number'\n            ? this._$getTemplate(result)\n            : (type.el === undefined &&\n                (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)),\n                type);\n        if (this._$committedValue?._$template === template) {\n            this._$committedValue._update(values);\n        }\n        else {\n            const instance = new TemplateInstance(template, this);\n            const fragment = instance._clone(this.options);\n            instance._update(values);\n            this._commitNode(fragment);\n            this._$committedValue = instance;\n        }\n    }\n    // Overridden via `camiHtmlPolyfillSupport` to provide platform support.\n    /** @internal */\n    _$getTemplate(result) {\n        let template = templateCache.get(result.strings);\n        if (template === undefined) {\n            templateCache.set(result.strings, (template = new Template(result)));\n        }\n        return template;\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If value is an array, then the previous render was of an\n        // iterable and value will contain the ChildParts from the previous\n        // render. If value is not an array, clear this part and make a new\n        // array for ChildParts.\n        if (!isArray(this._$committedValue)) {\n            this._$committedValue = [];\n            this._$clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._$committedValue;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            if (partIndex === itemParts.length) {\n                // If no existing part, create a new one\n                // TODO (justinfagnani): test perf impact of always creating two parts\n                // instead of sharing parts between nodes\n                // https://github.com/lit/lit/issues/1266\n                itemParts.push((itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options)));\n            }\n            else {\n                // Reuse an existing part\n                itemPart = itemParts[partIndex];\n            }\n            itemPart._$setValue(item);\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // itemParts always have end nodes\n            this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n        }\n    }\n    /**\n     * Removes the nodes contained within this Part from the DOM.\n     *\n     * @param start Start node to clear from, for clearing a subset of the part's\n     *     DOM (used when truncating iterables)\n     * @param from  When `start` is specified, the index within the iterable from\n     *     which ChildParts are being removed, used for disconnecting directives in\n     *     those Parts.\n     *\n     * @internal\n     */\n    _$clear(start = wrap(this._$startNode).nextSibling, from) {\n        this._$notifyConnectionChanged?.(false, true, from);\n        while (start && start !== this._$endNode) {\n            const n = wrap(start).nextSibling;\n            wrap(start).remove();\n            start = n;\n        }\n    }\n    /**\n     * Implementation of RootPart's `isConnected`. Note that this metod\n     * should only be called on `RootPart`s (the `ChildPart` returned from a\n     * top-level `render()` call). It has no effect on non-root ChildParts.\n     * @param isConnected Whether to set\n     * @internal\n     */\n    setConnected(isConnected) {\n        if (this._$parent === undefined) {\n            this.__isConnected = isConnected;\n            this._$notifyConnectionChanged?.(isConnected);\n        }\n    }\n}\nclass AttributePart {\n    get tagName() {\n        return this.element.tagName;\n    }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    constructor(element, name, strings, parent, options) {\n        this.type = ATTRIBUTE_PART;\n        /** @internal */\n        this._$committedValue = nothing;\n        /** @internal */\n        this._$disconnectableChildren = undefined;\n        this.element = element;\n        this.name = name;\n        this._$parent = parent;\n        this.options = options;\n        if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n            this._$committedValue = new Array(strings.length - 1).fill(new String());\n            this.strings = strings;\n        }\n        else {\n            this._$committedValue = nothing;\n        }\n    }\n    /**\n     * Sets the value of this part by resolving the value from possibly multiple\n     * values and static strings and committing it to the DOM.\n     * If this part is single-valued, `this._strings` will be undefined, and the\n     * method will be called with a single value argument. If this part is\n     * multi-value, `this._strings` will be defined, and the method is called\n     * with the value array of the part's owning TemplateInstance, and an offset\n     * into the value array from which the values should be read.\n     * This method is overloaded this way to eliminate short-lived array slices\n     * of the template instance values, and allow a fast-path for single-valued\n     * parts.\n     *\n     * @param value The part value, or an array of values for multi-valued parts\n     * @param valueIndex the index to start reading values from. `undefined` for\n     *   single-valued parts\n     * @param noCommit causes the part to not commit its value to the DOM. Used\n     *   in hydration to prime attribute parts with their first-rendered value,\n     *   but not set the attribute, and in SSR to no-op the DOM operation and\n     *   capture the value for serialization.\n     *\n     * @internal\n     */\n    _$setValue(value, directiveParent = this, valueIndex, noCommit) {\n        const strings = this.strings;\n        // Whether any of the values has changed, for dirty-checking\n        let change = false;\n        if (strings === undefined) {\n            // Single-value binding case\n            value = resolveDirective(this, value, directiveParent, 0);\n            change =\n                !isPrimitive(value) ||\n                    (value !== this._$committedValue && value !== noChange);\n            if (change) {\n                this._$committedValue = value;\n            }\n        }\n        else {\n            // Interpolation case\n            const values = value;\n            value = strings[0];\n            let i, v;\n            for (i = 0; i < strings.length - 1; i++) {\n                v = resolveDirective(this, values[valueIndex + i], directiveParent, i);\n                if (v === noChange) {\n                    // If the user-provided value is `noChange`, use the previous value\n                    v = this._$committedValue[i];\n                }\n                change ||=\n                    !isPrimitive(v) || v !== this._$committedValue[i];\n                if (v === nothing) {\n                    value = nothing;\n                }\n                else if (value !== nothing) {\n                    value += (v ?? '') + strings[i + 1];\n                }\n                // We always record each value, even if one is `nothing`, for future\n                // change detection.\n                this._$committedValue[i] = v;\n            }\n        }\n        if (change && !noCommit) {\n            this._commitValue(value);\n        }\n    }\n    /** @internal */\n    _commitValue(value) {\n        if (value === nothing) {\n            wrap(this.element).removeAttribute(this.name);\n        }\n        else {\n            wrap(this.element).setAttribute(this.name, (value ?? ''));\n        }\n    }\n}\nclass PropertyPart extends AttributePart {\n    constructor() {\n        super(...arguments);\n        this.type = PROPERTY_PART;\n    }\n    /** @internal */\n    _commitValue(value) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.element[this.name] = value === nothing ? undefined : value;\n    }\n}\nclass BooleanAttributePart extends AttributePart {\n    constructor() {\n        super(...arguments);\n        this.type = BOOLEAN_ATTRIBUTE_PART;\n    }\n    /** @internal */\n    _commitValue(value) {\n        wrap(this.element).toggleAttribute(this.name, !!value && value !== nothing);\n    }\n}\nclass EventPart extends AttributePart {\n    constructor(element, name, strings, parent, options) {\n        super(element, name, strings, parent, options);\n        this.type = EVENT_PART;\n    }\n    // EventPart does not use the base _$setValue/_resolveValue implementation\n    // since the dirty checking is more complex\n    /** @internal */\n    _$setValue(newListener, directiveParent = this) {\n        newListener =\n            resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n        if (newListener === noChange) {\n            return;\n        }\n        const oldListener = this._$committedValue;\n        // If the new value is nothing or any options change we have to remove the\n        // part as a listener.\n        const shouldRemoveListener = (newListener === nothing && oldListener !== nothing) ||\n            newListener.capture !==\n                oldListener.capture ||\n            newListener.once !==\n                oldListener.once ||\n            newListener.passive !==\n                oldListener.passive;\n        // If the new value is not nothing and we removed the listener, we have\n        // to add the part as a listener.\n        const shouldAddListener = newListener !== nothing &&\n            (oldListener === nothing || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.name, this, oldListener);\n        }\n        if (shouldAddListener) {\n            // Beware: IE11 and Chrome 41 don't like using the listener as the\n            // options object. Figure out how to deal w/ this in IE11 - maybe\n            // patch addEventListener?\n            this.element.addEventListener(this.name, this, newListener);\n        }\n        this._$committedValue = newListener;\n    }\n    handleEvent(event) {\n        if (typeof this._$committedValue === 'function') {\n            this._$committedValue.call(this.options?.host ?? this.element, event);\n        }\n        else {\n            this._$committedValue.handleEvent(event);\n        }\n    }\n}\nclass ElementPart {\n    constructor(element, parent, options) {\n        this.element = element;\n        this.type = ELEMENT_PART;\n        /** @internal */\n        this._$disconnectableChildren = undefined;\n        this._$parent = parent;\n        this.options = options;\n    }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    _$setValue(value) {\n        resolveDirective(this, value);\n    }\n}\n\n/**\n * Renders a value, usually a cami-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-cami-html-templates| Rendering Lit HTML Templates}\n */\nconst render = (value, container, options) => {\n    const partOwnerNode = options?.renderBefore ?? container;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let part = partOwnerNode['_$camiPart$'];\n    if (part === undefined) {\n        const endNode = options?.renderBefore ?? null;\n        // This property needs to remain unminified.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        partOwnerNode['_$camiPart$'] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options ?? {});\n    }\n    part._$setValue(value);\n    return part;\n};\n\nexport { html, noChange, nothing, render, svg };\n", "/**\n * @license\n * Immer\n * Copyright (c) 2017 Michel Weststrate\n * MIT License\n */\n// src/utils/env.ts\nvar NOTHING = Symbol.for(\"immer-nothing\");\nvar DRAFTABLE = Symbol.for(\"immer-draftable\");\nvar DRAFT_STATE = Symbol.for(\"immer-state\");\n\n// src/utils/errors.ts\nvar errors = process.env.NODE_ENV !== \"production\" ? [\n  // All error codes, starting by 0:\n  function(plugin) {\n    return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`;\n  },\n  function(thing) {\n    return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;\n  },\n  \"This object has been frozen and should not be mutated\",\n  function(data) {\n    return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\n  },\n  \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n  \"Cami Observables forbid circular references\",\n  \"The first or second argument to `produce` must be a function\",\n  \"The third argument to `produce` must be a function or undefined\",\n  \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n  \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n  function(thing) {\n    return `'current' expects a draft, got: ${thing}`;\n  },\n  \"Object.defineProperty() cannot be used on a Cami Observable draft\",\n  \"Object.setPrototypeOf() cannot be used on a Cami Observable draft\",\n  \"Cami Observables only support deleting array indices\",\n  \"Cami Observables only support setting array indices and the 'length' property\",\n  function(thing) {\n    return `'original' expects a draft, got: ${thing}`;\n  }\n  // Note: if more errors are added, the errorOffset in Patches.ts should be increased\n  // See Patches.ts for additional errors\n] : [];\nfunction die(error, ...args) {\n  if (process.env.NODE_ENV !== \"production\") {\n    const e = errors[error];\n    const msg = typeof e === \"function\" ? e.apply(null, args) : e;\n    throw new Error(`[Cami.js] ${msg}`);\n  }\n  throw new Error(\n    `[Cami.js] minified error nr: ${error}.`\n  );\n}\n\n// src/utils/common.ts\nvar getPrototypeOf = Object.getPrototypeOf;\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\nfunction isDraftable(value) {\n  if (!value)\n    return false;\n  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);\n}\nvar objectCtorString = Object.prototype.constructor.toString();\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\")\n    return false;\n  const proto = getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  if (Ctor === Object)\n    return true;\n  return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\n}\nfunction each(obj, iter) {\n  if (getArchtype(obj) === 0 /* Object */) {\n    Object.entries(obj).forEach(([key, value]) => {\n      iter(key, value, obj);\n    });\n  } else {\n    obj.forEach((entry, index) => iter(index, entry, obj));\n  }\n}\nfunction getArchtype(thing) {\n  const state = thing[DRAFT_STATE];\n  return state ? state.type_ : Array.isArray(thing) ? 1 /* Array */ : isMap(thing) ? 2 /* Map */ : isSet(thing) ? 3 /* Set */ : 0 /* Object */;\n}\nfunction has(thing, prop) {\n  return getArchtype(thing) === 2 /* Map */ ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n}\nfunction set(thing, propOrOldValue, value) {\n  const t = getArchtype(thing);\n  if (t === 2 /* Map */)\n    thing.set(propOrOldValue, value);\n  else if (t === 3 /* Set */) {\n    thing.add(value);\n  } else\n    thing[propOrOldValue] = value;\n}\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\nfunction isMap(target) {\n  return target instanceof Map;\n}\nfunction isSet(target) {\n  return target instanceof Set;\n}\nfunction latest(state) {\n  return state.copy_ || state.base_;\n}\nfunction shallowCopy(base, strict) {\n  if (isMap(base)) {\n    return new Map(base);\n  }\n  if (isSet(base)) {\n    return new Set(base);\n  }\n  if (Array.isArray(base))\n    return Array.prototype.slice.call(base);\n  if (!strict && isPlainObject(base)) {\n    if (!getPrototypeOf(base)) {\n      const obj = /* @__PURE__ */ Object.create(null);\n      return Object.assign(obj, base);\n    }\n    return { ...base };\n  }\n  const descriptors = Object.getOwnPropertyDescriptors(base);\n  delete descriptors[DRAFT_STATE];\n  let keys = Reflect.ownKeys(descriptors);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const desc = descriptors[key];\n    if (desc.writable === false) {\n      desc.writable = true;\n      desc.configurable = true;\n    }\n    if (desc.get || desc.set)\n      descriptors[key] = {\n        configurable: true,\n        writable: true,\n        // could live with !!desc.set as well here...\n        enumerable: desc.enumerable,\n        value: base[key]\n      };\n  }\n  return Object.create(getPrototypeOf(base), descriptors);\n}\nfunction freeze(obj, deep = false) {\n  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))\n    return obj;\n  if (getArchtype(obj) > 1) {\n    obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n  }\n  Object.freeze(obj);\n  if (deep)\n    each(obj, (_key, value) => freeze(value, true), true);\n  return obj;\n}\nfunction dontMutateFrozenCollections() {\n  die(2);\n}\nfunction isFrozen(obj) {\n  return Object.isFrozen(obj);\n}\n\n// src/utils/plugins.ts\nvar plugins = {};\nfunction getPlugin(pluginKey) {\n  const plugin = plugins[pluginKey];\n  if (!plugin) {\n    die(0, pluginKey);\n  }\n  return plugin;\n}\n\n// src/core/scope.ts\nvar currentScope;\nfunction getCurrentScope() {\n  return currentScope;\n}\nfunction createScope(parent_, immer_) {\n  return {\n    drafts_: [],\n    parent_,\n    immer_,\n    // Whenever the modified draft contains a draft from another scope, we\n    // need to prevent auto-freezing so the unowned draft can be finalized.\n    canAutoFreeze_: true,\n    unfinalizedDrafts_: 0\n  };\n}\nfunction usePatchesInScope(scope, patchListener) {\n  if (patchListener) {\n    getPlugin(\"Patches\");\n    scope.patches_ = [];\n    scope.inversePatches_ = [];\n    scope.patchListener_ = patchListener;\n  }\n}\nfunction revokeScope(scope) {\n  leaveScope(scope);\n  scope.drafts_.forEach(revokeDraft);\n  scope.drafts_ = null;\n}\nfunction leaveScope(scope) {\n  if (scope === currentScope) {\n    currentScope = scope.parent_;\n  }\n}\nfunction enterScope(immer2) {\n  return currentScope = createScope(currentScope, immer2);\n}\nfunction revokeDraft(draft) {\n  const state = draft[DRAFT_STATE];\n  if (state.type_ === 0 /* Object */ || state.type_ === 1 /* Array */)\n    state.revoke_();\n  else\n    state.revoked_ = true;\n}\n\n// src/core/finalize.ts\nfunction processResult(result, scope) {\n  scope.unfinalizedDrafts_ = scope.drafts_.length;\n  const baseDraft = scope.drafts_[0];\n  const isReplaced = result !== void 0 && result !== baseDraft;\n  if (isReplaced) {\n    if (baseDraft[DRAFT_STATE].modified_) {\n      revokeScope(scope);\n      die(4);\n    }\n    if (isDraftable(result)) {\n      result = finalize(scope, result);\n      if (!scope.parent_)\n        maybeFreeze(scope, result);\n    }\n    if (scope.patches_) {\n      getPlugin(\"Patches\").generateReplacementPatches_(\n        baseDraft[DRAFT_STATE].base_,\n        result,\n        scope.patches_,\n        scope.inversePatches_\n      );\n    }\n  } else {\n    result = finalize(scope, baseDraft, []);\n  }\n  revokeScope(scope);\n  if (scope.patches_) {\n    scope.patchListener_(scope.patches_, scope.inversePatches_);\n  }\n  return result !== NOTHING ? result : void 0;\n}\nfunction finalize(rootScope, value, path) {\n  if (isFrozen(value))\n    return value;\n  const state = value[DRAFT_STATE];\n  if (!state) {\n    each(\n      value,\n      (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path),\n      true\n      // See #590, don't recurse into non-enumerable of non drafted objects\n    );\n    return value;\n  }\n  if (state.scope_ !== rootScope)\n    return value;\n  if (!state.modified_) {\n    maybeFreeze(rootScope, state.base_, true);\n    return state.base_;\n  }\n  if (!state.finalized_) {\n    state.finalized_ = true;\n    state.scope_.unfinalizedDrafts_--;\n    const result = state.copy_;\n    let resultEach = result;\n    let isSet2 = false;\n    if (state.type_ === 3 /* Set */) {\n      resultEach = new Set(result);\n      result.clear();\n      isSet2 = true;\n    }\n    each(\n      resultEach,\n      (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path, isSet2)\n    );\n    maybeFreeze(rootScope, result, false);\n    if (path && rootScope.patches_) {\n      getPlugin(\"Patches\").generatePatches_(\n        state,\n        path,\n        rootScope.patches_,\n        rootScope.inversePatches_\n      );\n    }\n  }\n  return state.copy_;\n}\nfunction finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {\n  if (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n    die(5);\n  if (isDraft(childValue)) {\n    const path = rootPath && parentState && parentState.type_ !== 3 /* Set */ && // Set objects are atomic since they have no keys.\n    !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;\n    const res = finalize(rootScope, childValue, path);\n    set(targetObject, prop, res);\n    if (isDraft(res)) {\n      rootScope.canAutoFreeze_ = false;\n    } else\n      return;\n  } else if (targetIsSet) {\n    targetObject.add(childValue);\n  }\n  if (isDraftable(childValue) && !isFrozen(childValue)) {\n    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n      return;\n    }\n    finalize(rootScope, childValue);\n    if (!parentState || !parentState.scope_.parent_)\n      maybeFreeze(rootScope, childValue);\n  }\n}\nfunction maybeFreeze(scope, value, deep = false) {\n  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n    freeze(value, deep);\n  }\n}\n\n// src/core/proxy.ts\nfunction createProxyProxy(base, parent) {\n  const isArray = Array.isArray(base);\n  const state = {\n    type_: isArray ? 1 /* Array */ : 0 /* Object */,\n    // Track which produce call this is associated with.\n    scope_: parent ? parent.scope_ : getCurrentScope(),\n    // True for both shallow and deep changes.\n    modified_: false,\n    // Used during finalization.\n    finalized_: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned_: {},\n    // The parent draft state.\n    parent_: parent,\n    // The base state.\n    base_: base,\n    // The base proxy.\n    draft_: null,\n    // set below\n    // The base copy with any updated values.\n    copy_: null,\n    // Called by the `produce` function.\n    revoke_: null,\n    isManual_: false\n  };\n  let target = state;\n  let traps = objectTraps;\n  if (isArray) {\n    target = [state];\n    traps = arrayTraps;\n  }\n  const { revoke, proxy } = Proxy.revocable(target, traps);\n  state.draft_ = proxy;\n  state.revoke_ = revoke;\n  return proxy;\n}\nvar objectTraps = {\n  get(state, prop) {\n    if (prop === DRAFT_STATE)\n      return state;\n    const source = latest(state);\n    if (!has(source, prop)) {\n      return readPropFromProto(state, source, prop);\n    }\n    const value = source[prop];\n    if (state.finalized_ || !isDraftable(value)) {\n      return value;\n    }\n    if (value === peek(state.base_, prop)) {\n      prepareCopy(state);\n      return state.copy_[prop] = createProxy(value, state);\n    }\n    return value;\n  },\n  has(state, prop) {\n    return prop in latest(state);\n  },\n  ownKeys(state) {\n    return Reflect.ownKeys(latest(state));\n  },\n  set(state, prop, value) {\n    const desc = getDescriptorFromProto(latest(state), prop);\n    if (desc?.set) {\n      desc.set.call(state.draft_, value);\n      return true;\n    }\n    if (!state.modified_) {\n      const current2 = peek(latest(state), prop);\n      const currentState = current2?.[DRAFT_STATE];\n      if (currentState && currentState.base_ === value) {\n        state.copy_[prop] = value;\n        state.assigned_[prop] = false;\n        return true;\n      }\n      if (is(value, current2) && (value !== void 0 || has(state.base_, prop)))\n        return true;\n      prepareCopy(state);\n      markChanged(state);\n    }\n    if (state.copy_[prop] === value && // special case: handle new props with value 'undefined'\n    (value !== void 0 || prop in state.copy_) || // special case: NaN\n    Number.isNaN(value) && Number.isNaN(state.copy_[prop]))\n      return true;\n    state.copy_[prop] = value;\n    state.assigned_[prop] = true;\n    return true;\n  },\n  deleteProperty(state, prop) {\n    if (peek(state.base_, prop) !== void 0 || prop in state.base_) {\n      state.assigned_[prop] = false;\n      prepareCopy(state);\n      markChanged(state);\n    } else {\n      delete state.assigned_[prop];\n    }\n    if (state.copy_) {\n      delete state.copy_[prop];\n    }\n    return true;\n  },\n  // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n  // the same guarantee in ES5 mode.\n  getOwnPropertyDescriptor(state, prop) {\n    const owner = latest(state);\n    const desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n    if (!desc)\n      return desc;\n    return {\n      writable: true,\n      configurable: state.type_ !== 1 /* Array */ || prop !== \"length\",\n      enumerable: desc.enumerable,\n      value: owner[prop]\n    };\n  },\n  defineProperty() {\n    die(11);\n  },\n  getPrototypeOf(state) {\n    return getPrototypeOf(state.base_);\n  },\n  setPrototypeOf() {\n    die(12);\n  }\n};\nvar arrayTraps = {};\neach(objectTraps, (key, fn) => {\n  arrayTraps[key] = function() {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\narrayTraps.deleteProperty = function(state, prop) {\n  if (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop)))\n    die(13);\n  return arrayTraps.set.call(this, state, prop, void 0);\n};\narrayTraps.set = function(state, prop, value) {\n  if (process.env.NODE_ENV !== \"production\" && prop !== \"length\" && isNaN(parseInt(prop)))\n    die(14);\n  return objectTraps.set.call(this, state[0], prop, value, state[0]);\n};\nfunction peek(draft, prop) {\n  const state = draft[DRAFT_STATE];\n  const source = state ? latest(state) : draft;\n  return source[prop];\n}\nfunction readPropFromProto(state, source, prop) {\n  const desc = getDescriptorFromProto(source, prop);\n  return desc ? `value` in desc ? desc.value : (\n    // This is a very special case, if the prop is a getter defined by the\n    // prototype, we should invoke it with the draft as context!\n    desc.get?.call(state.draft_)\n  ) : void 0;\n}\nfunction getDescriptorFromProto(source, prop) {\n  if (!(prop in source))\n    return void 0;\n  let proto = getPrototypeOf(source);\n  while (proto) {\n    const desc = Object.getOwnPropertyDescriptor(proto, prop);\n    if (desc)\n      return desc;\n    proto = getPrototypeOf(proto);\n  }\n  return void 0;\n}\nfunction markChanged(state) {\n  if (!state.modified_) {\n    state.modified_ = true;\n    if (state.parent_) {\n      markChanged(state.parent_);\n    }\n  }\n}\nfunction prepareCopy(state) {\n  if (!state.copy_) {\n    state.copy_ = shallowCopy(\n      state.base_,\n      state.scope_.immer_.useStrictShallowCopy_\n    );\n  }\n}\n\n// src/core/immerClass.ts\nvar Immer2 = class {\n  constructor(config) {\n    this.autoFreeze_ = true;\n    this.useStrictShallowCopy_ = false;\n    /**\n     * The `produce` function takes a value and a \"recipe function\" (whose\n     * return value often depends on the base state). The recipe function is\n     * free to mutate its first argument however it wants. All mutations are\n     * only ever applied to a __copy__ of the base state.\n     *\n     * Pass only a function to create a \"curried producer\" which relieves you\n     * from passing the recipe function every time.\n     *\n     * Only plain objects and arrays are made mutable. All other objects are\n     * considered uncopyable.\n     *\n     * Note: This function is __bound__ to its `Immer` instance.\n     *\n     * @param {any} base - the initial state\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\n     * @returns {any} a new state, or the initial state if nothing was modified\n     */\n    this.produce = (base, recipe, patchListener) => {\n      if (typeof base === \"function\" && typeof recipe !== \"function\") {\n        const defaultBase = recipe;\n        recipe = base;\n        const self = this;\n        return function curriedProduce(base2 = defaultBase, ...args) {\n          return self.produce(base2, (draft) => recipe.call(this, draft, ...args));\n        };\n      }\n      if (typeof recipe !== \"function\")\n        die(6);\n      if (patchListener !== void 0 && typeof patchListener !== \"function\")\n        die(7);\n      let result;\n      if (isDraftable(base)) {\n        const scope = enterScope(this);\n        const proxy = createProxy(base, void 0);\n        let hasError = true;\n        try {\n          result = recipe(proxy);\n          hasError = false;\n        } finally {\n          if (hasError)\n            revokeScope(scope);\n          else\n            leaveScope(scope);\n        }\n        usePatchesInScope(scope, patchListener);\n        return processResult(result, scope);\n      } else if (!base || typeof base !== \"object\") {\n        result = recipe(base);\n        if (result === void 0)\n          result = base;\n        if (result === NOTHING)\n          result = void 0;\n        if (this.autoFreeze_)\n          freeze(result, true);\n        if (patchListener) {\n          const p = [];\n          const ip = [];\n          getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\n          patchListener(p, ip);\n        }\n        return result;\n      } else\n        die(1, base);\n    };\n    this.produceWithPatches = (base, recipe) => {\n      if (typeof base === \"function\") {\n        return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));\n      }\n      let patches, inversePatches;\n      const result = this.produce(base, recipe, (p, ip) => {\n        patches = p;\n        inversePatches = ip;\n      });\n      return [result, patches, inversePatches];\n    };\n    if (typeof config?.autoFreeze === \"boolean\")\n      this.setAutoFreeze(config.autoFreeze);\n    if (typeof config?.useStrictShallowCopy === \"boolean\")\n      this.setUseStrictShallowCopy(config.useStrictShallowCopy);\n  }\n  createDraft(base) {\n    if (!isDraftable(base))\n      die(8);\n    if (isDraft(base))\n      base = current(base);\n    const scope = enterScope(this);\n    const proxy = createProxy(base, void 0);\n    proxy[DRAFT_STATE].isManual_ = true;\n    leaveScope(scope);\n    return proxy;\n  }\n  finishDraft(draft, patchListener) {\n    const state = draft && draft[DRAFT_STATE];\n    if (!state || !state.isManual_)\n      die(9);\n    const { scope_: scope } = state;\n    usePatchesInScope(scope, patchListener);\n    return processResult(void 0, scope);\n  }\n  /**\n   * Pass true to automatically freeze all copies created by Immer.\n   *\n   * By default, auto-freezing is enabled.\n   */\n  setAutoFreeze(value) {\n    this.autoFreeze_ = value;\n  }\n  /**\n   * Pass true to enable strict shallow copy.\n   *\n   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n   */\n  setUseStrictShallowCopy(value) {\n    this.useStrictShallowCopy_ = value;\n  }\n  applyPatches(base, patches) {\n    let i;\n    for (i = patches.length - 1; i >= 0; i--) {\n      const patch = patches[i];\n      if (patch.path.length === 0 && patch.op === \"replace\") {\n        base = patch.value;\n        break;\n      }\n    }\n    if (i > -1) {\n      patches = patches.slice(i + 1);\n    }\n    const applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\n    if (isDraft(base)) {\n      return applyPatchesImpl(base, patches);\n    }\n    return this.produce(\n      base,\n      (draft) => applyPatchesImpl(draft, patches)\n    );\n  }\n};\nfunction createProxy(value, parent) {\n  const draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : createProxyProxy(value, parent);\n  const scope = parent ? parent.scope_ : getCurrentScope();\n  scope.drafts_.push(draft);\n  return draft;\n}\n\n// src/core/current.ts\nfunction current(value) {\n  if (!isDraft(value))\n    die(10, value);\n  return currentImpl(value);\n}\nfunction currentImpl(value) {\n  if (!isDraftable(value) || isFrozen(value))\n    return value;\n  const state = value[DRAFT_STATE];\n  let copy;\n  if (state) {\n    if (!state.modified_)\n      return state.base_;\n    state.finalized_ = true;\n    copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);\n  } else {\n    copy = shallowCopy(value, true);\n  }\n  each(copy, (key, childValue) => {\n    set(copy, key, currentImpl(childValue));\n  });\n  if (state) {\n    state.finalized_ = false;\n  }\n  return copy;\n}\n\n// src/immer.ts\nvar immer = new Immer2();\nvar produce = immer.produce;\nexport {\n  produce\n};\n", "import { produce } from \"../produce.js\";\n\n/**\n * @typedef {Object} Observer\n * @description The observer object or function.\n * @property {Function} next - Function to handle new values.\n * @property {Function} error - Function to handle errors.\n * @property {Function} complete - Function to handle completion.\n */\n\n/**\n * @class\n * @description Class representing a Subscriber.\n */\nclass Subscriber {\n  /**\n   * @constructor\n   * @description Creates a new Subscriber instance.\n   * @param {Observer|Function} observer - The observer object or function.\n   */\n  constructor(observer) {\n    if (typeof observer === 'function') {\n      this.observer = { next: observer };\n    } else {\n      this.observer = observer;\n    }\n    this.teardowns = [];\n    if (typeof AbortController !== 'undefined') {\n      this.controller = new AbortController();\n      this.signal = this.controller.signal;\n    }\n    this.isUnsubscribed = false;\n  }\n\n  /**\n   * @method\n   * @description Notifies the observer of a new value.\n   * @param {any} result - The result to pass to the observer's next method.\n   * @example\n   * subscriber.next('Hello, world!');\n   */\n  next(result) {\n    if (!this.isUnsubscribed && this.observer.next) {\n      this.observer.next(result);\n    }\n  }\n\n  /**\n   * @method\n   * @description Notifies the observer that the observable has completed and no more data will be emitted.\n   * @example\n   * subscriber.complete();\n   */\n  complete() {\n    if (!this.isUnsubscribed) {\n      if (this.observer.complete) {\n        this.observer.complete();\n      }\n      this.unsubscribe();\n    }\n  }\n\n  /**\n   * @method\n   * @description Notifies the observer that an error has occurred.\n   * @param {Error} error - The error to pass to the observer's error method.\n   * @example\n   * subscriber.error(new Error('Something went wrong'));\n   */\n  error(error) {\n    if (!this.isUnsubscribed) {\n      if (this.observer.error) {\n        this.observer.error(error);\n      }\n      this.unsubscribe();\n    }\n  }\n\n  /**\n   * @method\n   * @description Adds a teardown function to the teardowns array.\n   * @param {Function} teardown - The teardown function to add to the teardowns array.\n   */\n  addTeardown(teardown) {\n    this.teardowns.push(teardown);\n  }\n\n  /**\n   * @method\n   * @description Unsubscribes from the observable, preventing any further notifications to the observer and triggering any teardown logic.\n   * @example\n   * subscriber.unsubscribe();\n   */\n  unsubscribe() {\n    if (!this.isUnsubscribed) {\n      this.isUnsubscribed = true;\n      if (this.controller) {\n        this.controller.abort();\n      }\n      this.teardowns.forEach(teardown => {\n        if (typeof teardown !== 'function') {\n          throw new Error('[Cami.js] Teardown must be a function. Please implement a teardown function in your subscriber.');\n        }\n        teardown();\n      });\n    }\n  }\n}\n\n/**\n * @class\n * @description Class representing an Observable.\n */\nclass Observable {\n  /**\n   * @constructor\n   * @description Creates a new Observable instance.\n   * @param {Function} subscribeCallback - The callback function to call when a new observer subscribes.\n   */\n  constructor(subscribeCallback = () => () => {}) {\n    this.__observers = [];\n    this.subscribeCallback = subscribeCallback;\n  }\n\n  /**\n   * @method\n   * @description Subscribes an observer to the observable.\n   * @param {Observer|Function} observerOrNext - The observer to subscribe or the next function. Default is an empty function.\n   * @param {Function} error - The error function. Default is an empty function.\n   * @param {Function} complete - The complete function. Default is an empty function.\n   * @returns {Object} An object containing an unsubscribe method to stop receiving updates.\n   * @example\n   * const observable = new Observable();\n   * const subscription = observable.subscribe({\n   *   next: value => console.log(value),\n   *   error: err => console.error(err),\n   *   complete: () => console.log('Completed'),\n   * });\n   */\n  subscribe(observerOrNext = () => {}, error = () => {}, complete = () => {}) {\n    let observer;\n\n    if (typeof observerOrNext === 'function') {\n      observer = {\n        next: observerOrNext,\n        error,\n        complete,\n      };\n    } else if (typeof observerOrNext === 'object') {\n      observer = observerOrNext;\n    } else {\n      throw new Error('[Cami.js] First argument to subscribe must be a next callback or an observer object');\n    }\n\n    const subscriber = new Subscriber(observer);\n    let teardown = () => {};\n\n    try {\n      teardown = this.subscribeCallback(subscriber);\n    } catch (error) {\n      if (subscriber.error) {\n        subscriber.error(error);\n      } else {\n        console.error('[Cami.js] Error in Subscriber:', error);\n      }\n      return;\n    }\n\n    subscriber.addTeardown(teardown);\n    this.__observers.push(subscriber);\n\n    return {\n      unsubscribe: () => subscriber.unsubscribe(),\n      complete: () => subscriber.complete(),\n      error: (err) => subscriber.error(err),\n    };\n  }\n\n  /**\n   * @method\n   * @description Passes a value to the observer's next method.\n   * @param {*} value - The value to be passed to the observer's next method.\n   * @example\n   * const observable = new Observable();\n   * observable.next('Hello, world!');\n   */\n  next(value) {\n    this.__observers.forEach(observer => {\n      observer.next(value);\n    });\n  }\n\n  /**\n   * @method\n   * @description Passes an error to the observer's error method.\n   * @param {*} error - The error to be passed to the observer's error method.\n   * @example\n   * const observable = new Observable();\n   * observable.error(new Error('Something went wrong'));\n   */\n  error(error) {\n    this.__observers.forEach(observer => {\n      observer.error(error);\n    });\n  }\n\n  /**\n   * @method\n   * @description Calls the complete method on all observers.\n   * @example\n   * const observable = new Observable();\n   * observable.complete();\n   */\n  complete() {\n    this.__observers.forEach(observer => {\n      observer.complete();\n    });\n  }\n\n  /**\n   * @method\n   * @description Subscribes an observer with a next function to the observable.\n   * @param {Function} callbackFn - The callback function to call when a new value is emitted.\n   * @returns {Object} An object containing an unsubscribe method to stop receiving updates.\n   * @example\n   * const observable = new Observable();\n   * const subscription = observable.onValue(value => console.log(value));\n   */\n  onValue(callbackFn) {\n    return this.subscribe({\n      next: callbackFn\n    });\n  }\n\n  /**\n   * @method\n   * @description Subscribes an observer with an error function to the observable.\n   * @param {Function} callbackFn - The callback function to call when an error is emitted.\n   * @returns {Object} An object containing an unsubscribe method to stop receiving updates.\n   * @example\n   * const observable = new Observable();\n   * const subscription = observable.onError(err => console.error(err));\n   */\n  onError(callbackFn) {\n    return this.subscribe({\n      error: callbackFn\n    });\n  }\n\n  /**\n   * @method\n   * @description Subscribes an observer with a complete function to the observable.\n   * @param {Function} callbackFn - The callback function to call when the observable completes.\n   * @returns {Object} An object containing an unsubscribe method to stop receiving updates.\n   * @example\n   * const observable = new Observable();\n   * const subscription = observable.onEnd(() => console.log('Completed'));\n   */\n  onEnd(callbackFn) {\n    return this.subscribe({\n      complete: callbackFn\n    });\n  }\n\n  /**\n   * @method\n   * @description Returns an AsyncIterator which allows asynchronous iteration over emitted values.\n   * @returns {AsyncIterator} An object that conforms to the AsyncIterator protocol.\n   * @example\n   * const observable = new Observable();\n   * for await (const value of observable) {\n   *   console.log(value);\n   * }\n   */\n  [Symbol.asyncIterator]() {\n    let observer;\n    let resolve;\n    let promise = new Promise(r => (resolve = r));\n\n    observer = {\n      next: value => {\n        resolve({ value, done: false });\n        promise = new Promise(r => (resolve = r));\n      },\n      complete: () => {\n        resolve({ done: true });\n      },\n      error: err => {\n        throw err;\n      },\n    };\n\n    this.subscribe(observer);\n\n    return {\n      next: () => promise,\n    };\n  }\n}\n\nexport { Observable };\n", "/**\n * @private\n * @type {Object}\n * @property {boolean} events - A flag to control event firing\n * @description This is the default configuration for Cami.js\n */\nconst __config = {\n  events: {\n    __state: true,\n    get isEnabled() { return this.__state; },\n    enable: function() { this.__state = true; },\n    disable: function() { this.__state = false; }\n  },\n  debug: {\n    __state: false,\n    get isEnabled() { return this.__state; },\n    enable: function() {\n      console.log('Cami.js debug mode enabled');\n      this.__state = true;\n    },\n    disable: function() { this.__state = false; }\n  }\n};\n\nexport { __config };\n", "import { __config } from './config.js';\n\n/**\n * @private\n * @function\n * Logs the trace of a function execution if debug mode is enabled.\n *\n * @param {string} functionName - The name of the function to trace.\n * @param {...any} messages - Additional messages to log in the console.\n *\n * @example\n * __trace('myFunction', 'This is a test message');\n */\nfunction __trace(functionName, ...messages) {\n  if (__config.debug.isEnabled) {\n    if (functionName === 'cami:state:change') {\n      console.groupCollapsed(`%c[${functionName}]`, 'color: #666666; padding: 1px 3px; border: 1px solid #bbbbbb; border-radius: 2px; font-size: 90%; display: inline-block;', `${messages[0]} changed`);\n      console.log(`oldValue:`, messages[1]);\n      console.log(`newValue:`, messages[2]);\n    } else {\n      console.groupCollapsed(`%c[${functionName}]`, 'color: #666666; padding: 1px 3px; border: 1px solid #bbbbbb; border-radius: 2px; font-size: 90%; display: inline-block;', ...messages);\n    }\n\n    console.trace();\n    console.groupEnd();\n  }\n}\n\nexport { __trace };\n", "import { Observable } from './observable.js';\nimport { produce } from \"../produce.js\";\nimport { __config } from '../config.js';\nimport { __trace } from '../trace.js';\n\n/**\n * @class ObservableStore\n * @extends {Observable}\n * @description This class is used to create a store that can be observed for changes. It supports registering actions and middleware, making it flexible for various use cases.\n * @example\n * ```javascript\n * // Creating a store with initial state and registering actions\n * const CartStore = cami.store({\n *   cartItems: [],\n * });\n *\n * CartStore.register('add', (state, product) => {\n *   const cartItem = { ...product, cartItemId: Date.now() };\n *   state.cartItems.push(cartItem);\n * });\n *\n * CartStore.register('remove', (state, product) => {\n *   state.cartItems = state.cartItems.filter(item => item.cartItemId !== product.cartItemId);\n * });\n *\n * // Using middleware for logging\n * const loggerMiddleware = (context) => {\n *   console.log(`Action ${context.action} was dispatched with payload:`, context.payload);\n * };\n * CartStore.use(loggerMiddleware);\n * ```\n */\nclass ObservableStore extends Observable {\n  constructor(initialState) {\n    if (typeof initialState !== 'object' || initialState === null) {\n      throw new TypeError('[Cami.js] initialState must be an object');\n    }\n\n    super(subscriber => {\n      this.__subscriber = subscriber;\n      return () => { this.__subscriber = null; };\n    });\n\n    this.state = new Proxy(initialState, {\n      get: (target, property) => {\n        return target[property];\n      },\n      set: (target, property, value) => {\n        target[property] = value;\n        this.__observers.forEach(observer => observer.next(this.state));\n        if (this.devTools) {\n          this.devTools.send(property, this.state);\n        }\n        return true;\n      }\n    });\n\n    this.reducers = {};\n    this.middlewares = [];\n    this.devTools = this.__connectToDevTools();\n    this.dispatchQueue = [];\n    this.isDispatching = false;\n    this.queryCache = new Map();\n    this.queryFunctions = new Map();\n    this.queries = {};\n    this.intervals = new Map();\n    this.focusHandlers = new Map();\n    this.reconnectHandlers = new Map();\n    this.gcTimeouts = new Map();\n\n    Object.keys(initialState).forEach(key => {\n      if (typeof initialState[key] === 'function') {\n        this.register(key, initialState[key]);\n      } else {\n        this.state[key] = initialState[key];\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method _applyMiddleware\n   * @param {string} action - The action type\n   * @param {...any} args - The arguments to pass to the action\n   * @returns {void}\n   * @description This method applies all registered middlewares to the given action and arguments.\n   */\n  __applyMiddleware(action, ...args) {\n    const context = {\n      state: this.state,\n      action,\n      payload: args,\n    };\n\n    for (const middleware of this.middlewares) {\n      middleware(context);\n    }\n  }\n\n  /**\n   * @private\n   * @method _connectToDevTools\n   * @returns {Object|null} - Returns the devTools object if available, else null\n   * @description This method connects the store to the Redux DevTools extension if it is available.\n   */\n  __connectToDevTools() {\n    if (typeof window !== 'undefined' && window['__REDUX_DEVTOOLS_EXTENSION__']) {\n      const devTools = window['__REDUX_DEVTOOLS_EXTENSION__'].connect();\n      devTools.init(this.state);\n      return devTools;\n    }\n    return null;\n  }\n\n  /**\n   * @method use\n   * @memberof ObservableStore\n   * @param {Function} middleware - The middleware function to use\n   * @description This method registers a middleware function to be used with the store. Useful if you like redux-style middleware.\n   * @example\n   * ```javascript\n   * const loggerMiddleware = (context) => {\n   *   console.log(`Action ${context.action} was dispatched with payload:`, context.payload);\n   * };\n   * CartStore.use(loggerMiddleware);\n   * ```\n   */\n  use(middleware) {\n    this.middlewares.push(middleware);\n  }\n\n\n  /**\n   * @method getState\n   * @memberof ObservableStore\n   * @returns {Object} - The current state of the store.\n   * @description Retrieves the current state of the store. This method is crucial in asynchronous operations or event-driven environments to ensure the most current state is accessed, as the state might change frequently due to user interactions or other asynchronous updates.\n   */\n  getState() {\n    return this.state;\n  }\n  /**\n   * @method register\n   * @memberof ObservableStore\n   * @param {string} action - The action type\n   * @param {Function} reducer - The reducer function for the action\n   * @throws {Error} - Throws an error if the action type is already registered\n   * @description This method registers a reducer function for a given action type. Useful if you like redux-style reducers.\n   * @example\n   * ```javascript\n   * // Creating a store with initial state and registering actions\n   * const CartStore = cami.store({\n   *   cartItems: [],\n   * });\n   *\n   * CartStore.register('add', (state, product) => {\n   *   const cartItem = { ...product, cartItemId: Date.now() };\n   *   state.cartItems.push(cartItem);\n   * });\n   *\n   * CartStore.register('remove', (state, product) => {\n   *   state.cartItems = state.cartItems.filter(item => item.cartItemId !== product.cartItemId);\n   * });\n   *\n   * ```\n   */\n  register(action, reducer) {\n    if (this.reducers[action]) {\n      throw new Error(`[Cami.js] Action type ${action} is already registered.`);\n    }\n    this.reducers[action] = reducer;\n\n    this[action] = (...args) => {\n      this.dispatch(action, ...args);\n    };\n  }\n\n  /**\n   * @method query\n   * @memberof ObservableStore\n   * @param {string} queryName - The name of the query.\n   * @param {Object} config - The configuration object for the query, containing the following properties:\n   * @param {string} config.queryKey - The unique key for the query.\n   * @param {Function} config.queryFn - The asynchronous query function that returns a promise.\n   * @param {number} [config.staleTime=0] - Optional. The time in milliseconds after which the query is considered stale. Defaults to 0.\n   * @param {boolean} [config.refetchOnWindowFocus=true] - Optional. Whether to refetch the query when the window regains focus. Defaults to true.\n   * @param {boolean} [config.refetchOnReconnect=true] - Optional. Whether to refetch the query when the network reconnects. Defaults to true.\n   * @param {number|null} [config.refetchInterval=null] - Optional. The interval in milliseconds at which to refetch the query. Defaults to null.\n   * @param {number} [config.gcTime=300000] - Optional. The time in milliseconds after which the query is garbage collected. Defaults to 300000 (5 minutes).\n   * @param {number} [config.retry=3] - Optional. The number of times to retry the query on error. Defaults to 3.\n   * @param {Function} [config.retryDelay=(attempt) => Math.pow(2, attempt) * 1000] - Optional. A function that returns the delay in milliseconds for each retry attempt. Defaults to a function that calculates an exponential backoff based on the attempt number.\n   * @description Registers an asynchronous query with the specified configuration.\n   * @example\n   * ```javascript\n   * // Register a query to fetch posts\n   * appStore.query('posts/fetchAll', {\n   *   queryKey: 'posts/fetchAll',\n   *   queryFn: () => fetch('https://api.camijs.com/posts').then(res => res.json()),\n   *   refetchOnWindowFocus: true,\n   * });\n   *\n   * // Register actions for pending, success, and error states of the query\n   * appStore.register('posts/fetchAll/pending', (state, payload) => {\n   *   state.isLoading = true;\n   *   state.posts = [];\n   *   state.error = null;\n   * });\n   *\n   * appStore.register('posts/fetchAll/success', (state, payload) => {\n   *   state.posts = payload;\n   *   state.isLoading = false;\n   *   state.error = null;\n   * });\n   *\n   * appStore.register('posts/fetchAll/error', (state, payload) => {\n   *   state.error = payload;\n   *   state.isLoading = false;\n   *   state.posts = [];\n   * });\n   *\n   * // Fetch all posts\n   * appStore.fetch('posts/fetchAll');\n   *\n   * // Subscribe to updates\n   * appStore.subscribe(newState => {\n   *   console.log('New state:', newState);\n   * });\n   * ```\n   */\n  query(queryName, config) {\n    const {\n      queryKey,\n      queryFn,\n      staleTime = 0,\n      refetchOnWindowFocus = true,\n      refetchInterval = null,\n      refetchOnReconnect = true,\n      gcTime = 1000 * 60 * 5,\n      retry = 3,\n      retryDelay = (attempt) => Math.pow(2, attempt) * 1000,\n    } = config;\n\n    // Register the query with minimal configuration\n    this.queries[queryName] = {\n      queryKey,\n      queryFn,\n      staleTime,\n      refetchOnWindowFocus,\n      refetchInterval,\n      refetchOnReconnect,\n      gcTime,\n      retry,\n      retryDelay,\n    };\n\n    this.queryFunctions.set(queryKey, queryFn);\n\n    __trace(`query`, `Starting query with key: ${queryName}`);\n\n    if (refetchInterval !== null) {\n      const intervalId = setInterval(() => {\n        __trace(`query`, `Interval expired, refetching query: ${queryName}`);\n        this.fetch(queryName).catch(error => console.error(`Error refetching query ${queryName}:`, error));\n      }, refetchInterval);\n      this.intervals[queryName] = intervalId;\n    }\n\n    if (refetchOnWindowFocus) {\n      const focusHandler = () => {\n        __trace(`query`, `Window focus detected, refetching query: ${queryName}`);\n        this.fetch(queryName).catch(error => console.error(`Error refetching query ${queryName} on window focus:`, error));\n      };\n      window.addEventListener('focus', focusHandler);\n      this.focusHandlers[queryName] = focusHandler;\n    }\n\n    if (refetchOnReconnect) {\n      const reconnectHandler = () => {\n        __trace(`query`, `Reconnect detected, refetching query: ${queryName}`);\n        this.fetch(queryName).catch(error => console.error(`Error refetching query ${queryName} on reconnect:`, error));\n      };\n      window.addEventListener('online', reconnectHandler);\n      this.reconnectHandlers[queryName] = reconnectHandler;\n    }\n\n    const gcTimeout = setTimeout(() => {\n      __trace(`query`, `Garbage collection timeout expired, refetching query: ${queryName}`);\n      this.fetch(queryName).catch(error => console.error(`Error refetching query ${queryName} on gc timeout:`, error));\n    }, gcTime);\n\n    this.gcTimeouts[queryName] = gcTimeout;\n\n    this[queryName] = (...args) => {\n        return this.fetch(queryName, ...args);\n    };\n  }\n\n  /**\n   * @method fetch\n   * @memberof ObservableStore\n   * @param {string} queryName - The name of the query to fetch data for.\n   * @param {...any} args - Arguments to pass to the query function.\n   * @returns {Promise<any>} A promise that resolves with the fetched data.\n   * @description Fetches data for a given query name, utilizing cache if available and not stale.\n   * If data is stale or not in cache, it fetches new data using the query function.\n   * @example\n   * ```javascript\n   * // Register a query to fetch posts\n   * appStore.query('posts/fetchAll', {\n   *   queryKey: 'posts/fetchAll',\n   *   queryFn: () => fetch('https://api.camijs.com/posts').then(res => res.json()),\n   *   refetchOnWindowFocus: true,\n   * });\n   *\n   * // Register actions for pending, success, and error states of the query\n   * appStore.register('posts/fetchAll/pending', (state, payload) => {\n   *   state.isLoading = true;\n   *   state.posts = [];\n   *   state.error = null;\n   * });\n   *\n   * appStore.register('posts/fetchAll/success', (state, payload) => {\n   *   state.posts = payload;\n   *   state.isLoading = false;\n   *   state.error = null;\n   * });\n   *\n   * appStore.register('posts/fetchAll/error', (state, payload) => {\n   *   state.error = payload;\n   *   state.isLoading = false;\n   *   state.posts = [];\n   * });\n   *\n   * // Fetch all posts\n   * appStore.fetch('posts/fetchAll');\n   *\n   * // Subscribe to updates\n   * appStore.subscribe(newState => {\n   *   console.log('New state:', newState);\n   * });\n   * ```\n   */\n  fetch(queryName, ...args) {\n    const query = this.queries[queryName];\n    if (!query) {\n        throw new Error(`[Cami.js] No query found for name: ${queryName}`);\n    }\n\n    const { queryKey, queryFn, staleTime, retry, retryDelay } = query;\n    const cacheKey = Array.isArray(queryKey) ? queryKey.join(':') : queryKey;\n    const cachedData = this.queryCache.get(cacheKey);\n\n    if (cachedData && !this._isStale(cachedData, staleTime)) {\n      __trace(`fetch`, `Returning cached data for: ${queryName} with cacheKey: ${cacheKey}`);\n      return Promise.resolve(cachedData.data);\n    }\n\n    __trace(`fetch`, `Data is stale or not cached, fetching new data for: ${queryName}`);\n    this.dispatch(`${queryName}/pending`);\n    return this._fetchWithRetry(queryFn, args, retry, retryDelay)\n      .then((data) => {\n        this.queryCache.set(cacheKey, { data, timestamp: Date.now() });\n        this.dispatch(`${queryName}/success`, data);\n        return data;\n      })\n      .catch((error) => {\n        this.dispatch(`${queryName}/error`, error);\n        throw error;\n      });\n  }\n\n  /**\n   * @method invalidateQueries\n   * @memberof ObservableStore\n   * @param {string} queryName - The name of the query to invalidate.\n   * @description Invalidates the cache and any associated intervals or event listeners for a given query name.\n   */\n  invalidateQueries(queryName) {\n    const query = this.queries[queryName];\n    if (!query) return;\n\n    const cacheKey = Array.isArray(query.queryKey) ? query.queryKey.join(':') : query.queryKey;\n\n    __trace(`invalidateQueries`, `Invalidating query with key: ${queryName}`);\n\n    if (this.intervals[queryName]) {\n      clearInterval(this.intervals[queryName]);\n      delete this.intervals[queryName];\n    }\n\n    if (this.focusHandlers[queryName]) {\n      window.removeEventListener('focus', this.focusHandlers[queryName]);\n      delete this.focusHandlers[queryName];\n    }\n\n    if (this.reconnectHandlers[queryName]) {\n      window.removeEventListener('online', this.reconnectHandlers[queryName]);\n      delete this.reconnectHandlers[queryName];\n    }\n\n    if (this.gcTimeouts[queryName]) {\n      clearTimeout(this.gcTimeouts[queryName]);\n      delete this.gcTimeouts[queryName];\n    }\n\n    this.queryCache.delete(cacheKey);\n  }\n\n  /**\n   * @private\n   * @method fetchWithRetry\n   * @param {Function} queryFn - The query function to execute.\n   * @param {Array} args - The arguments to pass to the query function.\n   * @param {number} retries - The number of retries remaining.\n   * @param {Function} retryDelay - A function that returns the delay in milliseconds for each retry attempt.\n   * @returns {Promise} A promise that resolves to the query result.\n   * @description Executes the query function with retries and exponential backoff.\n   */\n  _fetchWithRetry(queryFn, args, retries, retryDelay) {\n    return queryFn(...args).catch((error) => {\n      if (retries === 0) {\n        throw error;\n      }\n      const delay = retryDelay(retries);\n      return new Promise((resolve) => setTimeout(resolve, delay)).then(() =>\n        __trace(`fetchWithRetry`, `Retrying query with key: ${queryName}`),\n        this._fetchWithRetry(queryFn, args, retries - 1, retryDelay)\n      );\n    });\n  }\n\n  /**\n   * @private\n   * @method isStale\n   * @param {Object} cachedData - The cached data object.\n   * @param {number} staleTime - The stale time in milliseconds.\n   * @returns {boolean} True if the cached data is stale, false otherwise.\n   * @description Checks if the cached data is stale based on the stale time.\n   */\n  _isStale(cachedData, staleTime) {\n    const isDataStale = Date.now() - cachedData.timestamp > staleTime;\n    __trace(`isStale`, `isDataStale: ${isDataStale} (Current Time: ${Date.now()}, Data Timestamp: ${cachedData.timestamp}, Stale Time: ${staleTime})`);\n    return isDataStale;\n  }\n\n\n  /**\n   * Dispatches an action or a function to the store, updating its state accordingly.\n   * This method is central to the store's operation, allowing for state changes in response to actions.\n   *\n   * @method dispatch\n   * @memberof ObservableStore\n   * @param {string|Function} action - The action type as a string or a function that performs custom dispatch logic.\n   * @param {Object} payload - The data to be passed along with the action.\n   * @throws {Error} If the action type is not a string when expected.\n   * @description Use this method to dispatch redux-style actions or flux actions, triggering state updates.\n   * @example\n   * ```javascript\n   * // Dispatching an action with a payload\n   * CartStore.dispatch('add', { id: 1, name: 'Product 1', quantity: 2 });\n   * ```\n   */\n  dispatch(action, payload) {\n    this.dispatchQueue.push({ action, payload });\n    if (!this.isDispatching) {\n      this._processDispatchQueue();\n    }\n  }\n\n  /**\n   * Processes the dispatch queue, executing each action in sequence.\n   * This method ensures that actions are dispatched one at a time, in the order they were called.\n   *\n   * @private\n   */\n  _processDispatchQueue() {\n    while (this.dispatchQueue.length > 0) {\n      const { action, payload } = this.dispatchQueue.shift();\n      this.isDispatching = true;\n      this._dispatch(action, payload);\n      this.isDispatching = false;\n    }\n  }\n\n  /**\n   * Performs the actual dispatch of an action, invoking the corresponding reducer and updating the state.\n   * This method supports both string actions and function actions, allowing for flexible dispatch mechanisms.\n   *\n   * @private\n   * @param {string|Function} action - The action to dispatch.\n   * @param {Object} payload - The payload associated with the action.\n   * @throws {Error} If the action type is not a string or a function.\n   */\n  _dispatch(action, payload) {\n    if (typeof action === 'function') {\n      return action(this._dispatch.bind(this), () => this.state);\n    }\n\n    if (typeof action !== 'string') {\n      throw new Error(`[Cami.js] Action type must be a string. Got: ${typeof action}`);\n    }\n\n    const reducer = this.reducers[action];\n    if (!reducer) {\n      console.warn(`No reducer found for action ${action}`);\n      return;\n    }\n\n    this.__applyMiddleware(action, payload);\n\n    const oldState = this.state;\n    const newState = produce(this.state, draft => {\n      reducer(draft, payload);\n    });\n\n    this.state = newState;\n    this.__observers.forEach(observer => observer.next(this.state));\n\n    if (this.devTools) {\n      this.devTools.send(action, this.state);\n    }\n\n    // Custom event dispatching and tracing\n    if (oldState !== newState) {\n      if (__config.events.isEnabled && typeof window !== 'undefined') {\n        const event = new CustomEvent('cami:store:state:change', {\n          detail: {\n            action: action,\n            oldValue: oldState,\n            newValue: newState\n          }\n        });\n        window.dispatchEvent(event);\n      }\n\n      __trace('cami:store:state:change', action, oldState, newState);\n    }\n  }\n}\n\n/**\n * Creates a slice of the store with its own state and actions, namespaced to avoid conflicts.\n *\n * @function slice\n * @param {Object} store - The main store instance.\n * @param {Object} options - The options for creating the slice.\n * @param {string} options.name - The name of the slice.\n * @param {Object} options.state - The initial state of the slice.\n * @param {Object} options.actions - The actions for the slice.\n * @returns {Object} - An object containing the action methods for the slice, including getState, actions, and subscribe methods.\n *\n * @example\n * const cartSlice = slice(appStore, {\n *   name: 'cart',\n *   state: {\n *     cartItems: [],\n *   },\n *   actions: {\n *     add(state, product) {\n *       const newItem = { ...product, id: Date.now() };\n *       state.cartItems.push(newItem);\n *     },\n *     remove(state, product) {\n *       state.cartItems = state.cartItems.filter(item => item.id !== product.id);\n *     },\n *   }\n * });\n *\n * // Dispatching actions\n * cartSlice.actions.add({ name: 'Product 1', price: 100 });\n * cartSlice.actions.remove({ id: 123456789 });\n *\n * // Getting the current state\n * console.log(cartSlice.getState()); // Logs the current state of the cart slice\n *\n * // Subscribing to state changes\n * const unsubscribe = cartSlice.subscribe(newState => {\n *   console.log('Cart slice state changed:', newState);\n * });\n *\n * // Unsubscribe when no longer needed\n * unsubscribe();\n */\nconst slice = (store, { name, state, actions }) => {\n  if (store.slices && store.slices[name]) {\n    throw new Error(`[Cami.js] Slice name ${name} is already in use.`);\n  }\n\n  if (!store.slices) {\n    store.slices = {};\n  }\n\n  store.slices[name] = true;\n  store.state[name] = state;\n\n  const sliceActions = {};\n  const sliceSubscribers = [];\n\n  Object.keys(actions).forEach(actionKey => {\n    const namespacedAction = `${name}/${actionKey}`;\n    store.register(namespacedAction, (state, payload) => {\n      actions[actionKey](state[name], payload);\n    });\n\n    sliceActions[actionKey] = (...args) => {\n      store.dispatch(namespacedAction, ...args);\n    };\n  });\n\n  const subscribe = (callback) => {\n    sliceSubscribers.push(callback);\n    return () => {\n      const index = sliceSubscribers.indexOf(callback);\n      if (index > -1) {\n        sliceSubscribers.splice(index, 1);\n      }\n    };\n  };\n\n  store.subscribe((newState) => {\n    const sliceState = newState[name];\n    sliceSubscribers.forEach(callback => callback(sliceState));\n  });\n\n  const getState = () => {\n    return store.getState()[name];\n  };\n\n  return { getState, actions: sliceActions, subscribe }\n};\n\n/**\n * @private\n * @function _localStorageEnhancer\n * @param {Function} StoreClass - The class of the store to enhance.\n * @param {Object} initialState - The initial state for the new store instance.\n * @param {Object} options - Configuration options for the store.\n * @param {string} [options.name='default-store'] - The name of the store to use as the key in localStorage.\n * @param {number} [options.expiry=86400000] - The time in milliseconds until the stored state expires (default is 24 hours).\n * @returns {Function} A function that takes initialState and options, and returns an enhanced store instance with localStorage support.\n * @description This enhancer adds the ability to persist the store's state in localStorage. It returns a function that, when called with initialState and options, creates a new store instance with localStorage support. The state of the store is automatically saved to localStorage whenever it changes, and it is rehydrated from localStorage when the store is created. The enhanced store also includes a `reset()` method for resetting the store's state.\n * @example\n * ```javascript\n * // Enhance the ObservableStore with localStorage capabilities\n * const enhancedCreateStore = _localStorageEnhancer(ObservableStore);\n * // Create a store instance with initialState and provide a name to be used as the localStorage key\n * const storeWithLocalStorage = enhancedCreateStore({ items: [] }, { name: 'my-store', expiry: 1000 * 60 * 60 * 24 });\n * // Initialize or reset the store's state as needed\n * storeWithLocalStorage.reset();\n * ```\n */\n\n  const _deepMerge = function(target, source) {\n    if (typeof target !== 'object' || target === null) {\n      return source;\n    }\n\n    Object.keys(source).forEach(key => {\n      const targetValue = target[key];\n      const sourceValue = source[key];\n\n      if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {\n        // For arrays, you might want to replace the target array with the source array\n        // to prioritize the loadedState. Alternatively, you could concatenate them as shown here.\n        target[key] = [...targetValue, ...sourceValue];\n      } else if (typeof targetValue === 'object' && targetValue !== null && typeof sourceValue === 'object' && sourceValue !== null) {\n        // When both values are objects, merge them recursively\n        target[key] = _deepMerge({ ...targetValue }, sourceValue);\n      } else {\n        // If there's a conflict (or the key exists only in source), prioritize the source value\n        target[key] = sourceValue;\n      }\n    });\n\n    Object.keys(target).forEach(key => {\n      if (!source.hasOwnProperty(key)) {\n        target[key] = target[key];\n      }\n    });\n\n    return target;\n  };\n\n  const _localStorageEnhancer = (StoreClass) => {\n    return (initialState, options) => {\n      const storeName = options?.name || 'default-store';\n      const shouldLoad = options?.load !== false;\n      const defaultExpiry = 24 * 60 * 60 * 1000;\n      const expiry = options?.expiry !== undefined ? options.expiry : defaultExpiry;\n      const store = new StoreClass(initialState);\n\n      store.init = () => {\n        if (shouldLoad) {\n          const storedState = localStorage.getItem(storeName);\n          const storedExpiry = localStorage.getItem(`${storeName}-expiry`);\n          const currentTime = new Date().getTime();\n\n          if (storedState && storedExpiry) {\n            const isExpired = currentTime >= parseInt(storedExpiry, 10);\n            if (!isExpired) {\n              const loadedState = JSON.parse(storedState);\n              store.state = _deepMerge(initialState, loadedState);\n            } else {\n              localStorage.removeItem(storeName);\n              localStorage.removeItem(`${storeName}-expiry`);\n            }\n          }\n        }\n      };\n\n      store.init();\n\n      store.reset = () => {\n        localStorage.removeItem(storeName);\n        localStorage.removeItem(`${storeName}-expiry`);\n\n        store.state = initialState;\n\n        store.__observers.forEach(observer => observer.next(store.state));\n      };\n\n      store.subscribe((state) => {\n        const currentTime = new Date().getTime();\n        const expiryTime = currentTime + expiry;\n\n        localStorage.setItem(storeName, JSON.stringify(state));\n        localStorage.setItem(`${storeName}-expiry`, expiryTime.toString());\n      });\n\n      return store;\n    };\n  };\n\n/**\n * @function store\n * @param {Object} initialState - The initial state of the store.\n * @param {Object} [options] - Configuration options for the store.\n * @param {boolean} [options.localStorage=true] - Whether to use localStorage for state persistence.\n * @param {string} [options.name='cami-store'] - The name of the store to use as the key in localStorage.\n * @param {number} [options.expiry=86400000] - The time in milliseconds until the stored state expires (default is 24 hours).\n * @returns {ObservableStore} A new instance of ObservableStore with the provided initial state, enhanced with localStorage if enabled.\n * @description This function creates a new instance of ObservableStore with the provided initial state and enhances it with localStorage support if enabled. The store's state will be automatically persisted to and loaded from localStorage, using the provided name as the key. The `localStorage` option enables this behavior and can be toggled off if persistence is not needed.\n * @example\n * ```javascript\n * // Create a store with default localStorage support\n * const CartStore = store({ cartItems: [] });\n *\n * // Create a store without localStorage support\n * const NonPersistentStore = store({ items: [] }, { localStorage: false });\n * ```\n */\nconst store = (initialState, options = {}) => {\n  const defaultOptions = {\n    localStorage: true,\n    name: 'cami-store',\n    expiry: 86400000, // 24 hours\n  };\n\n  const finalOptions = { ...defaultOptions, ...options };\n\n  if (finalOptions.localStorage) {\n    const enhancedStore = _localStorageEnhancer(ObservableStore)(initialState, finalOptions);\n    return enhancedStore;\n  } else {\n    return new ObservableStore(initialState);\n  }\n}\n\nexport { ObservableStore, store, slice };\n", "import { Observable } from './observable.js';\nimport { ObservableState } from './observable-state.js';\n\n/**\n * @class ObservableStream\n * @description ObservableStream class that extends Observable and provides additional methods for data transformation\n * @extends Observable\n */\nclass ObservableStream extends Observable {\n  /**\n   * @method\n   * @static\n   * @param {any} value - The value to create an Observable from\n   * @returns {ObservableStream} A new ObservableStream that emits the values from the value\n   *\n   * @example\n   * // Example 1: Creating an ObservableStream from a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   */\n  static from(value) {\n    if (value instanceof Observable) {\n      return new ObservableStream(subscriber => {\n        const subscription = value.subscribe({\n          next: v => subscriber.next(v),\n          error: err => subscriber.error(err),\n          complete: () => subscriber.complete(),\n        });\n        return () => {\n          if (!subscription.closed) {\n            subscription.unsubscribe();\n          }\n        };\n      });\n    } else if (value[Symbol.asyncIterator]) {\n      return new ObservableStream(subscriber => {\n        let isCancelled = false;\n        (async () => {\n          try {\n            for await (const v of value) {\n              if (isCancelled) return;\n              subscriber.next(v);\n            }\n            subscriber.complete();\n          } catch (err) {\n            subscriber.error(err);\n          }\n        })();\n        return () => {\n          isCancelled = true;\n        };\n      });\n    } else if (value[Symbol.iterator]) {\n      return new ObservableStream(subscriber => {\n        try {\n          for (const v of value) {\n            subscriber.next(v);\n          }\n          subscriber.complete();\n        } catch (err) {\n          subscriber.error(err);\n        }\n        return () => {\n          if (!subscription.closed) {\n            subscription.unsubscribe();\n          }\n        };\n      });\n    } else if (value instanceof Promise) {\n      return new ObservableStream(subscriber => {\n        value.then(\n          v => {\n            subscriber.next(v);\n            subscriber.complete();\n          },\n          err => subscriber.error(err)\n        );\n        return () => {};\n      });\n    } else {\n      throw new TypeError('[Cami.js] ObservableStream.from requires an Observable, AsyncIterable, Iterable, or Promise');\n    }\n  }\n\n  /**\n   * @method\n   * @param {Function} transformFn - The function to transform the data\n   * @returns {ObservableStream} A new ObservableStream instance with transformed data\n   *\n   * @example\n   * // Example 1: Transforming an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const transformedStream = observableStream.map(data => data.map(item => item * 2));\n   *\n   * // Example 2: Transforming a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const transformedStream = observableStream.map(event => ({ x: event.clientX, y: event.clientY }));\n   */\n  map(transformFn) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => subscriber.next(transformFn(value)),\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} predicateFn - The function to filter the data\n   * @returns {ObservableStream} A new ObservableStream instance with filtered data\n   *\n   * @example\n   * // Example 1: Filtering an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const filteredStream = observableStream.filter(data => data.someProperty === 'someValue');\n   *\n   * // Example 2: Filtering a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const filteredStream = observableStream.filter(event => event.target.id === 'someId');\n   */\n  filter(predicateFn) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => {\n          if (predicateFn(value)) {\n            subscriber.next(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} reducerFn - The function to reduce the data\n   * @param {any} initialValue - The initial value for the reducer\n   * @returns {Promise} A promise that resolves with the reduced value\n   *\n   * @example\n   * // Example 1: Reducing an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const reducedValuePromise = observableStream.reduce((acc, data) => acc + data.someProperty, 0);\n   *\n   * // Example 2: Reducing a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const reducedValuePromise = observableStream.reduce((acc, event) => acc + 1, 0);\n   */\n  reduce(reducerFn, initialValue) {\n    return new Promise((resolve, reject) => {\n      let accumulator = initialValue;\n      const subscription = this.subscribe({\n        next: value => {\n          accumulator = reducerFn(accumulator, value);\n        },\n        error: err => reject(err),\n        complete: () => resolve(accumulator),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {Observable} notifier - The Observable that will complete this Observable\n   * @returns {ObservableStream} A new ObservableStream that completes when the notifier emits\n   *\n   * @example\n   * // Example 1: Completing an API data stream when another stream emits\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const notifierStream = new ObservableStream(subscriber => {\n   *   setTimeout(() => subscriber.next(), 5000);\n   * });\n   * const completedStream = observableStream.takeUntil(notifierStream);\n   *\n   * // Example 2: Completing a user event stream when another stream emits\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const notifierStream = new ObservableStream(subscriber => {\n   *   setTimeout(() => subscriber.next(), 5000);\n   * });\n   * const completedStream = observableStream.takeUntil(notifierStream);\n   */\n  takeUntil(notifier) {\n    return new ObservableStream(subscriber => {\n      const sourceSubscription = this.subscribe({\n        next: value => subscriber.next(value),\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      const notifierSubscription = notifier.subscribe({\n        next: () => {\n          subscriber.complete();\n          sourceSubscription.unsubscribe();\n          notifierSubscription.unsubscribe();\n        },\n        error: err => subscriber.error(err),\n      });\n\n      return () => {\n        sourceSubscription.unsubscribe();\n        notifierSubscription.unsubscribe();\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @param {number} n - The number of values to take\n   * @returns {ObservableStream} A new ObservableStream that completes after emitting n values\n   *\n   * @example\n   * // Example 1: Taking a certain number of values from an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const takenStream = observableStream.take(5);\n   *\n   * // Example 2: Taking a certain number of values from a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const takenStream = observableStream.take(5);\n   */\n  take(n) {\n    return new ObservableStream(subscriber => {\n      let i = 0;\n      const subscription = this.subscribe({\n        next: value => {\n          if (i++ < n) {\n            subscriber.next(value);\n          } else {\n            subscriber.complete();\n            subscription.unsubscribe();\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {number} n - The number of values to drop\n   * @returns {ObservableStream} A new ObservableStream that starts emitting after n values have been emitted\n   *\n   * @example\n   * // Example 1: Dropping a certain number of values from an API data stream\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const droppedStream = observableStream.drop(5);\n   *\n   * // Example 2: Dropping a certain number of values from a user event stream\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const observableStream = ObservableStream.from(clickStream);\n   * const droppedStream = observableStream.drop(5);\n   */\n  drop(n) {\n    return new ObservableStream(subscriber => {\n      let i = 0;\n      const subscription = this.subscribe({\n        next: value => {\n          if (i++ >= n) {\n            subscriber.next(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} transformFn - The function to transform the data into Observables\n   * @returns {ObservableStream} A new ObservableStream that emits the values from the inner Observables\n   *\n   * @example\n   * // Example 1: Transforming an API data stream into inner Observables\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const flatMappedStream = observableStream.flatMap(data => ObservableStream.from(fetch(`https://api.example.com/data/${data.id}`).then(response => response.json())));\n   *\n   * // Example 2: Transforming a user event stream into inner Observables\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const positionStream = clickStream.flatMap(event => ObservableStream.from({ x: event.clientX, y: event.clientY }));\n   *\n   * // Example 3: Transforming a stream of search terms into a stream of search results\n   * const searchTerms = new ObservableStream(subscriber => {\n   *   const input = document.querySelector('#search-input');\n   *   input.addEventListener('input', event => subscriber.next(event.target.value));\n   * });\n   * const searchResults = searchTerms.debounce(300).flatMap(term => ObservableStream.from(fetch(`https://api.example.com/search?q=${term}`).then(response => response.json())));\n   */\n  flatMap(transformFn) {\n    return new ObservableStream(subscriber => {\n      const subscriptions = new Set();\n\n      const sourceSubscription = this.subscribe({\n        next: value => {\n          const innerObservable = transformFn(value);\n          const innerSubscription = innerObservable.subscribe({\n            next: innerValue => subscriber.next(innerValue),\n            error: err => subscriber.error(err),\n            complete: () => {\n              subscriptions.delete(innerSubscription);\n              if (subscriptions.size === 0) {\n                subscriber.complete();\n              }\n            },\n          });\n          subscriptions.add(innerSubscription);\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          if (subscriptions.size === 0) {\n            subscriber.complete();\n          }\n        },\n      });\n\n      return () => {\n        sourceSubscription.unsubscribe();\n        subscriptions.forEach(subscription => subscription.unsubscribe());\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} transformFn - The function to transform the data into Observables\n   * @returns {ObservableStream} A new ObservableStream that emits the values from the inner Observables\n   * @example\n   * // Example 1: Transforming click events into Observables\n   * const clickStream = new ObservableStream();\n   * document.addEventListener('click', (event) => clickStream.push(event));\n   * const positionStream = clickStream.switchMap((event) => {\n   *   return new ObservableStream((subscriber) => {\n   *     subscriber.push({ x: event.clientX, y: event.clientY });\n   *     subscriber.complete();\n   *   });\n   * });\n   * positionStream.subscribe({\n   *   next: (position) => console.log(`Clicked at position: ${position.x}, ${position.y}`),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Transforming API responses into Observables\n   * const apiStream = new ObservableStream();\n   * fetch('https://api.example.com/data')\n   *   .then((response) => response.json())\n   *   .then((data) => apiStream.push(data))\n   *   .catch((error) => apiStream.error(error));\n   * const transformedStream = apiStream.switchMap((data) => {\n   *   return new ObservableStream((subscriber) => {\n   *     subscriber.push(transformData(data));\n   *     subscriber.complete();\n   *   });\n   * });\n   * transformedStream.subscribe({\n   *   next: (transformedData) => console.log(transformedData),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  switchMap(transformFn) {\n    return new ObservableStream(subscriber => {\n      let innerSubscription = null;\n\n      const sourceSubscription = this.subscribe({\n        next: value => {\n          if (innerSubscription) {\n            innerSubscription.unsubscribe();\n          }\n\n          const innerObservable = transformFn(value);\n          innerSubscription = innerObservable.subscribe({\n            next: innerValue => subscriber.next(innerValue),\n            error: err => subscriber.error(err),\n            complete: () => {\n              if (innerSubscription) {\n                innerSubscription.unsubscribe();\n                innerSubscription = null;\n              }\n            },\n          });\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          if (innerSubscription) {\n            innerSubscription.unsubscribe();\n          }\n          subscriber.complete();\n        },\n      });\n\n      return () => {\n        sourceSubscription.unsubscribe();\n        if (innerSubscription) {\n          innerSubscription.unsubscribe();\n        }\n      };\n    });\n  };\n\n  /**\n   * @method\n   * @returns {Promise} A promise that resolves with an array of all values emitted by the Observable\n   * @example\n   * // Example: Collecting all emitted values from an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.toArray().then((values) => console.log(values)); // Logs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   */\n  toArray() {\n    return new Promise((resolve, reject) => {\n      const values = [];\n      this.subscribe({\n        next: value => values.push(value),\n        error: err => reject(err),\n        complete: () => resolve(values),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} callback - The function to call for each value emitted by the Observable\n   * @returns {Promise} A promise that resolves when the Observable completes\n   * @example\n   * // Example: Logging each value emitted by an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.forEach((value) => console.log(value)); // Logs each number from 0 to 9\n   */\n  forEach(callback) {\n    return new Promise((resolve, reject) => {\n      this.subscribe({\n        next: value => callback(value),\n        error: err => reject(err),\n        complete: () => resolve(),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} predicate - The function to test each value\n   * @returns {Promise} A promise that resolves with a boolean indicating whether every value satisfies the predicate\n   * @example\n   * // Example: Checking if all emitted values are even\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.every((value) => value % 2 === 0).then((allEven) => console.log(allEven)); // Logs: false\n   */\n  every(predicate) {\n    return new Promise((resolve, reject) => {\n      let every = true;\n      this.subscribe({\n        next: value => {\n          if (!predicate(value)) {\n            every = false;\n            resolve(false);\n          }\n        },\n        error: err => reject(err),\n        complete: () => resolve(every),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} predicate - The function to test each value\n   * @returns {Promise} A promise that resolves with the first value that satisfies the predicate\n   * @example\n   * // Example: Finding the first emitted value that is greater than 5\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.find((value) => value > 5).then((value) => console.log(value)); // Logs: 6\n   */\n  find(predicate) {\n    return new Promise((resolve, reject) => {\n      const subscription = this.subscribe({\n        next: value => {\n          if (predicate(value)) {\n            resolve(value);\n            subscription.unsubscribe();\n          }\n        },\n        error: err => reject(err),\n        complete: () => resolve(undefined),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} predicate - The function to test each value\n   * @returns {Promise} A promise that resolves with a boolean indicating whether some value satisfies the predicate\n   * @example\n   * // Example: Checking if any emitted values are greater than 5\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.some((value) => value > 5).then((anyGreaterThan5) => console.log(anyGreaterThan5)); // Logs: true\n   */\n  some(predicate) {\n    return new Promise((resolve, reject) => {\n      const subscription = this.subscribe({\n        next: value => {\n          if (predicate(value)) {\n            resolve(true);\n            subscription.unsubscribe();\n          }\n        },\n        error: err => reject(err),\n        complete: () => resolve(false),\n      });\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} callback - The function to call when the Observable completes\n   * @returns {ObservableStream} A new ObservableStream that calls the callback when it completes\n   * @example\n   * // Example: Logging a message when the ObservableStream completes\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * const finalStream = numberStream.finally(() => console.log('Stream completed'));\n   * finalStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9, then logs 'Stream completed'\n   */\n  finally(callback) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => subscriber.next(value),\n        error: err => {\n          callback();\n          subscriber.error(err);\n        },\n        complete: () => {\n          callback();\n          subscriber.complete();\n        },\n      });\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @description Converts the ObservableStream to an ObservableState\n   * @returns {ObservableState} A new ObservableState that represents the current value of the stream\n   * @example\n   * // Example: Converting an ObservableStream to an ObservableState\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * const numberState = numberStream.toState();\n   * numberState.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9\n   */\n  toState(initialValue = null) {\n    const state = new ObservableState(initialValue, null, { name: 'ObservableStream' });\n    this.subscribe({\n      next: value => state.update(() => value),\n      error: err => state.error(err),\n      complete: () => state.complete(),\n    });\n    return state;\n  }\n\n  /**\n   * @method\n   * @description Pushes a value to the observers. The value can be an Observable, an async iterable, an iterable, a Promise, or any other value.\n   * @param {any} value - The value to push\n   * @example\n   * // Example 1: Pushing values from an Observable\n   * const sourceStream = new ObservableStream();\n   * const targetStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   sourceStream.push(i);\n   * }\n   * sourceStream.end();\n   * targetStream.push(sourceStream);\n   * targetStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9\n   *\n   * // Example 2: Pushing values from a Promise\n   * const promiseStream = new ObservableStream();\n   * const promise = new Promise((resolve) => {\n   *   setTimeout(() => resolve('Hello, world!'), 1000);\n   * });\n   * promiseStream.push(promise);\n   * promiseStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs 'Hello, world!' after 1 second\n   */\n  push(value) {\n    if (value instanceof Observable) {\n      const subscription = value.subscribe({\n        next: v => this.__observers.forEach(observer => observer.next(v)),\n        error: err => this.__observers.forEach(observer => observer.error(err)),\n        complete: () => this.__observers.forEach(observer => observer.complete()),\n      });\n    } else if (value[Symbol.asyncIterator]) {\n      (async () => {\n        try {\n          for await (const v of value) {\n            this.__observers.forEach(observer => observer.next(v));\n          }\n          this.__observers.forEach(observer => observer.complete());\n        } catch (err) {\n          this.__observers.forEach(observer => observer.error(err));\n        }\n      })();\n    } else if (value[Symbol.iterator]) {\n      try {\n        for (const v of value) {\n          this.__observers.forEach(observer => observer.next(v));\n        }\n        this.__observers.forEach(observer => observer.complete());\n      } catch (err) {\n        this.__observers.forEach(observer => observer.error(err));\n      }\n    } else if (value instanceof Promise) {\n      value.then(\n        v => {\n          this.__observers.forEach(observer => observer.next(v));\n          this.__observers.forEach(observer => observer.complete());\n        },\n        err => this.__observers.forEach(observer => observer.error(err))\n      );\n    } else {\n      this.__observers.forEach(observer => observer.next(value));\n    }\n  }\n\n  /**\n   * @method\n   * @description Subscribes to a stream and pushes its values to the observers.\n   * @param {ObservableStream} stream - The stream to plug\n   * @example\n   * // Example: Plugging one ObservableStream into another\n   * const sourceStream = new ObservableStream();\n   * const targetStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   sourceStream.push(i);\n   * }\n   * sourceStream.end();\n   * targetStream.plug(sourceStream);\n   * targetStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9\n   */\n  plug(stream) {\n    stream.subscribe({\n      next: value => this.push(value),\n      error: err => this.__observers.forEach(observer => observer.error(err)),\n      complete: () => this.__observers.forEach(observer => observer.complete()),\n    });\n  }\n\n  /**\n   * @method\n   * @description Ends the stream by calling the complete method of each observer.\n   * @example\n   * // Example: Ending an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * numberStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   *   complete: () => console.log('Stream completed'),\n   * }); // Logs each number from 0 to 9, then logs 'Stream completed'\n   */\n  end() {\n    this.__observers.forEach(observer => {\n      if (observer && typeof observer.complete === 'function') {\n        observer.complete();\n      }\n    });\n  }\n\n  /**\n   * @method\n   * @description Catches errors on the ObservableStream and replaces them with a new stream.\n   * @param {Function} fn - A function that receives the error and returns a new ObservableStream.\n   * @returns {ObservableStream} - Returns a new ObservableStream that replaces the original stream when an error occurs.\n   * @example\n   * // Example: Catching and handling errors in an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   if (i === 5) {\n   *     numberStream.error(new Error('Something went wrong'));\n   *   } else {\n   *     numberStream.push(i);\n   *   }\n   * }\n   * numberStream.end();\n   * const errorHandledStream = numberStream.catchError((error) => {\n   *   console.error(error);\n   *   return new ObservableStream((subscriber) => {\n   *     subscriber.push('Error handled');\n   *     subscriber.complete();\n   *   });\n   * });\n   * errorHandledStream.subscribe({\n   *   next: (value) => console.log(value),\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 4, logs the error, then logs 'Error handled'\n   */\n  catchError(fn) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => subscriber.next(value),\n        error: err => {\n          const newStream = fn(err);\n          newStream.subscribe({\n            next: value => subscriber.next(value),\n            error: err => subscriber.error(err),\n            complete: () => subscriber.complete(),\n          });\n        },\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {number} delay - The debounce delay in milliseconds\n   * @returns {ObservableStream} A new ObservableStream that emits the latest value after the debounce delay\n   * @example\n   * // Example: Debouncing an ObservableStream of click events\n   * const clickStream = new ObservableStream();\n   * document.addEventListener('click', (event) => clickStream.push(event));\n   * const debouncedStream = clickStream.debounce(500);\n   * debouncedStream.subscribe({\n   *   next: (event) => console.log(`Clicked at position: ${event.clientX}, ${event.clientY}`),\n   *   error: (err) => console.error(err),\n   * }); // Logs the position of the last click event that occurred at least 500 milliseconds after the previous click event\n   */\n  debounce(delay) {\n    return new ObservableStream(subscriber => {\n      let timeoutId = null;\n      const subscription = this.subscribe({\n        next: value => {\n          clearTimeout(timeoutId);\n          timeoutId = setTimeout(() => {\n            subscriber.next(value);\n          }, delay);\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          clearTimeout(timeoutId);\n          subscriber.complete();\n        },\n      });\n\n      return () => {\n        clearTimeout(timeoutId);\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} sideEffectFn - The function to perform side effect\n   * @returns {ObservableStream} A new ObservableStream that is identical to the source\n   * @example\n   * // Example: Logging each value emitted by an ObservableStream\n   * const numberStream = new ObservableStream();\n   * for (let i = 0; i < 10; i++) {\n   *   numberStream.push(i);\n   * }\n   * numberStream.end();\n   * const loggedStream = numberStream.tap((value) => console.log(value));\n   * loggedStream.subscribe({\n   *   next: (value) => {},\n   *   error: (err) => console.error(err),\n   * }); // Logs each number from 0 to 9\n   */\n  tap(sideEffectFn) {\n    return new ObservableStream(subscriber => {\n      const subscription = this.subscribe({\n        next: value => {\n          sideEffectFn(value);\n          subscriber.next(value);\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {number} duration - The throttle duration in milliseconds\n   * @returns {ObservableStream} A new ObservableStream that emits a value then ignores subsequent source values for duration milliseconds, then repeats this process.\n   * @example\n   * // Example 1: Throttling scroll events\n   * const scrollStream = new ObservableStream(subscriber => {\n   *   window.addEventListener('scroll', event => subscriber.next(event));\n   * });\n   * const throttledScrollStream = scrollStream.throttle(200);\n   * throttledScrollStream.subscribe({\n   *   next: (event) => console.log('Scroll event:', event),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Throttling search input for autocomplete\n   * const searchInput = document.querySelector('#search-input');\n   * const searchStream = new ObservableStream(subscriber => {\n   *   searchInput.addEventListener('input', event => subscriber.next(event.target.value));\n   * });\n   * const throttledSearchStream = searchStream.throttle(300);\n   * throttledSearchStream.subscribe({\n   *   next: (searchTerm) => console.log('Search term:', searchTerm),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  throttle(duration) {\n    return new ObservableStream(subscriber => {\n      let lastEmitTime = 0;\n      const subscription = this.subscribe({\n        next: value => {\n          const currentTime = Date.now();\n          if (currentTime - lastEmitTime > duration) {\n            lastEmitTime = currentTime;\n            subscriber.next(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @returns {ObservableStream} A new ObservableStream that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n   * @example\n   * // Example 1: Filtering out consecutive duplicate search terms\n   * const searchInput = document.querySelector('#search-input');\n   * const searchStream = new ObservableStream(subscriber => {\n   *   searchInput.addEventListener('input', event => subscriber.next(event.target.value));\n   * });\n   * const distinctSearchStream = searchStream.distinctUntilChanged();\n   * distinctSearchStream.subscribe({\n   *   next: (searchTerm) => console.log('Search term:', searchTerm),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Filtering out consecutive duplicate API responses\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const distinctDataStream = observableStream.distinctUntilChanged();\n   * distinctDataStream.subscribe({\n   *   next: (data) => console.log('API data:', data),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  distinctUntilChanged() {\n    return new ObservableStream(subscriber => {\n      let lastValue;\n      let isFirstValue = true;\n      const subscription = this.subscribe({\n        next: value => {\n          if (isFirstValue || value !== lastValue) {\n            isFirstValue = false;\n            lastValue = value;\n            subscriber.next(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n\n  /**\n   * @method\n   * @param {function} transformFn - The function to transform each value in the source ObservableStream\n   * @returns {ObservableStream} A new ObservableStream that emits the results of applying a given transform function to each value emitted by the source ObservableStream, sequentially.\n   * @example\n   * // Example 1: Transforming a stream of search terms into a stream of search results\n   * const searchInput = document.querySelector('#search-input');\n   * const searchStream = new ObservableStream(subscriber => {\n   *   searchInput.addEventListener('input', event => subscriber.next(event.target.value));\n   * });\n   * const resultsStream = searchStream.concatMap(searchTerm =>\n   *   ObservableStream.from(fetch(`https://api.example.com/search?query=${searchTerm}`).then(response => response.json()))\n   * );\n   * resultsStream.subscribe({\n   *   next: (results) => console.log('Search results:', results),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Transforming a stream of click events into a stream of clicked elements\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event.target));\n   * });\n   * const elementsStream = clickStream.concatMap(target =>\n   *   ObservableStream.from(Promise.resolve(target))\n   * );\n   * elementsStream.subscribe({\n   *   next: (element) => console.log('Clicked element:', element),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  concatMap(transformFn) {\n    return new ObservableStream(subscriber => {\n      let innerSubscription = null;\n      let waiting = false;\n      const sourceValues = [];\n\n      const sourceSubscription = this.subscribe({\n        next: value => {\n          if (!waiting) {\n            waiting = true;\n            const innerObservable = transformFn(value);\n            innerSubscription = innerObservable.subscribe({\n              next: innerValue => subscriber.next(innerValue),\n              error: err => subscriber.error(err),\n              complete: () => {\n                if (sourceValues.length > 0) {\n                  const nextValue = sourceValues.shift();\n                  const nextInnerObservable = transformFn(nextValue);\n                  innerSubscription = nextInnerObservable.subscribe({\n                    next: innerValue => subscriber.next(innerValue),\n                    error: err => subscriber.error(err),\n                    complete: () => waiting = false,\n                  });\n                } else {\n                  waiting = false;\n                }\n              },\n            });\n          } else {\n            sourceValues.push(value);\n          }\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          if (!waiting) {\n            subscriber.complete();\n          }\n        },\n      });\n\n      return () => {\n        sourceSubscription.unsubscribe();\n        if (innerSubscription) {\n          innerSubscription.unsubscribe();\n        }\n      };\n    });\n  }\n\n  /**\n   * @method\n   * @param {...ObservableStream} observables - The source ObservableStreams\n   * @returns {ObservableStream} A new ObservableStream that emits an array with the latest values from each source ObservableStream, whenever any source ObservableStream emits.\n   * @example\n   * // Example 1: Combining multiple API data streams\n   * const apiDataStream1 = fetch('https://api.example.com/data1').then(response => response.json());\n   * const apiDataStream2 = fetch('https://api.example.com/data2').then(response => response.json());\n   * const observableStream1 = ObservableStream.from(apiDataStream1);\n   * const observableStream2 = ObservableStream.from(apiDataStream2);\n   * const combinedStream = observableStream1.combineLatest(observableStream2);\n   * combinedStream.subscribe({\n   *   next: ([data1, data2]) => console.log('API data:', data1, data2),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Combining multiple user event streams\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const scrollStream = new ObservableStream(subscriber => {\n   *   window.addEventListener('scroll', event => subscriber.next(event));\n   * });\n   * const combinedStream = clickStream.combineLatest(scrollStream);\n   * combinedStream.subscribe({\n   *   next: ([clickEvent, scrollEvent]) => console.log('User events:', clickEvent, scrollEvent),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  combineLatest(...observables) {\n    return new ObservableStream(subscriber => {\n      const values = new Array(observables.length).fill(undefined);\n      const subscriptions = observables.map((observable, i) =>\n        observable.subscribe({\n          next: value => {\n            values[i] = value;\n            if (!values.includes(undefined)) {\n              subscriber.next([...values]);\n            }\n          },\n          error: err => subscriber.error(err),\n          complete: () => {},\n        })\n      );\n\n      return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    });\n  }\n\n  /**\n   * @method\n   * @param {...any} initialValues - The initial values to start with\n   * @returns {ObservableStream} A new ObservableStream that emits the specified initial values, followed by all values emitted by the source ObservableStream.\n   * @example\n   * // Example 1: Prepending an API data stream with a loading state\n   * const apiDataStream = fetch('https://api.example.com/data').then(response => response.json());\n   * const observableStream = ObservableStream.from(apiDataStream);\n   * const loadingStream = observableStream.startWith('loading');\n   * loadingStream.subscribe({\n   *   next: (state) => console.log('State:', state),\n   *   error: (err) => console.error(err),\n   * });\n   *\n   * // Example 2: Prepending a user event stream with an initial event\n   * const clickStream = new ObservableStream(subscriber => {\n   *   document.addEventListener('click', event => subscriber.next(event));\n   * });\n   * const initialEvent = { type: 'initial' };\n   * const eventStream = clickStream.startWith(initialEvent);\n   * eventStream.subscribe({\n   *   next: (event) => console.log('Event:', event),\n   *   error: (err) => console.error(err),\n   * });\n   */\n  startWith(...initialValues) {\n    return new ObservableStream(subscriber => {\n      initialValues.forEach(value => subscriber.next(value));\n      const subscription = this.subscribe({\n        next: value => subscriber.next(value),\n        error: err => subscriber.error(err),\n        complete: () => subscriber.complete(),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  }\n}\n\nexport { ObservableStream };\n", "import { Observable } from './observable.js';\nimport { ObservableStream } from './observable-stream.js';\nimport { produce } from '../produce.js';\nimport { __config } from '../config.js';\nimport { __trace } from '../trace.js';\n\n/**\n * @private\n * @class\n * @description DependencyTracker is an object that holds the current dependency.\n * It is used to track dependencies between observables.\n * @type {Object}\n */\nconst DependencyTracker = {\n  current: null\n};\n\n/**\n * @class\n * @extends Observable\n * @description This class extends the Observable class and adds methods for updating the value of the observable.\n * @example\n * import { ObservableState } from 'cami-js';\n * const observable = new ObservableState(10);\n * console.log(observable.value); // 10\n */\nclass ObservableState extends Observable {\n  /**\n   * @constructor\n   * @param {any} initialValue - The initial value of the observable\n   * @param {Subscriber} subscriber - The subscriber to the observable\n   * @param {Object} options - Additional options for the observable\n   * @param {boolean} options.last - Whether the subscriber is the last observer\n   * @example\n   * const observable = new ObservableState(10);\n   */\n  constructor(initialValue = null, subscriber = null, {last = false, name = null} = {}) {\n    super();\n    if (last) {\n      this.__lastObserver = subscriber;\n    } else {\n      this.__observers.push(subscriber);\n    }\n    this.__value = produce(initialValue, draft => {});\n    this.__pendingUpdates = [];\n    this.__updateScheduled = false;\n    this.__name = name;\n  }\n\n  /**\n   * @method\n   * @returns {any} The current value of the observable\n   * @example\n   * const value = observable.value;\n   */\n  get value() {\n    if (DependencyTracker.current != null) {\n      DependencyTracker.current.addDependency(this);\n    }\n    return this.__value;\n  }\n\n  /**\n   * @method\n   * @param {any} newValue - The new value to set for the observable\n   * @description This method sets a new value for the observable by calling the update method with the new value.\n   * @example\n   * observable.value = 20;\n   */\n  set value(newValue) {\n    this.update(() => newValue);\n  }\n\n  /**\n   * @method\n   * @description Merges properties from the provided object into the observable's value\n   * @param {Object} obj - The object whose properties to merge\n   * @example\n   * observable.assign({ key: 'value' });\n   */\n  assign(obj) {\n    if (typeof this.__value !== 'object' || this.__value === null) {\n      throw new Error('[Cami.js] Observable value is not an object');\n    }\n    this.update(value => Object.assign(value, obj));\n  }\n\n  /**\n   * @method\n   * @description Sets a new value for a specific key in the observable's value. If the key is nested, it should be provided as a string with keys separated by dots.\n   * @param {string} key - The key to set the new value for\n   * @param {any} value - The new value to set\n   * @throws Will throw an error if the observable's value is not an object\n   * @example\n   * observable.set('key.subkey', 'new value');\n   */\n  set(key, value) {\n    if (typeof this.__value !== 'object' || this.__value === null) {\n      throw new Error('[Cami.js] Observable value is not an object');\n    }\n    this.update(state => {\n      const keys = key.split('.');\n      let current = state;\n      for (let i = 0; i < keys.length - 1; i++) {\n        current = current[keys[i]];\n      }\n      current[keys[keys.length - 1]] = value;\n    });\n  }\n\n  /**\n   * @method\n   * @description Deletes a specific key from the observable's value. If the key is nested, it should be provided as a string with keys separated by dots.\n   * @param {string} key - The key to delete\n   * @throws Will throw an error if the observable's value is not an object\n   * @example\n   * observable.delete('key.subkey');\n   */\n  delete(key) {\n    if (typeof this.__value !== 'object' || this.__value === null) {\n      throw new Error('[Cami.js] Observable value is not an object');\n    }\n    this.update(state => {\n      const keys = key.split('.');\n      let current = state;\n      for (let i = 0; i < keys.length - 1; i++) {\n        current = current[keys[i]];\n      }\n      delete current[keys[keys.length - 1]];\n    });\n  }\n\n  /**\n   * @method\n   * @description Removes all key/value pairs from the observable's value\n   * @example\n   * observable.clear();\n   */\n  clear() {\n    this.update(() => ({}));\n  }\n\n  /**\n   * @method\n   * @description Adds one or more elements to the end of the observable's value\n   * @param {...any} elements - The elements to add\n   * @example\n   * observable.push(1, 2, 3);\n   */\n  push(...elements) {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.push(...elements);\n    });\n  }\n\n  /**\n   * @method\n   * @description Removes the last element from the observable's value\n   * @example\n   * observable.pop();\n   */\n  pop() {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.pop();\n    });\n  }\n\n  /**\n   * @method\n   * @description Removes the first element from the observable's value\n   * @example\n   * observable.shift();\n   */\n  shift() {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.shift();\n    });\n  }\n\n  /**\n   * @method\n   * @description Changes the contents of the observable's value by removing, replacing, or adding elements\n   * @param {number} start - The index at which to start changing the array\n   * @param {number} deleteCount - The number of elements to remove\n   * @param {...any} items - The elements to add to the array\n   * @example\n   * observable.splice(0, 1, 'newElement');\n   */\n  splice(start, deleteCount, ...items) {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(arr => {\n      arr.splice(start, deleteCount, ...items);\n    });\n  }\n\n  /**\n   * @method\n   * @description Adds one or more elements to the beginning of the observable's value\n   * @param {...any} elements - The elements to add\n   * @example\n   * observable.unshift('newElement');\n   */\n  unshift(...elements) {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.unshift(...elements);\n    });\n  }\n\n  /**\n   * @method\n   * @description Reverses the order of the elements in the observable's value\n   * @example\n   * observable.reverse();\n   */\n  reverse() {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.reverse();\n    });\n  }\n\n  /**\n   * @method\n   * @description Sorts the elements in the observable's value\n   * @param {Function} [compareFunction] - The function used to determine the order of the elements\n   * @example\n   * observable.sort((a, b) => a - b);\n   */\n  sort(compareFunction) {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(value => {\n      value.sort(compareFunction);\n    });\n  }\n\n  /**\n   * @method\n   * @description Changes all elements in the observable's value to a static value\n   * @param {any} value - The value to fill the array with\n   * @param {number} [start=0] - The index to start filling at\n   * @param {number} [end=this.__value.length] - The index to stop filling at\n   * @example\n   * observable.fill('newElement', 0, 2);\n   */\n  fill(value, start = 0, end = this.__value.length) {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(arr => {\n      arr.fill(value, start, end);\n    });\n  }\n\n  /**\n   * @method\n   * @description Shallow copies part of the observable's value to another location in the same array\n   * @param {number} target - The index to copy the elements to\n   * @param {number} start - The start index to begin copying elements from\n   * @param {number} [end=this.__value.length] - The end index to stop copying elements from\n   * @example\n   * observable.copyWithin(0, 1, 2);\n   */\n  copyWithin(target, start, end = this.__value.length) {\n    if (!Array.isArray(this.__value)) {\n      throw new Error('[Cami.js] Observable value is not an array');\n    }\n    this.update(arr => {\n      arr.copyWithin(target, start, end);\n    });\n  }\n\n  /**\n   * @method\n   * @param {Function} updater - The function to update the value\n   * @description This method adds the updater function to the pending updates queue.\n   * It uses a synchronous approach to schedule the updates, ensuring the whole state is consistent at each tick.\n   * This is done to batch multiple updates together and avoid unnecessary re-renders.\n   * @example\n   * observable.update(value => value + 1);\n   */\n  update(updater) {\n    this.__pendingUpdates.push(updater);\n    this.__scheduleupdate();\n  }\n\n  __scheduleupdate() {\n    if (!this.__updateScheduled) {\n      this.__updateScheduled = true;\n      this.__applyUpdates();\n    }\n  }\n\n  /**\n   * @private\n   * @method\n   * @description This method notifies all observers of the observable with the current value.\n   * It first creates a list of observers by combining the regular observers and the last observer.\n   * Then, it iterates over this list and calls each observer with the current value.\n   * If the observer is a function, it is called directly.\n   * If the observer is an object with a 'next' method, the 'next' method is called.\n   */\n  __notifyObservers() {\n    const observersWithLast = [...this.__observers, this.__lastObserver];\n    observersWithLast.forEach(observer => {\n      if (observer && typeof observer === 'function') {\n        observer(this.__value);\n      } else if (observer && observer.next) {\n        observer.next(this.__value);\n      }\n    });\n  }\n\n  /**\n   * @method\n   * @private\n   * @description This method applies all the pending updates to the value.\n   * It then notifies all the observers with the updated value.\n   */\n  __applyUpdates() {\n    let oldValue = this.__value;\n    while (this.__pendingUpdates.length > 0) {\n      const updater = this.__pendingUpdates.shift();\n      if ((typeof this.__value === 'object' && this.__value !== null && this.__value.constructor === Object) || Array.isArray(this.__value)) {\n        this.__value = produce(this.__value, updater);\n      } else {\n        this.__value = updater(this.__value);\n      }\n    }\n    if (oldValue !== this.__value) {\n      this.__notifyObservers();\n\n      if (__config.events.isEnabled && typeof window !== 'undefined') {\n        const event = new CustomEvent('cami:state:change', {\n          detail: {\n            name: this.__name,\n            oldValue: oldValue,\n            newValue: this.__value\n          }\n        });\n        window.dispatchEvent(event);\n      }\n\n      __trace('cami:state:change', this.__name, oldValue, this.__value);\n    }\n    this.__updateScheduled = false;\n  }\n\n  /**\n   * @method\n   * @description Converts the ObservableState to an ObservableStream.\n   * @returns {ObservableStream} The ObservableStream that emits the same values as the ObservableState.\n   * @example\n   * const stream = observable.toStream();\n   */\n  toStream() {\n    const stream = new ObservableStream();\n    this.subscribe({\n      next: value => stream.emit(value),\n      error: err => stream.error(err),\n      complete: () => stream.end(),\n    });\n    return stream;\n  }\n\n  /**\n   * @method\n   * @description Calls the complete method of all observers.\n   * @example\n   * observable.complete();\n   */\n  complete() {\n    this.__observers.forEach(observer => {\n      if (observer && typeof observer.complete === 'function') {\n        observer.complete();\n      }\n    });\n  }\n}\n\n/**\n * @class\n * @extends ObservableState\n * @description ComputedState class that extends ObservableState and holds additional methods for computed observables\n */\nclass ComputedState extends ObservableState {\n  /**\n   * @constructor\n   * @param {Function} computeFn - The function to compute the value of the observable\n   * @example\n   * const computedState = new ComputedState(() => observable.value * 2);\n   */\n  constructor(computeFn) {\n    super(null);\n    this.computeFn = computeFn;\n    this.dependencies = new Set();\n    this.subscriptions = new Map();\n    this.__compute();\n  }\n\n  /**\n   * @method\n   * @returns {any} The current value of the observable\n   * @example\n   * const value = computedState.value;\n   */\n  get value() {\n    if (DependencyTracker.current) {\n      DependencyTracker.current.addDependency(this);\n    }\n    return this.__value;\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Computes the new value of the observable and notifies observers if it has changed\n   */\n  __compute() {\n    /**\n     * @description The tracker object is used to manage dependencies between observables.\n     * It has a method 'addDependency' which takes an observable as an argument.\n     * If the observable is not already in the dependencies set, it adds the observable to the set,\n     * and sets up a subscription to the observable.\n     * The subscription calls the 'compute' method of the ComputedState instance whenever the observable's value changes.\n     * This ensures that the ComputedState's value is always up-to-date with its dependencies.\n     */\n    const tracker = {\n      addDependency: (observable) => {\n        if (!this.dependencies.has(observable)) {\n          const subscription = observable.onValue(() => this.__compute());\n          this.dependencies.add(observable);\n          this.subscriptions.set(observable, subscription);\n        }\n      }\n    };\n\n    /**\n     * @description The DependencyTracker is a global object that is used to track dependencies of computed observables.\n     * It is set to the current tracker object before the compute function is called.\n     * This allows the compute function to add dependencies to the tracker object as it executes.\n     * After the compute function has finished executing, the DependencyTracker is set back to null.\n     * This is done to prevent further dependencies from being added after the computation is complete.\n     * This ensures that the dependencies of the computed observable are accurately tracked and updated.\n     */\n    DependencyTracker.current = tracker;\n    const newValue = this.computeFn();\n    DependencyTracker.current = null;\n\n    if (newValue !== this.__value) {\n      this.__value = newValue;\n      this.__notifyObservers();\n    }\n  }\n\n  /**\n   * @method\n   * @description Unsubscribes from all dependencies\n   * @example\n   * // Assuming `obs` is an instance of ObservableState\n   * obs.dispose(); // This will unsubscribe obs from all its dependencies\n   */\n  dispose() {\n    this.subscriptions.forEach((subscription) => {\n      subscription.unsubscribe();\n    });\n  }\n}\n\n/**\n * @function\n * @param {Function} computeFn - The function to compute the value of the observable\n * @returns {ComputedState} A new instance of ComputedState\n * @example\n * // Assuming `computeFn` is a function that computes the value of the observable\n * const computedValue = computed(computeFn);\n */\nconst computed = function(computeFn) {\n  return new ComputedState(computeFn);\n};\n\n/**\n * @function\n * @param {Function} effectFn - The function to call for the effect\n * @returns {Function} A function that when called, unsubscribes from all dependencies and runs cleanup function\n * @description This function sets up an effect that is run when the observable changes\n * @example\n * // Assuming `effectFn` is a function that is called when the observable changes\n * const effectFunction = effect(effectFn);\n */\nconst effect = function(effectFn) {\n  let cleanup = () => {};\n  let dependencies = new Set();\n  let subscriptions = new Map();\n\n  /**\n   * The tracker object is used to keep track of dependencies for the effect function.\n   * It provides a method to add a dependency (an observable) to the dependencies set.\n   * If the observable is not already a dependency, it is added to the set and a subscription is created\n   * to run the effect function whenever the observable's value changes.\n   * This mechanism allows the effect function to respond to state changes in its dependencies.\n   */\n  const tracker = {\n    addDependency: (observable) => {\n      if (!dependencies.has(observable)) {\n        const subscription = observable.onValue(_runEffect);\n        dependencies.add(observable);\n        subscriptions.set(observable, subscription);\n      }\n    }\n  };\n\n  /**\n   * The _runEffect function is responsible for running the effect function and managing its dependencies.\n   * Before the effect function is run, any cleanup from the previous run is performed and the current tracker\n   * is set to this tracker. This allows the effect function to add dependencies via the tracker while it is running.\n   * After the effect function has run, the current tracker is set back to null to prevent further dependencies\n   * from being added outside of the effect function.\n   * The effect function is expected to return a cleanup function, which is saved for the next run.\n   * The cleanup function, initially empty, is replaced by the one returned from effectFn (run by the observable) before each new run and on effect disposal.\n   */\n  const _runEffect = () => {\n    cleanup();\n    DependencyTracker.current = tracker;\n    cleanup = effectFn() || (() => {});\n    DependencyTracker.current = null;\n  };\n\n  if (typeof window !== 'undefined') {\n    requestAnimationFrame(_runEffect);\n  } else {\n    setTimeout(_runEffect, 0);\n  }\n\n  /**\n   * @method\n   * @description Unsubscribes from all dependencies and runs cleanup function\n   * @returns {void}\n   * @example\n   * // Assuming `dispose` is the function returned by `effect`\n   * dispose(); // This will unsubscribe from all dependencies and run cleanup function\n   */\n  const dispose = () => {\n    subscriptions.forEach((subscription) => {\n      subscription.unsubscribe();\n    });\n    cleanup();\n  };\n\n  return dispose;\n};\n\nexport { ObservableState, computed, effect };\n", "import { ObservableState } from './observable-state.js';\n/**\n * @typedef ObservableProxy\n * @property {function(): any} get - A getter function that returns the current value of the property. If the property is a primitive value, this will return the value directly from the ObservableState instance. If the property is a non-primitive value, this will return an ObservableProxy that wraps the ObservableState instance. This getter is used when accessing a non-primitive property on a ReactiveElement instance. We use Proxy instead of Object.defineProperty because it allows us to handle nested properties.\n * @property {function(any): void} set - A setter function that updates the value of the property. It updates the ObservableState instance with the new value. This setter is used when assigning a new value to a non-primitive property on a ReactiveElement instance.\n */\nclass ObservableProxy {\n  constructor(observable) {\n    if (!(observable instanceof ObservableState)) {\n      throw new TypeError('Expected observable to be an instance of ObservableState');\n    }\n\n    return new Proxy(observable, {\n      get: (target, property) => {\n        if (typeof target[property] === 'function') {\n          return target[property].bind(target);\n        } else if (property in target) {\n          return target[property];\n        } else if (typeof target.value[property] === 'function') {\n          return (...args) => target.value[property](...args);\n        } else {\n          return target.value[property];\n        }\n      },\n      set: (target, property, value) => {\n        target[property] = value;\n        target.update(() => target.value);\n        return true;\n      }\n    });\n  }\n}\n\nexport { ObservableProxy };\n", "import { html, render as __litRender } from './html.js';\nimport { produce } from \"./produce.js\"\nimport { Observable } from './observables/observable.js';\nimport { ObservableStore } from './observables/observable-store.js';\nimport { ObservableState, computed, effect } from './observables/observable-state.js';\nimport { ObservableStream } from './observables/observable-stream.js';\nimport { ObservableProxy } from './observables/observable-proxy.js';\nimport { __trace } from './trace.js';\n\n/**\n * @typedef ObservableProperty\n * @property {function(): any} get - A getter function that returns the current value of the property. If the property is a primitive value, this will return the value directly from the ObservableState instance. If the property is a non-primitive value, this will return an ObservableProxy that wraps the ObservableState instance. This getter is used when accessing the property on a ReactiveElement instance. This polymorphic behavior allows the ObservableProperty to handle both primitive and non-primitive values, and handle nested properties (only proxies can handle nested properties, whereas getters/setter traps cannot)\n * @property {function(any): void} set - A setter function that updates the value of the property. It updates the ObservableState instance with the new value. This setter is used when assigning a new value to the property on a ReactiveElement instance.\n * @example\n * // Primitive value example from _001_counter.html\n * // this.count is an ObservableProperty, where if you get the value, it returns the current value of the property, and if you set the value, it updates the property with the new value\n * // ObservableProperty is just Object.defineProperty with a getter and setter, where the Object is the ReactiveElement instance\n * class CounterElement extends ReactiveElement {\n *   count = 0\n *\n *   template() {\n *     return html`\n *       <button @click=${() => this.count--}>-</button>\n *       <button @click=${() => this.count++}>+</button>\n *       <div>Count: ${this.count}</div>\n *     `;\n *   }\n * }\n *\n * // Non-primitive value example from _003_todo.html\n * // this.query returns an ObservableProperty / ObservableProxy\n * // this.todos is an ObservableProxy, where if you get the value, it returns the current value of the property, and if you set the value, it updates the property with the new value\n * // We use Proxy instead of Object.defineProperty because it allows us to handle nested properties\n * class TodoListElement extends ReactiveElement {\n *   todos = this.query({\n *     queryKey: ['todos'],\n *     queryFn: () => {\n *       return fetch(\"https://api.camijs.com/todos?_limit=5\").then(res => res.json())\n *     },\n *     staleTime: 1000 * 60 * 5 // 5 minutes\n *   })\n *\n *   template() {\n *     // ...template code...\n *   }\n * }\n *\n * // Array value example from _010_taskmgmt.html\n * // this.tasks is an ObservableProxy, where if you get the value, it returns the current value of the property, and if you set the value, it updates the property with the new value\n * // We use Proxy instead of Object.defineProperty because it allows us to handle nested properties\n * class TaskManagerElement extends ReactiveElement {\n *   tasks = [];\n *   filter = 'all';\n *\n *   // ...other methods...\n *\n *   template() {\n *     // ...template code...\n *   }\n * }\n */\n\n/**\n * @typedef ObservableState\n * @property {any} value - The current value of the observable state. This is the value that is returned when accessing a primitive property on a ReactiveElement instance. It can also be used to set a new value for the observable state.\n * @property {function(function(any): any): void} update - A function that updates the value of the observable state. It takes an updater function that receives the current value and returns the new value. This is used when assigning a new value to a primitive property on a ReactiveElement instance. It allows deeply nested updates.\n * @property {function(): void} [dispose] - An optional function that cleans up the observable state when it is no longer needed. This is used internally by ReactiveElement to manage memory.\n */\n\n/**\n * @private\n * @description A cache for storing the results of queries.\n * @type {Map<string, any>}\n */\nconst QueryCache = new Map();\n\n/**\n * @class\n * @description This class is needed to create reactive web components that can automatically update their view when their state changes. All properties are automatically converted to observables. This is achieved by using creating an ObservableProperty, which provides a getter and setter for the property. The getter returns the current value of the property, and the setter updates the value of the property and triggers a re-render of the component.\n * @example\n * ```javascript\n * const { html, ReactiveElement } = cami;\n *\n * class CounterElement extends ReactiveElement {\n *   // Here, 'count' is automatically initialized as an ObservableProperty.\n *   // This means that any changes to 'count' will automatically trigger a re-render of the component.\n *   count = 0\n *\n *   template() {\n *     return html`\n *       <button @click=${() => this.count--}>-</button>\n *       <button @click=${() => this.count++}>+</button>\n *       <div>Count: ${this.count}</div>\n *     `;\n *   }\n * }\n *\n * customElements.define('counter-component', CounterElement);\n * ```\n */\nclass ReactiveElement extends HTMLElement {\n  /**\n   * @constructor\n   * @description Constructs a new instance of ReactiveElement.\n   */\n  constructor() {\n    super();\n    this.onCreate();\n    this.__unsubscribers = new Map();\n    this.__computed = computed.bind(this);\n    this.effect = effect.bind(this);\n    this.__queryFunctions = new Map();\n  }\n\n  /**\n   * @method\n   * @description Creates ObservableProperty or ObservableProxy instances for all properties in the provided object.\n   * @param {Object} attributes - An object with attribute names as keys and optional parsing functions as values.\n   * @example\n   * // In _009_dataFromProps.html, the todos attribute is parsed as JSON and the data property is extracted:\n   * this.observableAttributes({\n   *   todos: (v) => JSON.parse(v).data\n   * });\n   * @returns {void}\n   */\n  observableAttributes(attributes) {\n    Object.entries(attributes).forEach(([attrName, parseFn]) => {\n      // Retrieve the attribute value and apply the transformation function if provided\n      let attrValue = this.getAttribute(attrName);\n      const transformFn = typeof parseFn === 'function' ? parseFn : (v) => v;\n      attrValue = produce(attrValue, transformFn);\n\n      // Create an ObservableProperty or ObservableProxy for the attribute\n      const observable = this.__observable(attrValue, attrName);\n      if (this.__isObjectOrArray(observable.value)) {\n        this.__createObservablePropertyForObjOrArr(this, attrName, observable, true);\n      } else {\n        this.__createObservablePropertyForPrimitive(this, attrName, observable, true);\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Creates a computed observable state and registers it. The computed state is recalculated whenever\n   * one of its dependencies changes. This is useful for creating derived state that automatically updates.\n   *\n   * @example\n   * // Assuming `this.count` is an observable\n   * const countSquared = this.__computed(() => this.count * this.count);\n   * // `countSquared` will automatically update when `this.count` changes\n   *\n   * @param {Function} computeFn - The function to compute the state\n   * @returns {ObservableState} The computed observable state\n   */\n  __computed(computeFn) {\n    const observableState = super._computed(computeFn);\n    console.log(observableState);\n    this.__registerObservables(observableState);\n    return observableState;\n  }\n\n  /**\n   * @method\n   * @description Creates an effect and registers its dispose function. The effect is used to perform side effects in response to state changes.\n   * This method is useful when working with ObservableProperties or ObservableProxies because it triggers the effect whenever the value of the underlying ObservableState changes.\n   * @example\n   * // Assuming `this.count` is an ObservableProperty\n   * this.effect(() => {\n   *   console.log(`The count is now: ${this.count}`);\n   * });\n   * // The console will log the current count whenever `this.count` changes\n   *\n   * @param {Function} effectFn - The function to create the effect\n   * @returns {void}\n   */\n  effect(effectFn) {\n    const dispose = super.effect(effectFn);\n    this.__unsubscribers.set(effectFn, dispose);\n  }\n\n  /**\n   * @method\n   * @description Subscribes to a store and creates an observable for a specific key in the store. This is useful for\n   * synchronizing the component's state with a global store.\n   *\n   * @example\n   * // Assuming there is a store for cart items\n   * // `cartItems` will be an observable reflecting the current state of cart items in the store\n   * this.cartItems = this.connect(CartStore, 'cartItems');\n   *\n   * @param {ObservableStore} store - The store to subscribe to\n   * @param {string} key - The key in the store to create an observable for\n   * @returns {ObservableProxy} An observable property or proxy for the store key\n   */\n    connect(store, key) {\n      if (!(store instanceof ObservableStore)) {\n        throw new TypeError('Expected store to be an instance of ObservableStore');\n      }\n\n      const observable = this.__observable(store.state[key], key);\n      const unsubscribe = store.subscribe(newState => {\n        observable.update(() => newState[key]);\n      });\n      this.__unsubscribers.set(key, unsubscribe);\n\n      if (this.__isObjectOrArray(observable.value)) {\n        this.__createObservablePropertyForObjOrArr(this, key, observable);\n        return this[key];\n      } else {\n        this.__createObservablePropertyForPrimitive(this, key, observable);\n        return this[key];\n      }\n    }\n\n  /**\n   * @method\n   * @description Creates an ObservableStream from a subscription function.\n   * @param {Function} subscribeFn - The subscription function.\n   * @returns {ObservableStream} An ObservableStream that emits values produced by the subscription function.\n   * @example\n   * // In a FormElement component\n   * const inputValidation$ = this.stream();\n   * inputValidation$\n   *   .map(e => this.validateEmail(e.target.value))\n   *   .debounce(300)\n   *   .subscribe(({ isEmailValid, emailError, email }) => {\n   *     this.emailError = emailError;\n   *     this.isEmailValid = isEmailValid;\n   *     this.email = email;\n   *     this.isEmailAvailable = this.queryEmail(this.email);\n   *   });\n   */\n  stream(subscribeFn) {\n    return new ObservableStream(subscribeFn);\n  }\n\n  /**\n   * @method\n   * @throws {Error} If the method template() is not implemented\n   * @returns {void}\n   * @example\n   * // Here's a simple example of a template method implementation\n   * template() {\n   *   return html`<div>Hello World</div>`;\n   * }\n   */\n  template() {\n    throw new Error('[Cami.js] You have to implement the method template()!');\n  }\n\n  /**\n   * @method\n   * @description Fetches data from an API and caches it. This method is based on the TanStack Query defaults: https://tanstack.com/query/latest/docs/react/guides/important-defaults.\n   * @param {Object} options - The options for the query.\n   * @param {Array|string} options.queryKey - The key for the query.\n   * @param {Function} options.queryFn - The function to fetch data.\n   * @param {number} [options.staleTime=0] - The stale time for the query.\n   * @param {boolean} [options.refetchOnWindowFocus=true] - Whether to refetch on window focus.\n   * @param {boolean} [options.refetchOnMount=true] - Whether to refetch on mount.\n   * @param {boolean} [options.refetchOnReconnect=true] - Whether to refetch on network reconnect.\n   * @param {number} [options.refetchInterval=null] - The interval to refetch data.\n   * @param {number} [options.gcTime=1000 * 60 * 5] - The garbage collection time for the query.\n   * @param {number} [options.retry=3] - The number of retry attempts.\n   * @param {Function} [options.retryDelay=(attempt) => Math.pow(2, attempt) * 1000] - The delay before retrying a failed query.\n   * @example\n   * // In _012_blog.html, a query is set up to fetch posts with a stale time of 5 minutes:\n   * const posts = this.query({\n   *   queryKey: [\"posts\"],\n   *   queryFn: () => fetch(\"https://api.camijs.com/posts?_limit=5\").then(res => res.json()),\n   *   staleTime: 1000 * 60 * 5\n   * });\n   * @returns {ObservableProxy} A proxy that contains the state of the query.\n   */\n  query({ queryKey, queryFn, staleTime = 0, refetchOnWindowFocus = true, refetchOnMount = true, refetchOnReconnect = true, refetchInterval = null, gcTime = 1000 * 60 * 5, retry = 3, retryDelay = (attempt) => Math.pow(2, attempt) * 1000 }) {\n    const key = Array.isArray(queryKey)\n    ? queryKey.map(k => typeof k === 'object' ? JSON.stringify(k) : k).join(':')\n    : queryKey;\n    this.__queryFunctions.set(key, queryFn);\n\n    __trace('query', 'Starting query with key:', key);\n\n    const queryState = this.__observable({\n      data: null,\n      status: 'pending',\n      fetchStatus: 'idle',\n      error: null,\n      lastUpdated: QueryCache.has(key) ? QueryCache.get(key).lastUpdated : null\n    }, key);\n\n    const queryProxy = this.__observableProxy(queryState);\n\n    const fetchData = async (attempt = 0) => {\n      const now = Date.now();\n      const cacheEntry = QueryCache.get(key);\n\n      if (cacheEntry && (now - cacheEntry.lastUpdated) < staleTime) {\n        __trace('fetchData (if)', 'Using cached data for key:', key);\n        queryProxy.update(state => {\n          state.data = cacheEntry.data;\n          state.status = 'success';\n          state.fetchStatus = 'idle';\n        });\n      } else {\n        __trace('fetchData (else)', 'Fetching data for key:', key);\n        try {\n          queryProxy.update(state => {\n            state.status = 'pending';\n            state.fetchStatus = 'fetching';\n          });\n          const data = await queryFn();\n          QueryCache.set(key, { data, lastUpdated: now });\n          queryProxy.update(state => {\n            state.data = data;\n            state.status = 'success';\n            state.fetchStatus = 'idle';\n          });\n        } catch (error) {\n          __trace('fetchData (catch)', 'Fetch error for key:', key, error);\n          if (attempt < retry) {\n            setTimeout(() => fetchData(attempt + 1), retryDelay(attempt));\n          } else {\n            queryProxy.update(state => {\n              state.errorDetails = { message: error.message, stack: error.stack };\n              state.status = 'error';\n              state.fetchStatus = 'idle';\n            });\n          }\n        }\n      }\n    }\n\n    // Refetch data when new instances of the query mount\n    if (refetchOnMount) {\n      __trace('query', 'Setting up refetch on mount for key:', key);\n      fetchData();\n    }\n\n    // Refetch data when window is refocused\n    if (refetchOnWindowFocus) {\n      __trace('query', 'Setting up refetch on window focus for key:', key);\n      const refetchOnFocus = () => fetchData();\n      window.addEventListener('focus', refetchOnFocus);\n      this.__unsubscribers.set(`focus:${key}`, () => window.removeEventListener('focus', refetchOnFocus));\n    }\n\n    // Refetch data when network is reconnected\n    if (refetchOnReconnect) {\n      __trace('query', 'Setting up refetch on reconnect for key:', key);\n      window.addEventListener('online', fetchData);\n      this.__unsubscribers.set(`online:${key}`, () => window.removeEventListener('online', fetchData));\n    }\n\n    // Refetch data at a specific interval\n    if (refetchInterval) {\n      __trace('query', 'Setting up refetch interval for key:', key);\n      const intervalId = setInterval(fetchData, refetchInterval);\n      this.__unsubscribers.set(`interval:${key}`, () => clearInterval(intervalId));\n    }\n\n    // Garbage collect data after gcTime\n    const gcTimeout = setTimeout(() => {\n      QueryCache.delete(key);\n    }, gcTime);\n    this.__unsubscribers.set(`gc:${key}`, () => clearTimeout(gcTimeout));\n\n    return queryProxy;\n  }\n\n  /**\n   * @method\n   * @description Performs a mutation and returns an observable proxy. This method is inspired by the TanStack Query mutate method: https://tanstack.com/query/latest/docs/react/guides/mutations.\n   * @param {Object} options - The options for the mutation.\n   * @param {Function} options.mutationFn - The function to perform the mutation.\n   * @param {Function} [options.onMutate] - The function to be called before the mutation is performed.\n   * @param {Function} [options.onError] - The function to be called if the mutation encounters an error.\n   * @param {Function} [options.onSuccess] - The function to be called if the mutation is successful.\n   * @param {Function} [options.onSettled] - The function to be called after the mutation has either succeeded or failed.\n   * @example\n   * // In _012_blog.html, a mutation is set up to add a new post with optimistic UI updates:\n   * const addPost = this.mutation({\n   *   mutationFn: (newPost) => fetch(\"https://api.camijs.com/posts\", {\n   *     method: \"POST\",\n   *     body: JSON.stringify(newPost),\n   *     headers: {\n   *       \"Content-type\": \"application/json; charset=UTF-8\"\n   *     }\n   *   }).then(res => res.json()),\n   *   onMutate: (newPost) => {\n   *     // Snapshot the previous state\n   *     const previousPosts = this.posts.data;\n   *     // Optimistically update to the new value\n   *     this.posts.update(state => {\n   *       state.data.push({ ...newPost, id: Date.now() });\n   *     });\n   *     // Return the rollback function and the new post\n   *     return {\n   *       rollback: () => {\n   *         this.posts.update(state => {\n   *           state.data = previousPosts;\n   *         });\n   *       },\n   *       optimisticPost: newPost\n   *     };\n   *   }\n   * });\n   * @returns {ObservableProxy} A proxy that contains the state of the mutation.\n   */\n  mutation({ mutationFn, onMutate, onError, onSuccess, onSettled }) {\n    const mutationState = this.__observable({\n      data: null,\n      status: 'idle',\n      error: null,\n      isSettled: false\n    }, 'mutation');\n\n    const mutationProxy = this.__observableProxy(mutationState);\n\n    const performMutation = async (variables) => {\n      __trace('mutation', 'Starting mutation for variables:', variables);\n      let context;\n      const previousState = mutationProxy.value;\n\n      if (onMutate) {\n        __trace('mutation', 'Performing optimistic update for variables:', variables);\n        context = onMutate(variables, previousState);\n        mutationProxy.update(state => {\n          state.data = context.optimisticData;\n          state.status = 'pending';\n          state.errorDetails = null;\n        });\n      } else {\n        __trace('mutation', 'Performing mutation without optimistic update for variables:', variables);\n        mutationProxy.update(state => {\n          state.status = 'pending';\n          state.errorDetails = null;\n        });\n      }\n\n      try {\n        const data = await mutationFn(variables);\n        mutationProxy.update(state => {\n          state.data = data;\n          state.status = 'success';\n        });\n        if (onSuccess) {\n          onSuccess(data, variables, context);\n        }\n        __trace('mutation', 'Mutation successful for variables:', variables, data);\n      } catch (error) {\n        __trace('mutation', 'Mutation error for variables:', variables, error);\n        mutationProxy.update(state => {\n          state.errorDetails = { message: error.message };\n          state.status = 'error';\n          if (!onError && context && context.rollback) {\n            __trace('mutation', 'Rolling back mutation for variables:', variables);\n            context.rollback();\n          }\n        });\n        if (onError) {\n          onError(error, variables, context);\n        }\n      } finally {\n        if (!mutationProxy.value.isSettled) {\n          mutationProxy.update(state => {\n            state.isSettled = true\n          });\n          if (onSettled) {\n            __trace('mutation', 'Calling onSettled for variables:', variables);\n            onSettled(mutationProxy.value.data, mutationProxy.value.error, variables, context);\n          }\n        }\n      }\n    };\n\n    mutationProxy.mutate = performMutation;\n\n    mutationProxy.reset = () => {\n      mutationProxy.update(state => {\n        state.data = null;\n        state.status = 'idle';\n        state.errorDetails = null;\n        state.isSettled = false;\n      });\n    };\n\n    return mutationProxy;\n  }\n\n  /**\n   * @method\n   * @description Invalidates the queries with the given key by clearing the cache. To reflect the latest state in the UI, one will still need to manually refetch the data after invalidation. This method is particularly useful when used in conjunction with mutations, such as in the `onSettled` callback, to ensure that the UI reflects the latest state.\n   *\n   * @example\n   * // In a mutation's `onSettled` callback within a `BlogComponent`:\n   * this.addPost = this.mutation({\n   *   // ...mutation config...\n   *   onSettled: () => {\n   *     // Invalidate the posts query to clear the cache\n   *     this.invalidateQueries(['posts']);\n   *     // Manually refetch the posts to update the UI with the true state\n   *     this.fetchPosts(); // this assumes something like this.posts = this.query({ ... })\n   *   }\n   * });\n   *\n   * @param {Array|string} queryKey - The key for the query to invalidate.\n   * @returns {void}\n   */\n  invalidateQueries(queryKey) {\n    // Convert the queryKey to a string if it's an array for consistency with the cache keys\n    const key = Array.isArray(queryKey) ? queryKey.join(':') : queryKey;\n    __trace('invalidateQueries', 'Invalidating query with key:', key);\n\n    QueryCache.delete(key);\n\n    this.__updateCache(key);\n  }\n\n  /**\n   * @method\n   * @description Called when the component is created. Can be overridden by subclasses to add initialization logic.\n   * This method is a hook for the connectedCallback, which is invoked each time the custom element is appended into a document-connected element.\n   * @returns {void}\n   * @example\n   * onCreate() {\n   *   // Example initialization logic here\n   *   this.posts = this.query({\n   *     queryKey: [\"posts\"],\n   *     queryFn: () => {\n   *       return fetch(\"https://api.camijs.com/posts?_limit=5\")\n   *         .then(res => res.json())\n   *     },\n   *     staleTime: 1000 * 60 * 5 // 5 minutes\n   *   });\n   * }\n   */\n  onCreate() {\n    // Default implementation does nothing.\n    // Subclasses can override this to add initialization logic.\n  }\n\n\n  /**\n   * @method\n   * @description Invoked when the custom element is appended into a document-connected element. Sets up initial state and triggers initial rendering.\n   * This is typically used to initialize component state, fetch data, and set up event listeners.\n   *\n   * @example\n   * // In a TodoList component\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   this.fetchTodos(); // Fetch todos when the component is added to the DOM\n   * }\n   * @returns {void}\n   */\n  connectedCallback() {\n    this.__setup({ infer: true });\n    this.effect(() => this.render());\n    this.render();\n    this.onConnect();\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is connected to the document's DOM.\n   * @returns {void}\n   * Subclasses can override this to add initialization logic when the component is added to the DOM.\n   *\n   * @example\n   * // In a UserCard component\n   * onConnect() {\n   *   this.showUserDetails(); // Display user details when the component is connected\n   * }\n   */\n  onConnect() {\n    // Default implementation does nothing.\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is disconnected from the document's DOM.\n   * This is a good place to remove event listeners, cancel any ongoing network requests, or clean up any resources.\n   * @returns {void}\n   * @example\n   * // In a Modal component\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   this.close(); // Close the modal when it's disconnected from the DOM\n   * }\n   * @returns {void}\n   */\n  disconnectedCallback() {\n    this.onDisconnect();\n    this.__unsubscribers.forEach(unsubscribe => unsubscribe());\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is disconnected from the document's DOM.\n   * Subclasses can override this to add cleanup logic when the component is removed from the DOM.\n   * @returns {void}\n   *\n   * @example\n   * // In a VideoPlayer component\n   * onDisconnect() {\n   *   this.stopPlayback(); // Stop video playback when the component is removed\n   * }\n   **/\n  onDisconnect() {\n    // Default implementation does nothing.\n  }\n\n  /**\n   * @method\n   * @description Invoked when an attribute of the custom element is added, removed, updated, or replaced.\n   * This can be used to react to attribute changes, such as updating the component state or modifying its appearance.\n   *\n   * @example\n   * // In a ThemeSwitcher component\n   * attributeChangedCallback(name, oldValue, newValue) {\n   *   super.attributeChangedCallback(name, oldValue, newValue);\n   *   if (name === 'theme') {\n   *     this.updateTheme(newValue); // Update the theme when the `theme` attribute changes\n   *   }\n   * }\n   * @param {string} name - The name of the attribute that changed\n   * @param {string} oldValue - The old value of the attribute\n   * @param {string} newValue - The new value of the attribute\n   * @returns {void}\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    this.onAttributeChange(name, oldValue, newValue);\n  }\n\n  /**\n   * @method\n   * @description Invoked when an attribute of the custom element is added, removed, updated, or replaced.\n   * @returns {void}\n   * Subclasses can override this to add logic that should run when an attribute changes.\n   *\n   * @example\n   * // In a CollapsiblePanel component\n   * onAttributeChange(name, oldValue, newValue) {\n   *   if (name === 'collapsed') {\n   *     this.toggleCollapse(newValue === 'true'); // Toggle collapse when the `collapsed` attribute changes\n   *   }\n   * }\n   **/\n  onAttributeChange(name, oldValue, newValue) {\n    // Default implementation does nothing.\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is moved to a new document.\n   * This can be used to update bindings or perform re-initialization as needed when the component is adopted into a new DOM context.\n   * @returns {void}\n   * @example\n   * // In a DragDropContainer component\n   * adoptedCallback() {\n   *   super.adoptedCallback();\n   *   this.updateDragDropContext(); // Update context when the component is moved to a new document\n   * }\n   * @returns {void}\n   */\n  adoptedCallback() {\n    this.onAdopt();\n  }\n\n  /**\n   * @method\n   * @description Invoked when the custom element is moved to a new document.\n   * Subclasses can override this to add logic that should run when the component is moved to a new document.\n   * @returns {void}\n   * @example\n   * // In a DataGrid component\n   * onAdopt() {\n   *   this.refreshData(); // Refresh data when the component is adopted into a new document\n   * }\n   **/\n  onAdopt() {\n    // Default implementation does nothing.\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Checks if the provided value is an object or an array.\n   * @param {any} value - The value to check.\n   * @returns {boolean} True if the value is an object or an array, false otherwise.\n   */\n  __isObjectOrArray(value) {\n    return value !== null && (typeof value === 'object' || Array.isArray(value));\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Private method. Creates an ObservableProperty for the provided key in the given context when the provided value is an object or an array.\n   * @param {Object} context - The context in which the property is defined.\n   * @param {string} key - The property key.\n   * @param {ObservableState} observable - The observable to bind to the property.\n   * @param {boolean} [isAttribute=false] - Whether the property is an attribute.\n   * @throws {TypeError} If observable is not an instance of ObservableState.\n   * @returns {void}\n   */\n  __createObservablePropertyForObjOrArr(context, key, observable, isAttribute = false) {\n    if (!(observable instanceof ObservableState)) {\n      throw new TypeError('Expected observable to be an instance of ObservableState');\n    }\n\n    const proxy = this.__observableProxy(observable);\n    Object.defineProperty(context, key, {\n      get: () => proxy,\n      set: newValue => {\n        observable.update(() => newValue);\n        if (isAttribute) {\n          this.setAttribute(key, newValue);\n        }\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Private method. Handles the case when the provided value is not an object or an array.\n   * This method creates an ObservableProperty for the provided key in the given context.\n   * An ObservableProperty is a special type of property that can notify about changes in its state.\n   * This is achieved by defining a getter and a setter for the property using Object.defineProperty.\n   * The getter simply returns the current value of the observable.\n   * The setter updates the observable with the new value and, if the property is an attribute, also updates the attribute.\n   * @param {Object} context - The context in which the property is defined.\n   * @param {string} key - The property key.\n   * @param {ObservableState} observable - The observable to bind to the property.\n   * @param {boolean} [isAttribute=false] - Whether the property is an attribute.\n   * @throws {TypeError} If observable is not an instance of ObservableState.\n   * @returns {void}\n   */\n  __createObservablePropertyForPrimitive(context, key, observable, isAttribute = false) {\n    if (!(observable instanceof ObservableState)) {\n      throw new TypeError('Expected observable to be an instance of ObservableState');\n    }\n\n    Object.defineProperty(context, key, {\n      get: () => observable.value,\n      set: newValue => {\n        observable.update(() => newValue);\n        if (isAttribute) {\n          this.setAttribute(key, newValue);\n        }\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Creates a proxy for the observable.\n   * @param {ObservableState} observable - The observable for which a proxy is to be created.\n   * @throws {TypeError} If observable is not an instance of ObservableState.\n   * @returns {ObservableProxy} The created proxy.\n   */\n  __observableProxy(observable) {\n    return new ObservableProxy(observable);\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Defines the observables, computed properties, effects, and attributes for the element.\n   * @param {Object} config - The configuration object.\n   * @returns {void}\n   */\n  __setup(config) {\n    if (config.infer === true) {\n      Object.keys(this).forEach(key => {\n        if (typeof this[key] !== 'function' && !key.startsWith('__')) {\n          if (this[key] instanceof Observable) {\n            return;\n          } else {\n            const observable = this.__observable(this[key], key);\n            if (this.__isObjectOrArray(observable.value)) {\n              this.__createObservablePropertyForObjOrArr(this, key, observable);\n            } else {\n              this.__createObservablePropertyForPrimitive(this, key, observable);\n            }\n          }\n        }\n      })\n    }\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Creates an observable with an initial value.\n   * @param {any} initialValue - The initial value for the observable.\n   * @param {string} [name] - The name of the observable.\n   * @throws {Error} If the type of initialValue is not allowed in observables.\n   * @returns {ObservableState} The created observable state.\n   */\n  __observable(initialValue, _name) {\n    if (!this.__isAllowedType(initialValue)) {\n      const type = Object.prototype.toString.call(initialValue);\n      throw new Error(`[Cami.js] The value of type ${type} is not allowed in observables. Only primitive values, arrays, and plain objects are allowed.`);\n    }\n\n    const observable = new ObservableState(initialValue, null, { name: _name });\n\n    this.__registerObservables(observable);\n    return observable;\n  }\n\n  /**\n   * @private\n   * @method\n   * Updates the cache for the given key by refetching the data.\n   * @param {string} key - The key for the query to refetch.\n   * @returns {void}\n   */\n  __updateCache(key) {\n    __trace('__updateCache', 'Invalidating cache with key:', key);\n    const queryFn = this.__queryFunctions.get(key);\n\n    if (queryFn) {\n      __trace('__updateCache', 'Found query function for key:', key);\n      // Snapshot the previous state before the optimistic update\n      const previousState = QueryCache.get(key) || { data: undefined, status: 'idle', error: null };\n\n      // Optimistically update the UI assuming the fetch will succeed\n      QueryCache.set(key, {\n        ...previousState,\n        status: 'pending',\n        error: null,\n      });\n\n      // Trigger the refetch\n      queryFn().then(data => {\n        QueryCache.set(key, {\n          data: data,\n          status: 'success',\n          error: null,\n          lastUpdated: Date.now(),\n        });\n        __trace('__updateCache', 'Refetch successful for key:', key, data);\n      }).catch(error => {\n        if (previousState.data !== undefined) {\n          __trace('__updateCache', 'Rolling back refetch for key:', key);\n          QueryCache.set(key, previousState);\n        }\n\n        QueryCache.set(key, {\n          ...previousState,\n          status: 'error',\n          error: error,\n        });\n      });\n    }\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Checks if the provided value is of an allowed type\n   * @param {any} value - The value to check\n   * @returns {boolean} True if the value is of an allowed type, false otherwise\n   */\n  __isAllowedType(value) {\n    const allowedTypes = ['number', 'string', 'boolean', 'object', 'undefined'];\n    const valueType = typeof value;\n\n    if (valueType === 'object') {\n      return value === null || Array.isArray(value) || this.__isPlainObject(value);\n    }\n\n    return allowedTypes.includes(valueType);\n  }\n\n  /**\n   * @private\n   * @method\n   * @description Checks if the provided value is a plain object\n   * @param {any} value - The value to check\n   * @returns {boolean} True if the value is a plain object, false otherwise\n   */\n  __isPlainObject(value) {\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\n      return false;\n    }\n\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.prototype;\n  }\n\n\n  /**\n   * @private\n   * @method\n   * @description Registers an observable state to the list of unsubscribers\n   * @param {ObservableState} observableState - The observable state to register\n   * @returns {void}\n   */\n  __registerObservables(observableState) {\n    if (!(observableState instanceof ObservableState)) {\n      throw new TypeError('Expected observableState to be an instance of ObservableState');\n    }\n\n    // Only computeds and effects have a dispose method\n    this.__unsubscribers.set(observableState, () => {\n     if (typeof observableState.dispose === 'function') {\n       observableState.dispose();\n     }\n   });\n  }\n\n  /**\n   * @method\n   * This method is responsible for updating the view whenever the state changes. It does this by rendering the template with the current state.\n   * @returns {void}\n   */\n  render() {\n    const template = this.template();\n    __litRender(template, this);\n  }\n}\n\nexport { ReactiveElement };\n\n", "import { ObservableStream } from './observable-stream.js';\n\n/**\n * @class\n * @description Observable class that wraps a DOM element and allows observing its events.\n * @example\n * ```javascript\n * const { ObservableElement } = cami;\n * const draggableElement = new ObservableElement(\".draggable\");\n * draggableElement.on('click').subscribe({\n *   next: event => console.log('drag event', event),\n *   error: err => console.error(err),\n * });\n * ```\n */\nclass ObservableElement extends ObservableStream {\n  /**\n   * @constructor\n   * @param {string|Element} selectorOrElement - The CSS selector of the element to observe or the DOM element itself\n   * @throws {Error} If no element matches the provided selector or the provided DOM element is null\n   * @example\n   * ```javascript\n   * const { ObservableElement } = cami;\n   * const draggableElement = new ObservableElement(\".draggable\");\n   * ```\n   */\n  constructor(selectorOrElement) {\n    super();\n    /** @type {Element} */\n    if (typeof selectorOrElement === 'string') {\n      this.element = document.querySelector(selectorOrElement);\n      if (!this.element) {\n        throw new Error(`[Cami.js] Element not found for selector: ${selectorOrElement}`);\n      }\n    } else if (selectorOrElement instanceof Element || selectorOrElement instanceof Document) {\n      this.element = selectorOrElement;\n    } else {\n      throw new Error(`[Cami.js] Invalid argument: ${selectorOrElement}`);\n    }\n  }\n\n  /**\n   * @method\n   * @param {string} eventType - The type of the event to observe\n   * @param {Object} options - The options to pass to addEventListener\n   * @returns {ObservableStream} An ObservableStream that emits the observed events\n   * @example\n   * ```javascript\n   * const { ObservableElement } = cami;\n   * const draggableElement = new ObservableElement(\".draggable\");\n   * draggableElement.on('click').subscribe({\n   *   next: event => console.log('drag event', event),\n   *   error: err => console.error(err),\n   * });\n   * ```\n   */\n  on(eventType, options = {}) {\n    return new ObservableStream(subscriber => {\n      const eventListener = event => {\n        subscriber.next(event);\n      };\n\n      this.element.addEventListener(eventType, eventListener, options);\n\n      return () => {\n        this.element.removeEventListener(eventType, eventListener, options);\n      };\n    });\n  }\n}\n\nexport { ObservableElement };\n", "/**\n * @license\n * http.js\n * Copyright (c) 2023 Kenn Costales\n * MIT License\n */\n\nimport { ObservableStream } from './observables/observable-stream.js';\n\n/**\n * @class HTTPStream\n * @extends ObservableStream\n * @description A class that extends ObservableStream and provides additional methods for handling HTTP requests.\n */\nclass HTTPStream extends ObservableStream {\n  __handlers = {};\n\n  /**\n   * @method toJson\n   * @memberof HTTPStream\n   * @description Converts the response data to JSON.\n   * @returns {Promise} A promise that resolves to the JSON data.\n   * @example\n   * http('https://api.example.com/data')\n   *   .toJson()\n   *   .then(data => console.log(data))\n   *   .catch(error => console.error(error));\n   */\n  toJson() {\n    return new Promise((resolve, reject) => {\n      this.subscribe({\n        next: data => {\n          try {\n            if (typeof data === 'object') {\n              resolve(data);\n            } else {\n              resolve(JSON.parse(data));\n            }\n          } catch (error) {\n            reject(error);\n          }\n        },\n        error: error => reject(error)\n      });\n    });\n  }\n\n  /**\n   * @method on\n   * @memberof HTTPStream\n   * @description Registers an event handler for a specified event.\n   * @param {string} event - The event to register the handler for.\n   * @param {function} handler - The handler function.\n   * @returns {HTTPStream} The HTTPStream instance.\n   */\n  on(event, handler) {\n    if (!this.__handlers[event]) {\n      this.__handlers[event] = [];\n    }\n    this.__handlers[event].push(handler);\n    return this;\n  }\n}\n\n/**\n * @function http\n * @description Sends an HTTP request.\n * @param {Object|string} config - The configuration object or URL string.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http('https://api.example.com/data')\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n **/\nconst http = (config) => {\n  if (typeof config === 'string') {\n    return http.get(config);\n  }\n\n  return new HTTPStream((observer) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(config.method || 'GET', config.url);\n\n    if (config.headers) {\n      Object.keys(config.headers).forEach((key) => {\n        xhr.setRequestHeader(key, config.headers[key]);\n      });\n    }\n\n    xhr.onload = () => {\n      let response = xhr.responseText;\n      const transformResponse = config.transformResponse || ((data) => {\n        try {\n          return JSON.parse(data);\n        } catch {\n          return data;\n        }\n      });\n      response = transformResponse(response);\n      observer.next(response);\n      observer.complete();\n    };\n\n    xhr.onerror = () => observer.error(xhr.statusText);\n    xhr.send(config.data ? JSON.stringify(config.data) : null);\n\n    return () => {\n      xhr.abort();\n    };\n  });\n};\n\n/**\n * @function http.get\n * @description Sends a GET request.\n * @param {string} url - The URL to send the GET request to.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.get('https://api.example.com/data')\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.get = (url, config = {}) => {\n  config.url = url;\n  config.method = 'GET';\n  return http(config);\n};\n\n/**\n * @function http.post\n * @description Sends a POST request.\n * @param {string} url - The URL to send the POST request to.\n * @param {Object} [data={}] - The data to send in the body of the POST request.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.post('https://api.camijs.com/posts', { title: 'foo', body: 'bar', userId: 1 })\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.post = (url, data = {}, config = {}) => {\n  config.url = url;\n  config.data = data;\n  config.method = 'POST';\n  return http(config);\n};\n\n/**\n * @function http.put\n * @description Sends a PUT request.\n * @param {string} url - The URL to send the PUT request to.\n * @param {Object} [data={}] - The data to send in the body of the PUT request.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.put('https://api.camijs.com/posts/1', { id: 1, title: 'foo', body: 'bar', userId: 1 })\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.put = (url, data = {}, config = {}) => {\n  config.url = url;\n  config.data = data;\n  config.method = 'PUT';\n  return http(config);\n};\n\n/**\n * @function http.patch\n * @description Sends a PATCH request.\n * @param {string} url - The URL to send the PATCH request to.\n * @param {Object} [data={}] - The data to send in the body of the PATCH request.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.patch('https://api.camijs.com/posts/1', { title: 'foo' })\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.patch = (url, data = {}, config = {}) => {\n  config.url = url;\n  config.data = data;\n  config.method = 'PATCH';\n  return http(config);\n};\n\n/**\n * @function http.delete\n * @description Sends a DELETE request.\n * @param {string} url - The URL to send the DELETE request to.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream that resolves to the response data.\n * @example\n * http.delete('https://api.camijs.com/posts/1')\n *   .tap(data => console.log(data))\n *   .catchError(error => console.error(error));\n */\nhttp.delete = (url, config = {}) => {\n  config.url = url;\n  config.method = 'DELETE';\n  return http(config);\n};\n\n/**\n * @function http.sse\n * @description Establishes a Server-Sent Events connection.\n * @param {string} url - The URL to establish a Server-Sent Events connection.\n * @param {Object} [config={}] - Optional configuration object.\n * @returns {HTTPStream} An HTTPStream with methods to register event handlers, handle errors, and close the connection.\n * @example\n * const stream = http.sse('https://api.example.com/events');\n * stream.on('message', event => console.log(event.data));\n * stream.catchError(error => console.error(error));\n */\nhttp.sse = (url, config = {}) => {\n  const stream = new HTTPStream((observer) => {\n    const source = new EventSource(url, config);\n\n    source.onmessage = (event) => {\n      if (stream.__handlers[event.type]) {\n        stream.__handlers[event.type].forEach(handler => handler(event));\n      }\n      observer.next(event);\n    };\n    source.onerror = (error) => observer.error(error);\n\n    return () => {\n      source.close();\n    };\n  });\n\n  return stream;\n};\n\nexport { http };\n", "/**\n * @license\n * cami.js\n * Copyright (c) 2023 Kenn Costales\n * MIT License\n */\n\n/**\n * @module cami\n */\nimport { html, render, svg } from './html.js';\nimport { produce } from \"./produce.js\"\nimport { ReactiveElement } from './reactive-element.js';\nimport { ObservableStore, store, slice } from './observables/observable-store.js';\nimport { Observable } from './observables/observable.js';\nimport { ObservableState, computed, effect } from './observables/observable-state.js';\nimport { ObservableStream } from './observables/observable-stream.js';\nimport { ObservableElement } from './observables/observable-element.js';\nimport { __config } from './config.js';\nimport { __trace } from './trace.js';\nimport { http } from './http.js';\n\nconst { debug, events } = __config;\n\n/**\n * @exports store - The store object from observable-store.js. This uses local storage by default.\n * @exports slice - The slice function from observable-store.js. This allows creating slices of the store.\n * @exports html - The html function from html.js\n * @exports svg - The svg function from html.js\n * @exports ReactiveElement - The ReactiveElement class from reactive_element.js\n * @exports ObservableStream - The ObservableStream class from observable-stream.js\n * @exports ObservableElement - The ObservableElement class from observable-element.js\n * @exports Observable - The Observable class from observable.js\n * @exports ObservableState - The ObservableState class from observable-state.js\n * @exports ObservableStore - The ObservableStore class from observable-store.js\n * @exports http - The http function from http.js\n * @exports debug - The debug property from __config\n * @exports events - The events property from __config\n */\nexport { store, slice, html, svg, ReactiveElement, ObservableStream, ObservableElement, Observable, ObservableState, ObservableStore, http, debug, events, computed, effect };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAM,SAAS;AACf,IAAM,OAAO,CAAC,SAAS;AACvB,IAAM,eAAe,OAAO;AAS5B,IAAM,SAAS,eACT,aAAa,aAAa,aAAa;AAAA,EACrC,YAAY,CAAC,MAAM;AACvB,CAAC,IACC;AAGN,IAAM,uBAAuB;AAK7B,IAAM,SAAS,QAAQ,OAAO,KAAK,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;AAErD,IAAM,cAAc,MAAM;AAG1B,IAAM,aAAa,IAAI,WAAW;AAClC,IAAM,IAAI;AAEV,IAAM,eAAe,MAAM,EAAE,cAAc,EAAE;AAC7C,IAAM,cAAc,CAAC,UAAU,UAAU,QAAS,OAAO,SAAS,YAAY,OAAO,SAAS;AAC9F,IAAM,UAAU,MAAM;AACtB,IAAM,aAAa,CAAC,UAAU,QAAQ,KAAK;AAEvC,QAAO,+BAAQ,OAAO,eAAc;AACxC,IAAM,aAAa;AAAA;AACnB,IAAM,kBAAkB;AAAA;AACxB,IAAM,YAAY;AAclB,IAAM,eAAe;AACrB,IAAM,gBAAgB;AACtB,IAAM,WAAW;AACjB,IAAM,mBAAmB;AACzB,IAAM,kBAAkB;AAIxB,IAAM,mBAAmB;AAuBzB,IAAM,cAAc,IAAI,OAAO,KAAK,UAAU,OAAO,SAAS,MAAM,UAAU,KAAK,UAAU,OAAO,eAAe,gBAAgB,GAAG;AACtI,IAAM,eAAe;AACrB,IAAM,iBAAiB;AACvB,IAAM,oBAAoB;AAC1B,IAAM,aAAa;AACnB,IAAM,0BAA0B;AAChC,IAAM,0BAA0B;AAOhC,IAAM,iBAAiB;AAEvB,IAAM,cAAc;AACpB,IAAM,aAAa;AAGnB,IAAM,iBAAiB;AACvB,IAAM,aAAa;AACnB,IAAM,gBAAgB;AACtB,IAAM,yBAAyB;AAC/B,IAAM,aAAa;AACnB,IAAM,eAAe;AACrB,IAAM,eAAe;AAKrB,IAAM,MAAM,CAAC,SAAS,CAAC,YAAY,WAAW;AAC1C,SAAO;AAAA;AAAA,IAEH,CAAC,aAAa,GAAG;AAAA,IACjB;AAAA,IACA;AAAA,EACJ;AACJ;AAcA,IAAM,OAAO,IAAI,WAAW;AAwB5B,IAAM,MAAM,IAAI,UAAU;AAK1B,IAAM,WAAW,OAAO,IAAI,eAAe;AAoB3C,IAAM,UAAU,OAAO,IAAI,cAAc;AAQzC,IAAM,gBAAgB,oBAAI,QAAQ;AAClC,IAAM,SAAS,EAAE;AAAA,EAAiB;AAAA,EAAG;AAAA;AAA2C;AAChF,SAAS,wBAAwB,KAAK,eAAe;AAMjD,MAAI,CAAC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,eAAe,KAAK,GAAG;AACnD,QAAI,UAAU;AACd,UAAM,IAAI,MAAM,OAAO;AAAA,EAC3B;AACA,SAAO,WAAW,SACZ,OAAO,WAAW,aAAa,IAC/B;AACV;AAaA,IAAM,kBAAkB,CAAC,SAAS,SAAS;AAOvC,QAAM,IAAI,QAAQ,SAAS;AAI3B,QAAM,YAAY,CAAC;AACnB,MAAIA,QAAO,SAAS,aAAa,UAAU;AAI3C,MAAI;AAGJ,MAAI,QAAQ;AACZ,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,UAAM,IAAI,QAAQ,CAAC;AAMnB,QAAI,mBAAmB;AACvB,QAAI;AACJ,QAAI,YAAY;AAChB,QAAI;AAGJ,WAAO,YAAY,EAAE,QAAQ;AAEzB,YAAM,YAAY;AAClB,cAAQ,MAAM,KAAK,CAAC;AACpB,UAAI,UAAU,MAAM;AAChB;AAAA,MACJ;AACA,kBAAY,MAAM;AAClB,UAAI,UAAU,cAAc;AACxB,YAAI,MAAM,aAAa,MAAM,OAAO;AAChC,kBAAQ;AAAA,QACZ,WACS,MAAM,aAAa,MAAM,QAAW;AAEzC,kBAAQ;AAAA,QACZ,WACS,MAAM,QAAQ,MAAM,QAAW;AACpC,cAAI,eAAe,KAAK,MAAM,QAAQ,CAAC,GAAG;AAGtC,8BAAkB,IAAI,OAAO,KAAK,MAAM,QAAQ,CAAC,IAAI,GAAG;AAAA,UAC5D;AACA,kBAAQ;AAAA,QACZ,WACS,MAAM,gBAAgB,MAAM,QAAW;AAC5C,kBAAQ;AAAA,QACZ;AAAA,MACJ,WACS,UAAU,aAAa;AAC5B,YAAI,MAAM,YAAY,MAAM,KAAK;AAG7B,kBAAQ,4CAAmB;AAG3B,6BAAmB;AAAA,QACvB,WACS,MAAM,cAAc,MAAM,QAAW;AAE1C,6BAAmB;AAAA,QACvB,OACK;AACD,6BAAmB,MAAM,YAAY,MAAM,iBAAiB,EAAE;AAC9D,qBAAW,MAAM,cAAc;AAC/B,kBACI,MAAM,UAAU,MAAM,SAChB,cACA,MAAM,UAAU,MAAM,MAClB,0BACA;AAAA,QAClB;AAAA,MACJ,WACS,UAAU,2BACf,UAAU,yBAAyB;AACnC,gBAAQ;AAAA,MACZ,WACS,UAAU,mBAAmB,UAAU,kBAAkB;AAC9D,gBAAQ;AAAA,MACZ,OACK;AAGD,gBAAQ;AACR,0BAAkB;AAAA,MACtB;AAAA,IACJ;AAaA,UAAM,MAAM,UAAU,eAAe,QAAQ,IAAI,CAAC,EAAE,WAAW,IAAI,IAAI,MAAM;AAC7E,IAAAA,SACI,UAAU,eACJ,IAAI,aACJ,oBAAoB,KACf,UAAU,KAAK,QAAQ,GACtB,EAAE,MAAM,GAAG,gBAAgB,IACvB,uBACA,EAAE,MAAM,gBAAgB,KAC5B,SACA,MACF,IAAI,UAAU,qBAAqB,KAAK,IAAI;AAAA,EAC9D;AACA,QAAM,aAAaA,SAAQ,QAAQ,CAAC,KAAK,UAAU,SAAS,aAAa,WAAW;AAEpF,SAAO,CAAC,wBAAwB,SAAS,UAAU,GAAG,SAAS;AACnE;AACA,IAAM,WAAN,MAAM,UAAS;AAAA,EACX,YAEA,EAAE,SAAS,CAAC,aAAa,GAAG,KAAK,GAAG,SAAS;AACzC,SAAK,QAAQ,CAAC;AACd,QAAI;AACJ,QAAI,YAAY;AAChB,QAAI,gBAAgB;AACpB,UAAM,YAAY,QAAQ,SAAS;AACnC,UAAM,QAAQ,KAAK;AAEnB,UAAM,CAACA,OAAM,SAAS,IAAI,gBAAgB,SAAS,IAAI;AACvD,SAAK,KAAK,UAAS,cAAcA,OAAM,OAAO;AAC9C,WAAO,cAAc,KAAK,GAAG;AAE7B,QAAI,SAAS,YAAY;AACrB,YAAM,aAAa,KAAK,GAAG,QAAQ;AACnC,iBAAW,YAAY,GAAG,WAAW,UAAU;AAAA,IACnD;AAEA,YAAQ,OAAO,OAAO,SAAS,OAAO,QAAQ,MAAM,SAAS,WAAW;AACpE,UAAI,KAAK,aAAa,GAAG;AAIrB,YAAI,KAAK,cAAc,GAAG;AACtB,qBAAW,QAAQ,KAAK,kBAAkB,GAAG;AACzC,gBAAI,KAAK,SAAS,oBAAoB,GAAG;AACrC,oBAAM,WAAW,UAAU,eAAe;AAC1C,oBAAM,QAAQ,KAAK,aAAa,IAAI;AACpC,oBAAM,UAAU,MAAM,MAAM,MAAM;AAClC,oBAAM,IAAI,eAAe,KAAK,QAAQ;AACtC,oBAAM,KAAK;AAAA,gBACP,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,MAAM,EAAE,CAAC;AAAA,gBACT,SAAS;AAAA,gBACT,MAAM,EAAE,CAAC,MAAM,MACT,eACA,EAAE,CAAC,MAAM,MACL,uBACA,EAAE,CAAC,MAAM,MACL,YACA;AAAA,cAClB,CAAC;AACD,mBAAK,gBAAgB,IAAI;AAAA,YAC7B,WACS,KAAK,WAAW,MAAM,GAAG;AAC9B,oBAAM,KAAK;AAAA,gBACP,MAAM;AAAA,gBACN,OAAO;AAAA,cACX,CAAC;AACD,mBAAK,gBAAgB,IAAI;AAAA,YAC7B;AAAA,UACJ;AAAA,QACJ;AAGA,YAAI,eAAe,KAAK,KAAK,OAAO,GAAG;AAInC,gBAAMC,WAAU,KAAK,YAAY,MAAM,MAAM;AAC7C,gBAAM,YAAYA,SAAQ,SAAS;AACnC,cAAI,YAAY,GAAG;AACf,iBAAK,cAAc,eACb,aAAa,cACb;AAMN,qBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,mBAAK,OAAOA,SAAQ,CAAC,GAAG,aAAa,CAAC;AAEtC,qBAAO,SAAS;AAChB,oBAAM,KAAK,EAAE,MAAM,YAAY,OAAO,EAAE,UAAU,CAAC;AAAA,YACvD;AAIA,iBAAK,OAAOA,SAAQ,SAAS,GAAG,aAAa,CAAC;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ,WACS,KAAK,aAAa,GAAG;AAC1B,cAAM,OAAO,KAAK;AAClB,YAAI,SAAS,aAAa;AACtB,gBAAM,KAAK,EAAE,MAAM,YAAY,OAAO,UAAU,CAAC;AAAA,QACrD,OACK;AACD,cAAI,IAAI;AACR,kBAAQ,IAAI,KAAK,KAAK,QAAQ,QAAQ,IAAI,CAAC,OAAO,IAAI;AAGlD,kBAAM,KAAK,EAAE,MAAM,cAAc,OAAO,UAAU,CAAC;AAEnD,iBAAK,OAAO,SAAS;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,OAAO,cAAcD,OAAM,UAAU;AACjC,UAAM,KAAK,EAAE,cAAc,UAAU;AACrC,OAAG,YAAYA;AACf,WAAO;AAAA,EACX;AACJ;AACA,SAAS,iBAAiB,MAAM,OAAO,SAAS,MAAM,gBAAgB;AApdtE;AAudI,MAAI,UAAU,UAAU;AACpB,WAAO;AAAA,EACX;AACA,MAAI,mBAAmB,mBAAmB,UACpC,YAAO,iBAAP,mBAAsB,kBACtB,OAAO;AACb,QAAM,2BAA2B,YAAY,KAAK,IAC5C;AAAA;AAAA,IAEE,MAAM,kBAAkB;AAAA;AAChC,OAAI,qDAAkB,iBAAgB,0BAA0B;AAE5D,+DAAmB,0CAAnB,0CAA2D;AAC3D,QAAI,6BAA6B,QAAW;AACxC,yBAAmB;AAAA,IACvB,OACK;AACD,yBAAmB,IAAI,yBAAyB,IAAI;AACpD,uBAAiB,aAAa,MAAM,QAAQ,cAAc;AAAA,IAC9D;AACA,QAAI,mBAAmB,QAAW;AAC9B,QAAC,YAAO,iBAAP,mBAAO,eAAiB,CAAC,GAAG,cAAc,IACvC;AAAA,IACR,OACK;AACD,aAAO,cAAc;AAAA,IACzB;AAAA,EACJ;AACA,MAAI,qBAAqB,QAAW;AAChC,YAAQ,iBAAiB,MAAM,iBAAiB,UAAU,MAAM,MAAM,MAAM,GAAG,kBAAkB,cAAc;AAAA,EACnH;AACA,SAAO;AACX;AAKA,IAAM,mBAAN,MAAuB;AAAA,EACnB,YAAY,UAAU,QAAQ;AAC1B,SAAK,UAAU,CAAC;AAEhB,SAAK,2BAA2B;AAChC,SAAK,aAAa;AAClB,SAAK,WAAW;AAAA,EACpB;AAAA;AAAA,EAEA,IAAI,aAAa;AACb,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,gBAAgB;AAChB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA;AAAA,EAGA,OAAO,SAAS;AA9gBpB;AA+gBQ,UAAM,EAAE,IAAI,EAAE,QAAQ,GAAG,MAAc,IAAI,KAAK;AAChD,UAAM,aAAY,wCAAS,kBAAT,YAA0B,GAAG,WAAW,SAAS,IAAI;AACvE,WAAO,cAAc;AACrB,QAAI,OAAO,OAAO,SAAS;AAC3B,QAAI,YAAY;AAChB,QAAI,YAAY;AAChB,QAAI,eAAe,MAAM,CAAC;AAC1B,WAAO,iBAAiB,QAAW;AAC/B,UAAI,cAAc,aAAa,OAAO;AAClC,YAAI;AACJ,YAAI,aAAa,SAAS,YAAY;AAClC,iBAAO,IAAI,UAAU,MAAM,KAAK,aAAa,MAAM,OAAO;AAAA,QAC9D,WACS,aAAa,SAAS,gBAAgB;AAC3C,iBAAO,IAAI,aAAa,KAAK,MAAM,aAAa,MAAM,aAAa,SAAS,MAAM,OAAO;AAAA,QAC7F,WACS,aAAa,SAAS,cAAc;AACzC,iBAAO,IAAI,YAAY,MAAM,MAAM,OAAO;AAAA,QAC9C;AACA,aAAK,QAAQ,KAAK,IAAI;AACtB,uBAAe,MAAM,EAAE,SAAS;AAAA,MACpC;AACA,UAAI,eAAc,6CAAc,QAAO;AACnC,eAAO,OAAO,SAAS;AACvB;AAAA,MACJ;AAAA,IACJ;AAIA,WAAO,cAAc;AACrB,WAAO;AAAA,EACX;AAAA,EACA,QAAQ,QAAQ;AACZ,QAAI,IAAI;AACR,eAAW,QAAQ,KAAK,SAAS;AAC7B,UAAI,SAAS,QAAW;AACpB,YAAI,KAAK,YAAY,QAAW;AAC5B,eAAK,WAAW,QAAQ,MAAM,CAAC;AAI/B,eAAK,KAAK,QAAQ,SAAS;AAAA,QAC/B,OACK;AACD,eAAK,WAAW,OAAO,CAAC,CAAC;AAAA,QAC7B;AAAA,MACJ;AACA;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,IAAM,YAAN,MAAM,WAAU;AAAA;AAAA,EAEZ,IAAI,gBAAgB;AArkBxB;AAykBQ,YAAO,gBAAK,aAAL,mBAAe,kBAAf,YAAgC,KAAK;AAAA,EAChD;AAAA,EACA,YAAY,WAAW,SAAS,QAAQ,SAAS;AA3kBrD;AA4kBQ,SAAK,OAAO;AACZ,SAAK,mBAAmB;AAIxB,SAAK,2BAA2B;AAChC,SAAK,cAAc;AACnB,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,UAAU;AAIf,SAAK,iBAAgB,wCAAS,gBAAT,YAAwB;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,IAAI,aAAa;AACb,QAAI,aAAa,KAAK,KAAK,WAAW,EAAE;AACxC,UAAM,SAAS,KAAK;AACpB,QAAI,WAAW,WACX,yCAAY,cAAa,IAAiC;AAI1D,mBAAa,OAAO;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,WAAW,OAAO,kBAAkB,MAAM;AACtC,YAAQ,iBAAiB,MAAM,OAAO,eAAe;AACrD,QAAI,YAAY,KAAK,GAAG;AAIpB,UAAI,UAAU,WAAW,SAAS,QAAQ,UAAU,IAAI;AACpD,YAAI,KAAK,qBAAqB,SAAS;AACnC,eAAK,QAAQ;AAAA,QACjB;AACA,aAAK,mBAAmB;AAAA,MAC5B,WACS,UAAU,KAAK,oBAAoB,UAAU,UAAU;AAC5D,aAAK,YAAY,KAAK;AAAA,MAC1B;AAAA,IAEJ,WACS,MAAM,aAAa,MAAM,QAAW;AACzC,WAAK,sBAAsB,KAAK;AAAA,IACpC,WACS,MAAM,aAAa,QAAW;AACnC,WAAK,YAAY,KAAK;AAAA,IAC1B,WACS,WAAW,KAAK,GAAG;AACxB,WAAK,gBAAgB,KAAK;AAAA,IAC9B,OACK;AAED,WAAK,YAAY,KAAK;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,QAAQ,MAAM;AACV,WAAO,KAAK,KAAK,KAAK,WAAW,EAAE,UAAU,EAAE,aAAa,MAAM,KAAK,SAAS;AAAA,EACpF;AAAA,EACA,YAAY,OAAO;AACf,QAAI,KAAK,qBAAqB,OAAO;AACjC,WAAK,QAAQ;AACb,WAAK,mBAAmB,KAAK,QAAQ,KAAK;AAAA,IAC9C;AAAA,EACJ;AAAA,EACA,YAAY,OAAO;AAIf,QAAI,KAAK,qBAAqB,WAC1B,YAAY,KAAK,gBAAgB,GAAG;AACpC,YAAM,OAAO,KAAK,KAAK,WAAW,EAAE;AACpC,WAAK,OAAO;AAAA,IAChB,OACK;AACD;AACI,aAAK,YAAY,EAAE,eAAe,KAAK,CAAC;AAAA,MAC5C;AAAA,IACJ;AACA,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,sBAAsB,QAAQ;AA/rBlC;AAisBQ,UAAM,EAAE,QAAQ,CAAC,aAAa,GAAG,KAAK,IAAI;AAK1C,UAAM,WAAW,OAAO,SAAS,WAC3B,KAAK,cAAc,MAAM,KACxB,KAAK,OAAO,WACV,KAAK,KAAK,SAAS,cAAc,wBAAwB,KAAK,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,OAAO,IAC1F;AACR,UAAI,UAAK,qBAAL,mBAAuB,gBAAe,UAAU;AAChD,WAAK,iBAAiB,QAAQ,MAAM;AAAA,IACxC,OACK;AACD,YAAM,WAAW,IAAI,iBAAiB,UAAU,IAAI;AACpD,YAAM,WAAW,SAAS,OAAO,KAAK,OAAO;AAC7C,eAAS,QAAQ,MAAM;AACvB,WAAK,YAAY,QAAQ;AACzB,WAAK,mBAAmB;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,cAAc,QAAQ;AAClB,QAAI,WAAW,cAAc,IAAI,OAAO,OAAO;AAC/C,QAAI,aAAa,QAAW;AACxB,oBAAc,IAAI,OAAO,SAAU,WAAW,IAAI,SAAS,MAAM,CAAE;AAAA,IACvE;AACA,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB,OAAO;AAUnB,QAAI,CAAC,QAAQ,KAAK,gBAAgB,GAAG;AACjC,WAAK,mBAAmB,CAAC;AACzB,WAAK,QAAQ;AAAA,IACjB;AAGA,UAAM,YAAY,KAAK;AACvB,QAAI,YAAY;AAChB,QAAI;AACJ,eAAW,QAAQ,OAAO;AACtB,UAAI,cAAc,UAAU,QAAQ;AAKhC,kBAAU,KAAM,WAAW,IAAI,WAAU,KAAK,QAAQ,aAAa,CAAC,GAAG,KAAK,QAAQ,aAAa,CAAC,GAAG,MAAM,KAAK,OAAO,CAAE;AAAA,MAC7H,OACK;AAED,mBAAW,UAAU,SAAS;AAAA,MAClC;AACA,eAAS,WAAW,IAAI;AACxB;AAAA,IACJ;AACA,QAAI,YAAY,UAAU,QAAQ;AAE9B,WAAK,QAAQ,YAAY,KAAK,SAAS,SAAS,EAAE,aAAa,SAAS;AAExE,gBAAU,SAAS;AAAA,IACvB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,QAAQ,QAAQ,KAAK,KAAK,WAAW,EAAE,aAAa,MAAM;AAnxB9D;AAoxBQ,eAAK,8BAAL,8BAAiC,OAAO,MAAM;AAC9C,WAAO,SAAS,UAAU,KAAK,WAAW;AACtC,YAAM,IAAI,KAAK,KAAK,EAAE;AACtB,WAAK,KAAK,EAAE,OAAO;AACnB,cAAQ;AAAA,IACZ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,aAAa;AAlyB9B;AAmyBQ,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,gBAAgB;AACrB,iBAAK,8BAAL,8BAAiC;AAAA,IACrC;AAAA,EACJ;AACJ;AACA,IAAM,gBAAN,MAAoB;AAAA,EAChB,IAAI,UAAU;AACV,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA,EAEA,IAAI,gBAAgB;AAChB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EACA,YAAY,SAAS,MAAM,SAAS,QAAQ,SAAS;AACjD,SAAK,OAAO;AAEZ,SAAK,mBAAmB;AAExB,SAAK,2BAA2B;AAChC,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,QAAI,QAAQ,SAAS,KAAK,QAAQ,CAAC,MAAM,MAAM,QAAQ,CAAC,MAAM,IAAI;AAC9D,WAAK,mBAAmB,IAAI,MAAM,QAAQ,SAAS,CAAC,EAAE,KAAK,IAAI,OAAO,CAAC;AACvE,WAAK,UAAU;AAAA,IACnB,OACK;AACD,WAAK,mBAAmB;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,WAAW,OAAO,kBAAkB,MAAM,YAAY,UAAU;AAC5D,UAAM,UAAU,KAAK;AAErB,QAAI,SAAS;AACb,QAAI,YAAY,QAAW;AAEvB,cAAQ,iBAAiB,MAAM,OAAO,iBAAiB,CAAC;AACxD,eACI,CAAC,YAAY,KAAK,KACb,UAAU,KAAK,oBAAoB,UAAU;AACtD,UAAI,QAAQ;AACR,aAAK,mBAAmB;AAAA,MAC5B;AAAA,IACJ,OACK;AAED,YAAM,SAAS;AACf,cAAQ,QAAQ,CAAC;AACjB,UAAI,GAAG;AACP,WAAK,IAAI,GAAG,IAAI,QAAQ,SAAS,GAAG,KAAK;AACrC,YAAI,iBAAiB,MAAM,OAAO,aAAa,CAAC,GAAG,iBAAiB,CAAC;AACrE,YAAI,MAAM,UAAU;AAEhB,cAAI,KAAK,iBAAiB,CAAC;AAAA,QAC/B;AACA,4BACI,CAAC,YAAY,CAAC,KAAK,MAAM,KAAK,iBAAiB,CAAC;AACpD,YAAI,MAAM,SAAS;AACf,kBAAQ;AAAA,QACZ,WACS,UAAU,SAAS;AACxB,oBAAU,gBAAK,MAAM,QAAQ,IAAI,CAAC;AAAA,QACtC;AAGA,aAAK,iBAAiB,CAAC,IAAI;AAAA,MAC/B;AAAA,IACJ;AACA,QAAI,UAAU,CAAC,UAAU;AACrB,WAAK,aAAa,KAAK;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA,EAEA,aAAa,OAAO;AAChB,QAAI,UAAU,SAAS;AACnB,WAAK,KAAK,OAAO,EAAE,gBAAgB,KAAK,IAAI;AAAA,IAChD,OACK;AACD,WAAK,KAAK,OAAO,EAAE,aAAa,KAAK,MAAO,wBAAS,EAAG;AAAA,IAC5D;AAAA,EACJ;AACJ;AACA,IAAM,eAAN,cAA2B,cAAc;AAAA,EACrC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA,EAEA,aAAa,OAAO;AAEhB,SAAK,QAAQ,KAAK,IAAI,IAAI,UAAU,UAAU,SAAY;AAAA,EAC9D;AACJ;AACA,IAAM,uBAAN,cAAmC,cAAc;AAAA,EAC7C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA,EAEA,aAAa,OAAO;AAChB,SAAK,KAAK,OAAO,EAAE,gBAAgB,KAAK,MAAM,CAAC,CAAC,SAAS,UAAU,OAAO;AAAA,EAC9E;AACJ;AACA,IAAM,YAAN,cAAwB,cAAc;AAAA,EAClC,YAAY,SAAS,MAAM,SAAS,QAAQ,SAAS;AACjD,UAAM,SAAS,MAAM,SAAS,QAAQ,OAAO;AAC7C,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,aAAa,kBAAkB,MAAM;AA16BpD;AA26BQ,mBACI,sBAAiB,MAAM,aAAa,iBAAiB,CAAC,MAAtD,YAA2D;AAC/D,QAAI,gBAAgB,UAAU;AAC1B;AAAA,IACJ;AACA,UAAM,cAAc,KAAK;AAGzB,UAAM,uBAAwB,gBAAgB,WAAW,gBAAgB,WACrE,YAAY,YACR,YAAY,WAChB,YAAY,SACR,YAAY,QAChB,YAAY,YACR,YAAY;AAGpB,UAAM,oBAAoB,gBAAgB,YACrC,gBAAgB,WAAW;AAChC,QAAI,sBAAsB;AACtB,WAAK,QAAQ,oBAAoB,KAAK,MAAM,MAAM,WAAW;AAAA,IACjE;AACA,QAAI,mBAAmB;AAInB,WAAK,QAAQ,iBAAiB,KAAK,MAAM,MAAM,WAAW;AAAA,IAC9D;AACA,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,YAAY,OAAO;AAz8BvB;AA08BQ,QAAI,OAAO,KAAK,qBAAqB,YAAY;AAC7C,WAAK,iBAAiB,MAAK,gBAAK,YAAL,mBAAc,SAAd,YAAsB,KAAK,SAAS,KAAK;AAAA,IACxE,OACK;AACD,WAAK,iBAAiB,YAAY,KAAK;AAAA,IAC3C;AAAA,EACJ;AACJ;AACA,IAAM,cAAN,MAAkB;AAAA,EACd,YAAY,SAAS,QAAQ,SAAS;AAClC,SAAK,UAAU;AACf,SAAK,OAAO;AAEZ,SAAK,2BAA2B;AAChC,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,EACnB;AAAA;AAAA,EAEA,IAAI,gBAAgB;AAChB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EACA,WAAW,OAAO;AACd,qBAAiB,MAAM,KAAK;AAAA,EAChC;AACJ;AA2BA,IAAM,SAAS,CAAC,OAAO,WAAW,YAAY;AA7/B9C;AA8/BI,QAAM,iBAAgB,wCAAS,iBAAT,YAAyB;AAG/C,MAAI,OAAO,cAAc,aAAa;AACtC,MAAI,SAAS,QAAW;AACpB,UAAM,WAAU,wCAAS,iBAAT,YAAyB;AAGzC,kBAAc,aAAa,IAAI,OAAO,IAAI,UAAU,UAAU,aAAa,aAAa,GAAG,OAAO,GAAG,SAAS,QAAW,4BAAW,CAAC,CAAC;AAAA,EAC1I;AACA,OAAK,WAAW,KAAK;AACrB,SAAO;AACX;;;ACngCA,IAAI,UAAU,OAAO,IAAI,eAAe;AACxC,IAAI,YAAY,OAAO,IAAI,iBAAiB;AAC5C,IAAI,cAAc,OAAO,IAAI,aAAa;AAG1C,IAAI,SAAS,OAAwC;AAAA;AAAA,EAEnD,SAAS,QAAQ;AACf,WAAO,mBAAmB,MAAM,mFAAmF,MAAM;AAAA,EAC3H;AAAA,EACA,SAAS,OAAO;AACd,WAAO,sJAAsJ,KAAK;AAAA,EACpK;AAAA,EACA;AAAA,EACA,SAAS,MAAM;AACb,WAAO,yHAAyH;AAAA,EAClI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS,OAAO;AACd,WAAO,mCAAmC,KAAK;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS,OAAO;AACd,WAAO,oCAAoC,KAAK;AAAA,EAClD;AAAA;AAAA;AAGF,IAAI,CAAC;AACL,SAAS,IAAI,UAAU,MAAM;AAC3B,MAAI,MAAuC;AACzC,UAAM,IAAI,OAAO,KAAK;AACtB,UAAM,MAAM,OAAO,MAAM,aAAa,EAAE,MAAM,MAAM,IAAI,IAAI;AAC5D,UAAM,IAAI,MAAM,aAAa,GAAG,EAAE;AAAA,EACpC;AACA,QAAM,IAAI;AAAA,IACR,gCAAgC,KAAK;AAAA,EACvC;AACF;AAGA,IAAI,iBAAiB,OAAO;AAC5B,SAAS,QAAQ,OAAO;AACtB,SAAO,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,WAAW;AACvC;AACA,SAAS,YAAY,OAAO;AA3D5B;AA4DE,MAAI,CAAC;AACH,WAAO;AACT,SAAO,cAAc,KAAK,KAAK,MAAM,QAAQ,KAAK,KAAK,CAAC,CAAC,MAAM,SAAS,KAAK,CAAC,GAAC,WAAM,gBAAN,mBAAoB,eAAc,MAAM,KAAK,KAAK,MAAM,KAAK;AAC9I;AACA,IAAI,mBAAmB,OAAO,UAAU,YAAY,SAAS;AAC7D,SAAS,cAAc,OAAO;AAC5B,MAAI,CAAC,SAAS,OAAO,UAAU;AAC7B,WAAO;AACT,QAAM,QAAQ,eAAe,KAAK;AAClC,MAAI,UAAU,MAAM;AAClB,WAAO;AAAA,EACT;AACA,QAAM,OAAO,OAAO,eAAe,KAAK,OAAO,aAAa,KAAK,MAAM;AACvE,MAAI,SAAS;AACX,WAAO;AACT,SAAO,OAAO,QAAQ,cAAc,SAAS,SAAS,KAAK,IAAI,MAAM;AACvE;AACA,SAAS,KAAK,KAAK,MAAM;AACvB,MAAI,YAAY,GAAG,MAAM,GAAgB;AACvC,WAAO,QAAQ,GAAG,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC5C,WAAK,KAAK,OAAO,GAAG;AAAA,IACtB,CAAC;AAAA,EACH,OAAO;AACL,QAAI,QAAQ,CAAC,OAAO,UAAU,KAAK,OAAO,OAAO,GAAG,CAAC;AAAA,EACvD;AACF;AACA,SAAS,YAAY,OAAO;AAC1B,QAAM,QAAQ,MAAM,WAAW;AAC/B,SAAO,QAAQ,MAAM,QAAQ,MAAM,QAAQ,KAAK,IAAI,IAAgB,MAAM,KAAK,IAAI,IAAc,MAAM,KAAK,IAAI,IAAc;AAChI;AACA,SAAS,IAAI,OAAO,MAAM;AACxB,SAAO,YAAY,KAAK,MAAM,IAAc,MAAM,IAAI,IAAI,IAAI,OAAO,UAAU,eAAe,KAAK,OAAO,IAAI;AAChH;AACA,SAAS,IAAI,OAAO,gBAAgB,OAAO;AACzC,QAAM,IAAI,YAAY,KAAK;AAC3B,MAAI,MAAM;AACR,UAAM,IAAI,gBAAgB,KAAK;AAAA,WACxB,MAAM,GAAa;AAC1B,UAAM,IAAI,KAAK;AAAA,EACjB;AACE,UAAM,cAAc,IAAI;AAC5B;AACA,SAAS,GAAG,GAAG,GAAG;AAChB,MAAI,MAAM,GAAG;AACX,WAAO,MAAM,KAAK,IAAI,MAAM,IAAI;AAAA,EAClC,OAAO;AACL,WAAO,MAAM,KAAK,MAAM;AAAA,EAC1B;AACF;AACA,SAAS,MAAM,QAAQ;AACrB,SAAO,kBAAkB;AAC3B;AACA,SAAS,MAAM,QAAQ;AACrB,SAAO,kBAAkB;AAC3B;AACA,SAAS,OAAO,OAAO;AACrB,SAAO,MAAM,SAAS,MAAM;AAC9B;AACA,SAAS,YAAY,MAAM,QAAQ;AACjC,MAAI,MAAM,IAAI,GAAG;AACf,WAAO,IAAI,IAAI,IAAI;AAAA,EACrB;AACA,MAAI,MAAM,IAAI,GAAG;AACf,WAAO,IAAI,IAAI,IAAI;AAAA,EACrB;AACA,MAAI,MAAM,QAAQ,IAAI;AACpB,WAAO,MAAM,UAAU,MAAM,KAAK,IAAI;AACxC,MAAI,CAAC,UAAU,cAAc,IAAI,GAAG;AAClC,QAAI,CAAC,eAAe,IAAI,GAAG;AACzB,YAAM,MAAsB,uBAAO,OAAO,IAAI;AAC9C,aAAO,OAAO,OAAO,KAAK,IAAI;AAAA,IAChC;AACA,WAAO,mBAAK;AAAA,EACd;AACA,QAAM,cAAc,OAAO,0BAA0B,IAAI;AACzD,SAAO,YAAY,WAAW;AAC9B,MAAI,OAAO,QAAQ,QAAQ,WAAW;AACtC,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAM,MAAM,KAAK,CAAC;AAClB,UAAM,OAAO,YAAY,GAAG;AAC5B,QAAI,KAAK,aAAa,OAAO;AAC3B,WAAK,WAAW;AAChB,WAAK,eAAe;AAAA,IACtB;AACA,QAAI,KAAK,OAAO,KAAK;AACnB,kBAAY,GAAG,IAAI;AAAA,QACjB,cAAc;AAAA,QACd,UAAU;AAAA;AAAA,QAEV,YAAY,KAAK;AAAA,QACjB,OAAO,KAAK,GAAG;AAAA,MACjB;AAAA,EACJ;AACA,SAAO,OAAO,OAAO,eAAe,IAAI,GAAG,WAAW;AACxD;AACA,SAAS,OAAO,KAAK,OAAO,OAAO;AACjC,MAAI,SAAS,GAAG,KAAK,QAAQ,GAAG,KAAK,CAAC,YAAY,GAAG;AACnD,WAAO;AACT,MAAI,YAAY,GAAG,IAAI,GAAG;AACxB,QAAI,MAAM,IAAI,MAAM,IAAI,QAAQ,IAAI,SAAS;AAAA,EAC/C;AACA,SAAO,OAAO,GAAG;AACjB,MAAI;AACF,SAAK,KAAK,CAAC,MAAM,UAAU,OAAO,OAAO,IAAI,GAAG,IAAI;AACtD,SAAO;AACT;AACA,SAAS,8BAA8B;AACrC,MAAI,CAAC;AACP;AACA,SAAS,SAAS,KAAK;AACrB,SAAO,OAAO,SAAS,GAAG;AAC5B;AAGA,IAAI,UAAU,CAAC;AACf,SAAS,UAAU,WAAW;AAC5B,QAAM,SAAS,QAAQ,SAAS;AAChC,MAAI,CAAC,QAAQ;AACX,QAAI,GAAG,SAAS;AAAA,EAClB;AACA,SAAO;AACT;AAGA,IAAI;AACJ,SAAS,kBAAkB;AACzB,SAAO;AACT;AACA,SAAS,YAAY,SAAS,QAAQ;AACpC,SAAO;AAAA,IACL,SAAS,CAAC;AAAA,IACV;AAAA,IACA;AAAA;AAAA;AAAA,IAGA,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,EACtB;AACF;AACA,SAAS,kBAAkB,OAAO,eAAe;AAC/C,MAAI,eAAe;AACjB,cAAU,SAAS;AACnB,UAAM,WAAW,CAAC;AAClB,UAAM,kBAAkB,CAAC;AACzB,UAAM,iBAAiB;AAAA,EACzB;AACF;AACA,SAAS,YAAY,OAAO;AAC1B,aAAW,KAAK;AAChB,QAAM,QAAQ,QAAQ,WAAW;AACjC,QAAM,UAAU;AAClB;AACA,SAAS,WAAW,OAAO;AACzB,MAAI,UAAU,cAAc;AAC1B,mBAAe,MAAM;AAAA,EACvB;AACF;AACA,SAAS,WAAW,QAAQ;AAC1B,SAAO,eAAe,YAAY,cAAc,MAAM;AACxD;AACA,SAAS,YAAY,OAAO;AAC1B,QAAM,QAAQ,MAAM,WAAW;AAC/B,MAAI,MAAM,UAAU,KAAkB,MAAM,UAAU;AACpD,UAAM,QAAQ;AAAA;AAEd,UAAM,WAAW;AACrB;AAGA,SAAS,cAAc,QAAQ,OAAO;AACpC,QAAM,qBAAqB,MAAM,QAAQ;AACzC,QAAM,YAAY,MAAM,QAAQ,CAAC;AACjC,QAAM,aAAa,WAAW,UAAU,WAAW;AACnD,MAAI,YAAY;AACd,QAAI,UAAU,WAAW,EAAE,WAAW;AACpC,kBAAY,KAAK;AACjB,UAAI,CAAC;AAAA,IACP;AACA,QAAI,YAAY,MAAM,GAAG;AACvB,eAAS,SAAS,OAAO,MAAM;AAC/B,UAAI,CAAC,MAAM;AACT,oBAAY,OAAO,MAAM;AAAA,IAC7B;AACA,QAAI,MAAM,UAAU;AAClB,gBAAU,SAAS,EAAE;AAAA,QACnB,UAAU,WAAW,EAAE;AAAA,QACvB;AAAA,QACA,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF,OAAO;AACL,aAAS,SAAS,OAAO,WAAW,CAAC,CAAC;AAAA,EACxC;AACA,cAAY,KAAK;AACjB,MAAI,MAAM,UAAU;AAClB,UAAM,eAAe,MAAM,UAAU,MAAM,eAAe;AAAA,EAC5D;AACA,SAAO,WAAW,UAAU,SAAS;AACvC;AACA,SAAS,SAAS,WAAW,OAAO,MAAM;AACxC,MAAI,SAAS,KAAK;AAChB,WAAO;AACT,QAAM,QAAQ,MAAM,WAAW;AAC/B,MAAI,CAAC,OAAO;AACV;AAAA,MACE;AAAA,MACA,CAAC,KAAK,eAAe,iBAAiB,WAAW,OAAO,OAAO,KAAK,YAAY,IAAI;AAAA,MACpF;AAAA;AAAA,IAEF;AACA,WAAO;AAAA,EACT;AACA,MAAI,MAAM,WAAW;AACnB,WAAO;AACT,MAAI,CAAC,MAAM,WAAW;AACpB,gBAAY,WAAW,MAAM,OAAO,IAAI;AACxC,WAAO,MAAM;AAAA,EACf;AACA,MAAI,CAAC,MAAM,YAAY;AACrB,UAAM,aAAa;AACnB,UAAM,OAAO;AACb,UAAM,SAAS,MAAM;AACrB,QAAI,aAAa;AACjB,QAAI,SAAS;AACb,QAAI,MAAM,UAAU,GAAa;AAC/B,mBAAa,IAAI,IAAI,MAAM;AAC3B,aAAO,MAAM;AACb,eAAS;AAAA,IACX;AACA;AAAA,MACE;AAAA,MACA,CAAC,KAAK,eAAe,iBAAiB,WAAW,OAAO,QAAQ,KAAK,YAAY,MAAM,MAAM;AAAA,IAC/F;AACA,gBAAY,WAAW,QAAQ,KAAK;AACpC,QAAI,QAAQ,UAAU,UAAU;AAC9B,gBAAU,SAAS,EAAE;AAAA,QACnB;AAAA,QACA;AAAA,QACA,UAAU;AAAA,QACV,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACA,SAAO,MAAM;AACf;AACA,SAAS,iBAAiB,WAAW,aAAa,cAAc,MAAM,YAAY,UAAU,aAAa;AACvG,MAA6C,eAAe;AAC1D,QAAI,CAAC;AACP,MAAI,QAAQ,UAAU,GAAG;AACvB,UAAM,OAAO,YAAY,eAAe,YAAY,UAAU;AAAA,IAC9D,CAAC,IAAI,YAAY,WAAW,IAAI,IAAI,SAAS,OAAO,IAAI,IAAI;AAC5D,UAAM,MAAM,SAAS,WAAW,YAAY,IAAI;AAChD,QAAI,cAAc,MAAM,GAAG;AAC3B,QAAI,QAAQ,GAAG,GAAG;AAChB,gBAAU,iBAAiB;AAAA,IAC7B;AACE;AAAA,EACJ,WAAW,aAAa;AACtB,iBAAa,IAAI,UAAU;AAAA,EAC7B;AACA,MAAI,YAAY,UAAU,KAAK,CAAC,SAAS,UAAU,GAAG;AACpD,QAAI,CAAC,UAAU,OAAO,eAAe,UAAU,qBAAqB,GAAG;AACrE;AAAA,IACF;AACA,aAAS,WAAW,UAAU;AAC9B,QAAI,CAAC,eAAe,CAAC,YAAY,OAAO;AACtC,kBAAY,WAAW,UAAU;AAAA,EACrC;AACF;AACA,SAAS,YAAY,OAAO,OAAO,OAAO,OAAO;AAC/C,MAAI,CAAC,MAAM,WAAW,MAAM,OAAO,eAAe,MAAM,gBAAgB;AACtE,WAAO,OAAO,IAAI;AAAA,EACpB;AACF;AAGA,SAAS,iBAAiB,MAAM,QAAQ;AACtC,QAAME,WAAU,MAAM,QAAQ,IAAI;AAClC,QAAM,QAAQ;AAAA,IACZ,OAAOA,WAAU,IAAgB;AAAA;AAAA,IAEjC,QAAQ,SAAS,OAAO,SAAS,gBAAgB;AAAA;AAAA,IAEjD,WAAW;AAAA;AAAA,IAEX,YAAY;AAAA;AAAA,IAEZ,WAAW,CAAC;AAAA;AAAA,IAEZ,SAAS;AAAA;AAAA,IAET,OAAO;AAAA;AAAA,IAEP,QAAQ;AAAA;AAAA;AAAA,IAGR,OAAO;AAAA;AAAA,IAEP,SAAS;AAAA,IACT,WAAW;AAAA,EACb;AACA,MAAI,SAAS;AACb,MAAI,QAAQ;AACZ,MAAIA,UAAS;AACX,aAAS,CAAC,KAAK;AACf,YAAQ;AAAA,EACV;AACA,QAAM,EAAE,QAAQ,MAAM,IAAI,MAAM,UAAU,QAAQ,KAAK;AACvD,QAAM,SAAS;AACf,QAAM,UAAU;AAChB,SAAO;AACT;AACA,IAAI,cAAc;AAAA,EAChB,IAAI,OAAO,MAAM;AACf,QAAI,SAAS;AACX,aAAO;AACT,UAAM,SAAS,OAAO,KAAK;AAC3B,QAAI,CAAC,IAAI,QAAQ,IAAI,GAAG;AACtB,aAAO,kBAAkB,OAAO,QAAQ,IAAI;AAAA,IAC9C;AACA,UAAM,QAAQ,OAAO,IAAI;AACzB,QAAI,MAAM,cAAc,CAAC,YAAY,KAAK,GAAG;AAC3C,aAAO;AAAA,IACT;AACA,QAAI,UAAU,KAAK,MAAM,OAAO,IAAI,GAAG;AACrC,kBAAY,KAAK;AACjB,aAAO,MAAM,MAAM,IAAI,IAAI,YAAY,OAAO,KAAK;AAAA,IACrD;AACA,WAAO;AAAA,EACT;AAAA,EACA,IAAI,OAAO,MAAM;AACf,WAAO,QAAQ,OAAO,KAAK;AAAA,EAC7B;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,QAAQ,QAAQ,OAAO,KAAK,CAAC;AAAA,EACtC;AAAA,EACA,IAAI,OAAO,MAAM,OAAO;AACtB,UAAM,OAAO,uBAAuB,OAAO,KAAK,GAAG,IAAI;AACvD,QAAI,6BAAM,KAAK;AACb,WAAK,IAAI,KAAK,MAAM,QAAQ,KAAK;AACjC,aAAO;AAAA,IACT;AACA,QAAI,CAAC,MAAM,WAAW;AACpB,YAAM,WAAW,KAAK,OAAO,KAAK,GAAG,IAAI;AACzC,YAAM,eAAe,qCAAW;AAChC,UAAI,gBAAgB,aAAa,UAAU,OAAO;AAChD,cAAM,MAAM,IAAI,IAAI;AACpB,cAAM,UAAU,IAAI,IAAI;AACxB,eAAO;AAAA,MACT;AACA,UAAI,GAAG,OAAO,QAAQ,MAAM,UAAU,UAAU,IAAI,MAAM,OAAO,IAAI;AACnE,eAAO;AACT,kBAAY,KAAK;AACjB,kBAAY,KAAK;AAAA,IACnB;AACA,QAAI,MAAM,MAAM,IAAI,MAAM;AAAA,KACzB,UAAU,UAAU,QAAQ,MAAM;AAAA,IACnC,OAAO,MAAM,KAAK,KAAK,OAAO,MAAM,MAAM,MAAM,IAAI,CAAC;AACnD,aAAO;AACT,UAAM,MAAM,IAAI,IAAI;AACpB,UAAM,UAAU,IAAI,IAAI;AACxB,WAAO;AAAA,EACT;AAAA,EACA,eAAe,OAAO,MAAM;AAC1B,QAAI,KAAK,MAAM,OAAO,IAAI,MAAM,UAAU,QAAQ,MAAM,OAAO;AAC7D,YAAM,UAAU,IAAI,IAAI;AACxB,kBAAY,KAAK;AACjB,kBAAY,KAAK;AAAA,IACnB,OAAO;AACL,aAAO,MAAM,UAAU,IAAI;AAAA,IAC7B;AACA,QAAI,MAAM,OAAO;AACf,aAAO,MAAM,MAAM,IAAI;AAAA,IACzB;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA,EAGA,yBAAyB,OAAO,MAAM;AACpC,UAAM,QAAQ,OAAO,KAAK;AAC1B,UAAM,OAAO,QAAQ,yBAAyB,OAAO,IAAI;AACzD,QAAI,CAAC;AACH,aAAO;AACT,WAAO;AAAA,MACL,UAAU;AAAA,MACV,cAAc,MAAM,UAAU,KAAiB,SAAS;AAAA,MACxD,YAAY,KAAK;AAAA,MACjB,OAAO,MAAM,IAAI;AAAA,IACnB;AAAA,EACF;AAAA,EACA,iBAAiB;AACf,QAAI,EAAE;AAAA,EACR;AAAA,EACA,eAAe,OAAO;AACpB,WAAO,eAAe,MAAM,KAAK;AAAA,EACnC;AAAA,EACA,iBAAiB;AACf,QAAI,EAAE;AAAA,EACR;AACF;AACA,IAAI,aAAa,CAAC;AAClB,KAAK,aAAa,CAAC,KAAK,OAAO;AAC7B,aAAW,GAAG,IAAI,WAAW;AAC3B,cAAU,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC;AAC7B,WAAO,GAAG,MAAM,MAAM,SAAS;AAAA,EACjC;AACF,CAAC;AACD,WAAW,iBAAiB,SAAS,OAAO,MAAM;AAChD,MAA6C,MAAM,SAAS,IAAI,CAAC;AAC/D,QAAI,EAAE;AACR,SAAO,WAAW,IAAI,KAAK,MAAM,OAAO,MAAM,MAAM;AACtD;AACA,WAAW,MAAM,SAAS,OAAO,MAAM,OAAO;AAC5C,MAA6C,SAAS,YAAY,MAAM,SAAS,IAAI,CAAC;AACpF,QAAI,EAAE;AACR,SAAO,YAAY,IAAI,KAAK,MAAM,MAAM,CAAC,GAAG,MAAM,OAAO,MAAM,CAAC,CAAC;AACnE;AACA,SAAS,KAAK,OAAO,MAAM;AACzB,QAAM,QAAQ,MAAM,WAAW;AAC/B,QAAM,SAAS,QAAQ,OAAO,KAAK,IAAI;AACvC,SAAO,OAAO,IAAI;AACpB;AACA,SAAS,kBAAkB,OAAO,QAAQ,MAAM;AAnehD;AAoeE,QAAM,OAAO,uBAAuB,QAAQ,IAAI;AAChD,SAAO,OAAO,WAAW,OAAO,KAAK;AAAA;AAAA;AAAA,KAGnC,UAAK,QAAL,mBAAU,KAAK,MAAM;AAAA,MACnB;AACN;AACA,SAAS,uBAAuB,QAAQ,MAAM;AAC5C,MAAI,EAAE,QAAQ;AACZ,WAAO;AACT,MAAI,QAAQ,eAAe,MAAM;AACjC,SAAO,OAAO;AACZ,UAAM,OAAO,OAAO,yBAAyB,OAAO,IAAI;AACxD,QAAI;AACF,aAAO;AACT,YAAQ,eAAe,KAAK;AAAA,EAC9B;AACA,SAAO;AACT;AACA,SAAS,YAAY,OAAO;AAC1B,MAAI,CAAC,MAAM,WAAW;AACpB,UAAM,YAAY;AAClB,QAAI,MAAM,SAAS;AACjB,kBAAY,MAAM,OAAO;AAAA,IAC3B;AAAA,EACF;AACF;AACA,SAAS,YAAY,OAAO;AAC1B,MAAI,CAAC,MAAM,OAAO;AAChB,UAAM,QAAQ;AAAA,MACZ,MAAM;AAAA,MACN,MAAM,OAAO,OAAO;AAAA,IACtB;AAAA,EACF;AACF;AAGA,IAAI,SAAS,MAAM;AAAA,EACjB,YAAY,QAAQ;AAClB,SAAK,cAAc;AACnB,SAAK,wBAAwB;AAoB7B,SAAK,UAAU,CAAC,MAAM,QAAQ,kBAAkB;AAC9C,UAAI,OAAO,SAAS,cAAc,OAAO,WAAW,YAAY;AAC9D,cAAM,cAAc;AACpB,iBAAS;AACT,cAAM,OAAO;AACb,eAAO,SAAS,eAAe,QAAQ,gBAAgB,MAAM;AAC3D,iBAAO,KAAK,QAAQ,OAAO,CAAC,UAAU,OAAO,KAAK,MAAM,OAAO,GAAG,IAAI,CAAC;AAAA,QACzE;AAAA,MACF;AACA,UAAI,OAAO,WAAW;AACpB,YAAI,CAAC;AACP,UAAI,kBAAkB,UAAU,OAAO,kBAAkB;AACvD,YAAI,CAAC;AACP,UAAI;AACJ,UAAI,YAAY,IAAI,GAAG;AACrB,cAAM,QAAQ,WAAW,IAAI;AAC7B,cAAM,QAAQ,YAAY,MAAM,MAAM;AACtC,YAAI,WAAW;AACf,YAAI;AACF,mBAAS,OAAO,KAAK;AACrB,qBAAW;AAAA,QACb,UAAE;AACA,cAAI;AACF,wBAAY,KAAK;AAAA;AAEjB,uBAAW,KAAK;AAAA,QACpB;AACA,0BAAkB,OAAO,aAAa;AACtC,eAAO,cAAc,QAAQ,KAAK;AAAA,MACpC,WAAW,CAAC,QAAQ,OAAO,SAAS,UAAU;AAC5C,iBAAS,OAAO,IAAI;AACpB,YAAI,WAAW;AACb,mBAAS;AACX,YAAI,WAAW;AACb,mBAAS;AACX,YAAI,KAAK;AACP,iBAAO,QAAQ,IAAI;AACrB,YAAI,eAAe;AACjB,gBAAM,IAAI,CAAC;AACX,gBAAM,KAAK,CAAC;AACZ,oBAAU,SAAS,EAAE,4BAA4B,MAAM,QAAQ,GAAG,EAAE;AACpE,wBAAc,GAAG,EAAE;AAAA,QACrB;AACA,eAAO;AAAA,MACT;AACE,YAAI,GAAG,IAAI;AAAA,IACf;AACA,SAAK,qBAAqB,CAAC,MAAM,WAAW;AAC1C,UAAI,OAAO,SAAS,YAAY;AAC9B,eAAO,CAAC,UAAU,SAAS,KAAK,mBAAmB,OAAO,CAAC,UAAU,KAAK,OAAO,GAAG,IAAI,CAAC;AAAA,MAC3F;AACA,UAAI,SAAS;AACb,YAAM,SAAS,KAAK,QAAQ,MAAM,QAAQ,CAAC,GAAG,OAAO;AACnD,kBAAU;AACV,yBAAiB;AAAA,MACnB,CAAC;AACD,aAAO,CAAC,QAAQ,SAAS,cAAc;AAAA,IACzC;AACA,QAAI,QAAO,iCAAQ,gBAAe;AAChC,WAAK,cAAc,OAAO,UAAU;AACtC,QAAI,QAAO,iCAAQ,0BAAyB;AAC1C,WAAK,wBAAwB,OAAO,oBAAoB;AAAA,EAC5D;AAAA,EACA,YAAY,MAAM;AAChB,QAAI,CAAC,YAAY,IAAI;AACnB,UAAI,CAAC;AACP,QAAI,QAAQ,IAAI;AACd,aAAO,QAAQ,IAAI;AACrB,UAAM,QAAQ,WAAW,IAAI;AAC7B,UAAM,QAAQ,YAAY,MAAM,MAAM;AACtC,UAAM,WAAW,EAAE,YAAY;AAC/B,eAAW,KAAK;AAChB,WAAO;AAAA,EACT;AAAA,EACA,YAAY,OAAO,eAAe;AAChC,UAAM,QAAQ,SAAS,MAAM,WAAW;AACxC,QAAI,CAAC,SAAS,CAAC,MAAM;AACnB,UAAI,CAAC;AACP,UAAM,EAAE,QAAQ,MAAM,IAAI;AAC1B,sBAAkB,OAAO,aAAa;AACtC,WAAO,cAAc,QAAQ,KAAK;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,OAAO;AACnB,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,wBAAwB,OAAO;AAC7B,SAAK,wBAAwB;AAAA,EAC/B;AAAA,EACA,aAAa,MAAM,SAAS;AAC1B,QAAI;AACJ,SAAK,IAAI,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AACxC,YAAM,QAAQ,QAAQ,CAAC;AACvB,UAAI,MAAM,KAAK,WAAW,KAAK,MAAM,OAAO,WAAW;AACrD,eAAO,MAAM;AACb;AAAA,MACF;AAAA,IACF;AACA,QAAI,IAAI,IAAI;AACV,gBAAU,QAAQ,MAAM,IAAI,CAAC;AAAA,IAC/B;AACA,UAAM,mBAAmB,UAAU,SAAS,EAAE;AAC9C,QAAI,QAAQ,IAAI,GAAG;AACjB,aAAO,iBAAiB,MAAM,OAAO;AAAA,IACvC;AACA,WAAO,KAAK;AAAA,MACV;AAAA,MACA,CAAC,UAAU,iBAAiB,OAAO,OAAO;AAAA,IAC5C;AAAA,EACF;AACF;AACA,SAAS,YAAY,OAAO,QAAQ;AAClC,QAAM,QAAQ,MAAM,KAAK,IAAI,UAAU,QAAQ,EAAE,UAAU,OAAO,MAAM,IAAI,MAAM,KAAK,IAAI,UAAU,QAAQ,EAAE,UAAU,OAAO,MAAM,IAAI,iBAAiB,OAAO,MAAM;AACxK,QAAM,QAAQ,SAAS,OAAO,SAAS,gBAAgB;AACvD,QAAM,QAAQ,KAAK,KAAK;AACxB,SAAO;AACT;AAGA,SAAS,QAAQ,OAAO;AACtB,MAAI,CAAC,QAAQ,KAAK;AAChB,QAAI,IAAI,KAAK;AACf,SAAO,YAAY,KAAK;AAC1B;AACA,SAAS,YAAY,OAAO;AAC1B,MAAI,CAAC,YAAY,KAAK,KAAK,SAAS,KAAK;AACvC,WAAO;AACT,QAAM,QAAQ,MAAM,WAAW;AAC/B,MAAI;AACJ,MAAI,OAAO;AACT,QAAI,CAAC,MAAM;AACT,aAAO,MAAM;AACf,UAAM,aAAa;AACnB,WAAO,YAAY,OAAO,MAAM,OAAO,OAAO,qBAAqB;AAAA,EACrE,OAAO;AACL,WAAO,YAAY,OAAO,IAAI;AAAA,EAChC;AACA,OAAK,MAAM,CAAC,KAAK,eAAe;AAC9B,QAAI,MAAM,KAAK,YAAY,UAAU,CAAC;AAAA,EACxC,CAAC;AACD,MAAI,OAAO;AACT,UAAM,aAAa;AAAA,EACrB;AACA,SAAO;AACT;AAGA,IAAI,QAAQ,IAAI,OAAO;AACvB,IAAI,UAAU,MAAM;;;AC/qBpB,IAAM,aAAN,MAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMf,YAAY,UAAU;AACpB,QAAI,OAAO,aAAa,YAAY;AAClC,WAAK,WAAW,EAAE,MAAM,SAAS;AAAA,IACnC,OAAO;AACL,WAAK,WAAW;AAAA,IAClB;AACA,SAAK,YAAY,CAAC;AAClB,QAAI,OAAO,oBAAoB,aAAa;AAC1C,WAAK,aAAa,IAAI,gBAAgB;AACtC,WAAK,SAAS,KAAK,WAAW;AAAA,IAChC;AACA,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAK,QAAQ;AACX,QAAI,CAAC,KAAK,kBAAkB,KAAK,SAAS,MAAM;AAC9C,WAAK,SAAS,KAAK,MAAM;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW;AACT,QAAI,CAAC,KAAK,gBAAgB;AACxB,UAAI,KAAK,SAAS,UAAU;AAC1B,aAAK,SAAS,SAAS;AAAA,MACzB;AACA,WAAK,YAAY;AAAA,IACnB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,OAAO;AACX,QAAI,CAAC,KAAK,gBAAgB;AACxB,UAAI,KAAK,SAAS,OAAO;AACvB,aAAK,SAAS,MAAM,KAAK;AAAA,MAC3B;AACA,WAAK,YAAY;AAAA,IACnB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,UAAU;AACpB,SAAK,UAAU,KAAK,QAAQ;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc;AACZ,QAAI,CAAC,KAAK,gBAAgB;AACxB,WAAK,iBAAiB;AACtB,UAAI,KAAK,YAAY;AACnB,aAAK,WAAW,MAAM;AAAA,MACxB;AACA,WAAK,UAAU,QAAQ,cAAY;AACjC,YAAI,OAAO,aAAa,YAAY;AAClC,gBAAM,IAAI,MAAM,iGAAiG;AAAA,QACnH;AACA,iBAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAMA,IAAM,aAAN,MAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMf,YAAY,oBAAoB,MAAM,MAAM;AAAA,EAAC,GAAG;AAC9C,SAAK,cAAc,CAAC;AACpB,SAAK,oBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,UAAU,iBAAiB,MAAM;AAAA,EAAC,GAAG,QAAQ,MAAM;AAAA,EAAC,GAAG,WAAW,MAAM;AAAA,EAAC,GAAG;AAC1E,QAAI;AAEJ,QAAI,OAAO,mBAAmB,YAAY;AACxC,iBAAW;AAAA,QACT,MAAM;AAAA,QACN;AAAA,QACA;AAAA,MACF;AAAA,IACF,WAAW,OAAO,mBAAmB,UAAU;AAC7C,iBAAW;AAAA,IACb,OAAO;AACL,YAAM,IAAI,MAAM,qFAAqF;AAAA,IACvG;AAEA,UAAM,aAAa,IAAI,WAAW,QAAQ;AAC1C,QAAI,WAAW,MAAM;AAAA,IAAC;AAEtB,QAAI;AACF,iBAAW,KAAK,kBAAkB,UAAU;AAAA,IAC9C,SAASC,QAAO;AACd,UAAI,WAAW,OAAO;AACpB,mBAAW,MAAMA,MAAK;AAAA,MACxB,OAAO;AACL,gBAAQ,MAAM,kCAAkCA,MAAK;AAAA,MACvD;AACA;AAAA,IACF;AAEA,eAAW,YAAY,QAAQ;AAC/B,SAAK,YAAY,KAAK,UAAU;AAEhC,WAAO;AAAA,MACL,aAAa,MAAM,WAAW,YAAY;AAAA,MAC1C,UAAU,MAAM,WAAW,SAAS;AAAA,MACpC,OAAO,CAAC,QAAQ,WAAW,MAAM,GAAG;AAAA,IACtC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,KAAK,OAAO;AACV,SAAK,YAAY,QAAQ,cAAY;AACnC,eAAS,KAAK,KAAK;AAAA,IACrB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,OAAO;AACX,SAAK,YAAY,QAAQ,cAAY;AACnC,eAAS,MAAM,KAAK;AAAA,IACtB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW;AACT,SAAK,YAAY,QAAQ,cAAY;AACnC,eAAS,SAAS;AAAA,IACpB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ,YAAY;AAClB,WAAO,KAAK,UAAU;AAAA,MACpB,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ,YAAY;AAClB,WAAO,KAAK,UAAU;AAAA,MACpB,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,YAAY;AAChB,WAAO,KAAK,UAAU;AAAA,MACpB,UAAU;AAAA,IACZ,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,CAAC,OAAO,aAAa,IAAI;AACvB,QAAI;AACJ,QAAI;AACJ,QAAI,UAAU,IAAI,QAAQ,OAAM,UAAU,CAAE;AAE5C,eAAW;AAAA,MACT,MAAM,WAAS;AACb,gBAAQ,EAAE,OAAO,MAAM,MAAM,CAAC;AAC9B,kBAAU,IAAI,QAAQ,OAAM,UAAU,CAAE;AAAA,MAC1C;AAAA,MACA,UAAU,MAAM;AACd,gBAAQ,EAAE,MAAM,KAAK,CAAC;AAAA,MACxB;AAAA,MACA,OAAO,SAAO;AACZ,cAAM;AAAA,MACR;AAAA,IACF;AAEA,SAAK,UAAU,QAAQ;AAEvB,WAAO;AAAA,MACL,MAAM,MAAM;AAAA,IACd;AAAA,EACF;AACF;;;ACpSA,IAAM,WAAW;AAAA,EACf,QAAQ;AAAA,IACN,SAAS;AAAA,IACT,IAAI,YAAY;AAAE,aAAO,KAAK;AAAA,IAAS;AAAA,IACvC,QAAQ,WAAW;AAAE,WAAK,UAAU;AAAA,IAAM;AAAA,IAC1C,SAAS,WAAW;AAAE,WAAK,UAAU;AAAA,IAAO;AAAA,EAC9C;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,IACT,IAAI,YAAY;AAAE,aAAO,KAAK;AAAA,IAAS;AAAA,IACvC,QAAQ,WAAW;AACjB,cAAQ,IAAI,4BAA4B;AACxC,WAAK,UAAU;AAAA,IACjB;AAAA,IACA,SAAS,WAAW;AAAE,WAAK,UAAU;AAAA,IAAO;AAAA,EAC9C;AACF;;;ACTA,SAAS,QAAQ,iBAAiB,UAAU;AAC1C,MAAI,SAAS,MAAM,WAAW;AAC5B,QAAI,iBAAiB,qBAAqB;AACxC,cAAQ,eAAe,MAAM,YAAY,KAAK,2HAA2H,GAAG,SAAS,CAAC,CAAC,UAAU;AACjM,cAAQ,IAAI,aAAa,SAAS,CAAC,CAAC;AACpC,cAAQ,IAAI,aAAa,SAAS,CAAC,CAAC;AAAA,IACtC,OAAO;AACL,cAAQ,eAAe,MAAM,YAAY,KAAK,2HAA2H,GAAG,QAAQ;AAAA,IACtL;AAEA,YAAQ,MAAM;AACd,YAAQ,SAAS;AAAA,EACnB;AACF;;;ACMA,IAAM,kBAAN,cAA8B,WAAW;AAAA,EACvC,YAAY,cAAc;AACxB,QAAI,OAAO,iBAAiB,YAAY,iBAAiB,MAAM;AAC7D,YAAM,IAAI,UAAU,0CAA0C;AAAA,IAChE;AAEA,UAAM,gBAAc;AAClB,WAAK,eAAe;AACpB,aAAO,MAAM;AAAE,aAAK,eAAe;AAAA,MAAM;AAAA,IAC3C,CAAC;AAED,SAAK,QAAQ,IAAI,MAAM,cAAc;AAAA,MACnC,KAAK,CAAC,QAAQ,aAAa;AACzB,eAAO,OAAO,QAAQ;AAAA,MACxB;AAAA,MACA,KAAK,CAAC,QAAQ,UAAU,UAAU;AAChC,eAAO,QAAQ,IAAI;AACnB,aAAK,YAAY,QAAQ,cAAY,SAAS,KAAK,KAAK,KAAK,CAAC;AAC9D,YAAI,KAAK,UAAU;AACjB,eAAK,SAAS,KAAK,UAAU,KAAK,KAAK;AAAA,QACzC;AACA,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAED,SAAK,WAAW,CAAC;AACjB,SAAK,cAAc,CAAC;AACpB,SAAK,WAAW,KAAK,oBAAoB;AACzC,SAAK,gBAAgB,CAAC;AACtB,SAAK,gBAAgB;AACrB,SAAK,aAAa,oBAAI,IAAI;AAC1B,SAAK,iBAAiB,oBAAI,IAAI;AAC9B,SAAK,UAAU,CAAC;AAChB,SAAK,YAAY,oBAAI,IAAI;AACzB,SAAK,gBAAgB,oBAAI,IAAI;AAC7B,SAAK,oBAAoB,oBAAI,IAAI;AACjC,SAAK,aAAa,oBAAI,IAAI;AAE1B,WAAO,KAAK,YAAY,EAAE,QAAQ,SAAO;AACvC,UAAI,OAAO,aAAa,GAAG,MAAM,YAAY;AAC3C,aAAK,SAAS,KAAK,aAAa,GAAG,CAAC;AAAA,MACtC,OAAO;AACL,aAAK,MAAM,GAAG,IAAI,aAAa,GAAG;AAAA,MACpC;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,kBAAkB,WAAW,MAAM;AACjC,UAAM,UAAU;AAAA,MACd,OAAO,KAAK;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,IACX;AAEA,eAAW,cAAc,KAAK,aAAa;AACzC,iBAAW,OAAO;AAAA,IACpB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB;AACpB,QAAI,OAAO,WAAW,eAAe,OAAO,8BAA8B,GAAG;AAC3E,YAAM,WAAW,OAAO,8BAA8B,EAAE,QAAQ;AAChE,eAAS,KAAK,KAAK,KAAK;AACxB,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,YAAY;AACd,SAAK,YAAY,KAAK,UAAU;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW;AACT,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,SAAS,QAAQ,SAAS;AACxB,QAAI,KAAK,SAAS,MAAM,GAAG;AACzB,YAAM,IAAI,MAAM,yBAAyB,MAAM,yBAAyB;AAAA,IAC1E;AACA,SAAK,SAAS,MAAM,IAAI;AAExB,SAAK,MAAM,IAAI,IAAI,SAAS;AAC1B,WAAK,SAAS,QAAQ,GAAG,IAAI;AAAA,IAC/B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsDA,MAAMC,YAAW,QAAQ;AACvB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA,YAAY;AAAA,MACZ,uBAAuB;AAAA,MACvB,kBAAkB;AAAA,MAClB,qBAAqB;AAAA,MACrB,SAAS,MAAO,KAAK;AAAA,MACrB,QAAQ;AAAA,MACR,aAAa,CAAC,YAAY,KAAK,IAAI,GAAG,OAAO,IAAI;AAAA,IACnD,IAAI;AAGJ,SAAK,QAAQA,UAAS,IAAI;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,SAAK,eAAe,IAAI,UAAU,OAAO;AAEzC,YAAQ,SAAS,4BAA4BA,UAAS,EAAE;AAExD,QAAI,oBAAoB,MAAM;AAC5B,YAAM,aAAa,YAAY,MAAM;AACnC,gBAAQ,SAAS,uCAAuCA,UAAS,EAAE;AACnE,aAAK,MAAMA,UAAS,EAAE,MAAM,WAAS,QAAQ,MAAM,0BAA0BA,UAAS,KAAK,KAAK,CAAC;AAAA,MACnG,GAAG,eAAe;AAClB,WAAK,UAAUA,UAAS,IAAI;AAAA,IAC9B;AAEA,QAAI,sBAAsB;AACxB,YAAM,eAAe,MAAM;AACzB,gBAAQ,SAAS,4CAA4CA,UAAS,EAAE;AACxE,aAAK,MAAMA,UAAS,EAAE,MAAM,WAAS,QAAQ,MAAM,0BAA0BA,UAAS,qBAAqB,KAAK,CAAC;AAAA,MACnH;AACA,aAAO,iBAAiB,SAAS,YAAY;AAC7C,WAAK,cAAcA,UAAS,IAAI;AAAA,IAClC;AAEA,QAAI,oBAAoB;AACtB,YAAM,mBAAmB,MAAM;AAC7B,gBAAQ,SAAS,yCAAyCA,UAAS,EAAE;AACrE,aAAK,MAAMA,UAAS,EAAE,MAAM,WAAS,QAAQ,MAAM,0BAA0BA,UAAS,kBAAkB,KAAK,CAAC;AAAA,MAChH;AACA,aAAO,iBAAiB,UAAU,gBAAgB;AAClD,WAAK,kBAAkBA,UAAS,IAAI;AAAA,IACtC;AAEA,UAAM,YAAY,WAAW,MAAM;AACjC,cAAQ,SAAS,yDAAyDA,UAAS,EAAE;AACrF,WAAK,MAAMA,UAAS,EAAE,MAAM,WAAS,QAAQ,MAAM,0BAA0BA,UAAS,mBAAmB,KAAK,CAAC;AAAA,IACjH,GAAG,MAAM;AAET,SAAK,WAAWA,UAAS,IAAI;AAE7B,SAAKA,UAAS,IAAI,IAAI,SAAS;AAC3B,aAAO,KAAK,MAAMA,YAAW,GAAG,IAAI;AAAA,IACxC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+CA,MAAMA,eAAc,MAAM;AACxB,UAAM,QAAQ,KAAK,QAAQA,UAAS;AACpC,QAAI,CAAC,OAAO;AACR,YAAM,IAAI,MAAM,sCAAsCA,UAAS,EAAE;AAAA,IACrE;AAEA,UAAM,EAAE,UAAU,SAAS,WAAW,OAAO,WAAW,IAAI;AAC5D,UAAM,WAAW,MAAM,QAAQ,QAAQ,IAAI,SAAS,KAAK,GAAG,IAAI;AAChE,UAAM,aAAa,KAAK,WAAW,IAAI,QAAQ;AAE/C,QAAI,cAAc,CAAC,KAAK,SAAS,YAAY,SAAS,GAAG;AACvD,cAAQ,SAAS,8BAA8BA,UAAS,mBAAmB,QAAQ,EAAE;AACrF,aAAO,QAAQ,QAAQ,WAAW,IAAI;AAAA,IACxC;AAEA,YAAQ,SAAS,uDAAuDA,UAAS,EAAE;AACnF,SAAK,SAAS,GAAGA,UAAS,UAAU;AACpC,WAAO,KAAK,gBAAgB,SAAS,MAAM,OAAO,UAAU,EACzD,KAAK,CAAC,SAAS;AACd,WAAK,WAAW,IAAI,UAAU,EAAE,MAAM,WAAW,KAAK,IAAI,EAAE,CAAC;AAC7D,WAAK,SAAS,GAAGA,UAAS,YAAY,IAAI;AAC1C,aAAO;AAAA,IACT,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,WAAK,SAAS,GAAGA,UAAS,UAAU,KAAK;AACzC,YAAM;AAAA,IACR,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkBA,YAAW;AAC3B,UAAM,QAAQ,KAAK,QAAQA,UAAS;AACpC,QAAI,CAAC;AAAO;AAEZ,UAAM,WAAW,MAAM,QAAQ,MAAM,QAAQ,IAAI,MAAM,SAAS,KAAK,GAAG,IAAI,MAAM;AAElF,YAAQ,qBAAqB,gCAAgCA,UAAS,EAAE;AAExE,QAAI,KAAK,UAAUA,UAAS,GAAG;AAC7B,oBAAc,KAAK,UAAUA,UAAS,CAAC;AACvC,aAAO,KAAK,UAAUA,UAAS;AAAA,IACjC;AAEA,QAAI,KAAK,cAAcA,UAAS,GAAG;AACjC,aAAO,oBAAoB,SAAS,KAAK,cAAcA,UAAS,CAAC;AACjE,aAAO,KAAK,cAAcA,UAAS;AAAA,IACrC;AAEA,QAAI,KAAK,kBAAkBA,UAAS,GAAG;AACrC,aAAO,oBAAoB,UAAU,KAAK,kBAAkBA,UAAS,CAAC;AACtE,aAAO,KAAK,kBAAkBA,UAAS;AAAA,IACzC;AAEA,QAAI,KAAK,WAAWA,UAAS,GAAG;AAC9B,mBAAa,KAAK,WAAWA,UAAS,CAAC;AACvC,aAAO,KAAK,WAAWA,UAAS;AAAA,IAClC;AAEA,SAAK,WAAW,OAAO,QAAQ;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,gBAAgB,SAAS,MAAM,SAAS,YAAY;AAClD,WAAO,QAAQ,GAAG,IAAI,EAAE,MAAM,CAAC,UAAU;AACvC,UAAI,YAAY,GAAG;AACjB,cAAM;AAAA,MACR;AACA,YAAM,QAAQ,WAAW,OAAO;AAChC,aAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,KAAK,CAAC,EAAE;AAAA,QAAK,MAC/D,QAAQ,kBAAkB,4BAA4B,SAAS,EAAE;AAAA,QACjE,KAAK,gBAAgB,SAAS,MAAM,UAAU,GAAG,UAAU;AAAA,MAC7D;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,SAAS,YAAY,WAAW;AAC9B,UAAM,cAAc,KAAK,IAAI,IAAI,WAAW,YAAY;AACxD,YAAQ,WAAW,gBAAgB,WAAW,mBAAmB,KAAK,IAAI,CAAC,qBAAqB,WAAW,SAAS,iBAAiB,SAAS,GAAG;AACjJ,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,SAAS,QAAQ,SAAS;AACxB,SAAK,cAAc,KAAK,EAAE,QAAQ,QAAQ,CAAC;AAC3C,QAAI,CAAC,KAAK,eAAe;AACvB,WAAK,sBAAsB;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,wBAAwB;AACtB,WAAO,KAAK,cAAc,SAAS,GAAG;AACpC,YAAM,EAAE,QAAQ,QAAQ,IAAI,KAAK,cAAc,MAAM;AACrD,WAAK,gBAAgB;AACrB,WAAK,UAAU,QAAQ,OAAO;AAC9B,WAAK,gBAAgB;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,UAAU,QAAQ,SAAS;AACzB,QAAI,OAAO,WAAW,YAAY;AAChC,aAAO,OAAO,KAAK,UAAU,KAAK,IAAI,GAAG,MAAM,KAAK,KAAK;AAAA,IAC3D;AAEA,QAAI,OAAO,WAAW,UAAU;AAC9B,YAAM,IAAI,MAAM,gDAAgD,OAAO,MAAM,EAAE;AAAA,IACjF;AAEA,UAAM,UAAU,KAAK,SAAS,MAAM;AACpC,QAAI,CAAC,SAAS;AACZ,cAAQ,KAAK,+BAA+B,MAAM,EAAE;AACpD;AAAA,IACF;AAEA,SAAK,kBAAkB,QAAQ,OAAO;AAEtC,UAAM,WAAW,KAAK;AACtB,UAAM,WAAW,QAAQ,KAAK,OAAO,WAAS;AAC5C,cAAQ,OAAO,OAAO;AAAA,IACxB,CAAC;AAED,SAAK,QAAQ;AACb,SAAK,YAAY,QAAQ,cAAY,SAAS,KAAK,KAAK,KAAK,CAAC;AAE9D,QAAI,KAAK,UAAU;AACjB,WAAK,SAAS,KAAK,QAAQ,KAAK,KAAK;AAAA,IACvC;AAGA,QAAI,aAAa,UAAU;AACzB,UAAI,SAAS,OAAO,aAAa,OAAO,WAAW,aAAa;AAC9D,cAAM,QAAQ,IAAI,YAAY,2BAA2B;AAAA,UACvD,QAAQ;AAAA,YACN;AAAA,YACA,UAAU;AAAA,YACV,UAAU;AAAA,UACZ;AAAA,QACF,CAAC;AACD,eAAO,cAAc,KAAK;AAAA,MAC5B;AAEA,cAAQ,2BAA2B,QAAQ,UAAU,QAAQ;AAAA,IAC/D;AAAA,EACF;AACF;AA6CA,IAAM,QAAQ,CAACC,QAAO,EAAE,MAAM,OAAO,QAAQ,MAAM;AACjD,MAAIA,OAAM,UAAUA,OAAM,OAAO,IAAI,GAAG;AACtC,UAAM,IAAI,MAAM,wBAAwB,IAAI,qBAAqB;AAAA,EACnE;AAEA,MAAI,CAACA,OAAM,QAAQ;AACjB,IAAAA,OAAM,SAAS,CAAC;AAAA,EAClB;AAEA,EAAAA,OAAM,OAAO,IAAI,IAAI;AACrB,EAAAA,OAAM,MAAM,IAAI,IAAI;AAEpB,QAAM,eAAe,CAAC;AACtB,QAAM,mBAAmB,CAAC;AAE1B,SAAO,KAAK,OAAO,EAAE,QAAQ,eAAa;AACxC,UAAM,mBAAmB,GAAG,IAAI,IAAI,SAAS;AAC7C,IAAAA,OAAM,SAAS,kBAAkB,CAACC,QAAO,YAAY;AACnD,cAAQ,SAAS,EAAEA,OAAM,IAAI,GAAG,OAAO;AAAA,IACzC,CAAC;AAED,iBAAa,SAAS,IAAI,IAAI,SAAS;AACrC,MAAAD,OAAM,SAAS,kBAAkB,GAAG,IAAI;AAAA,IAC1C;AAAA,EACF,CAAC;AAED,QAAM,YAAY,CAAC,aAAa;AAC9B,qBAAiB,KAAK,QAAQ;AAC9B,WAAO,MAAM;AACX,YAAM,QAAQ,iBAAiB,QAAQ,QAAQ;AAC/C,UAAI,QAAQ,IAAI;AACd,yBAAiB,OAAO,OAAO,CAAC;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAEA,EAAAA,OAAM,UAAU,CAAC,aAAa;AAC5B,UAAM,aAAa,SAAS,IAAI;AAChC,qBAAiB,QAAQ,cAAY,SAAS,UAAU,CAAC;AAAA,EAC3D,CAAC;AAED,QAAM,WAAW,MAAM;AACrB,WAAOA,OAAM,SAAS,EAAE,IAAI;AAAA,EAC9B;AAEA,SAAO,EAAE,UAAU,SAAS,cAAc,UAAU;AACtD;AAuBE,IAAM,aAAa,SAAS,QAAQ,QAAQ;AAC1C,MAAI,OAAO,WAAW,YAAY,WAAW,MAAM;AACjD,WAAO;AAAA,EACT;AAEA,SAAO,KAAK,MAAM,EAAE,QAAQ,SAAO;AACjC,UAAM,cAAc,OAAO,GAAG;AAC9B,UAAM,cAAc,OAAO,GAAG;AAE9B,QAAI,MAAM,QAAQ,WAAW,KAAK,MAAM,QAAQ,WAAW,GAAG;AAG5D,aAAO,GAAG,IAAI,CAAC,GAAG,aAAa,GAAG,WAAW;AAAA,IAC/C,WAAW,OAAO,gBAAgB,YAAY,gBAAgB,QAAQ,OAAO,gBAAgB,YAAY,gBAAgB,MAAM;AAE7H,aAAO,GAAG,IAAI,WAAW,mBAAK,cAAe,WAAW;AAAA,IAC1D,OAAO;AAEL,aAAO,GAAG,IAAI;AAAA,IAChB;AAAA,EACF,CAAC;AAED,SAAO,KAAK,MAAM,EAAE,QAAQ,SAAO;AACjC,QAAI,CAAC,OAAO,eAAe,GAAG,GAAG;AAC/B,aAAO,GAAG,IAAI,OAAO,GAAG;AAAA,IAC1B;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEA,IAAM,wBAAwB,CAAC,eAAe;AAC5C,SAAO,CAAC,cAAc,YAAY;AAChC,UAAM,aAAY,mCAAS,SAAQ;AACnC,UAAM,cAAa,mCAAS,UAAS;AACrC,UAAM,gBAAgB,KAAK,KAAK,KAAK;AACrC,UAAM,UAAS,mCAAS,YAAW,SAAY,QAAQ,SAAS;AAChE,UAAMA,SAAQ,IAAI,WAAW,YAAY;AAEzC,IAAAA,OAAM,OAAO,MAAM;AACjB,UAAI,YAAY;AACd,cAAM,cAAc,aAAa,QAAQ,SAAS;AAClD,cAAM,eAAe,aAAa,QAAQ,GAAG,SAAS,SAAS;AAC/D,cAAM,eAAc,oBAAI,KAAK,GAAE,QAAQ;AAEvC,YAAI,eAAe,cAAc;AAC/B,gBAAM,YAAY,eAAe,SAAS,cAAc,EAAE;AAC1D,cAAI,CAAC,WAAW;AACd,kBAAM,cAAc,KAAK,MAAM,WAAW;AAC1C,YAAAA,OAAM,QAAQ,WAAW,cAAc,WAAW;AAAA,UACpD,OAAO;AACL,yBAAa,WAAW,SAAS;AACjC,yBAAa,WAAW,GAAG,SAAS,SAAS;AAAA,UAC/C;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,IAAAA,OAAM,KAAK;AAEX,IAAAA,OAAM,QAAQ,MAAM;AAClB,mBAAa,WAAW,SAAS;AACjC,mBAAa,WAAW,GAAG,SAAS,SAAS;AAE7C,MAAAA,OAAM,QAAQ;AAEd,MAAAA,OAAM,YAAY,QAAQ,cAAY,SAAS,KAAKA,OAAM,KAAK,CAAC;AAAA,IAClE;AAEA,IAAAA,OAAM,UAAU,CAAC,UAAU;AACzB,YAAM,eAAc,oBAAI,KAAK,GAAE,QAAQ;AACvC,YAAM,aAAa,cAAc;AAEjC,mBAAa,QAAQ,WAAW,KAAK,UAAU,KAAK,CAAC;AACrD,mBAAa,QAAQ,GAAG,SAAS,WAAW,WAAW,SAAS,CAAC;AAAA,IACnE,CAAC;AAED,WAAOA;AAAA,EACT;AACF;AAoBF,IAAM,QAAQ,CAAC,cAAc,UAAU,CAAC,MAAM;AAC5C,QAAM,iBAAiB;AAAA,IACrB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,QAAQ;AAAA;AAAA,EACV;AAEA,QAAM,eAAe,kCAAK,iBAAmB;AAE7C,MAAI,aAAa,cAAc;AAC7B,UAAM,gBAAgB,sBAAsB,eAAe,EAAE,cAAc,YAAY;AACvF,WAAO;AAAA,EACT,OAAO;AACL,WAAO,IAAI,gBAAgB,YAAY;AAAA,EACzC;AACF;;;ACtvBA,IAAM,mBAAN,MAAM,0BAAyB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcxC,OAAO,KAAK,OAAO;AACjB,QAAI,iBAAiB,YAAY;AAC/B,aAAO,IAAI,kBAAiB,gBAAc;AACxC,cAAME,gBAAe,MAAM,UAAU;AAAA,UACnC,MAAM,OAAK,WAAW,KAAK,CAAC;AAAA,UAC5B,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,UAClC,UAAU,MAAM,WAAW,SAAS;AAAA,QACtC,CAAC;AACD,eAAO,MAAM;AACX,cAAI,CAACA,cAAa,QAAQ;AACxB,YAAAA,cAAa,YAAY;AAAA,UAC3B;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,WAAW,MAAM,OAAO,aAAa,GAAG;AACtC,aAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAI,cAAc;AAClB,SAAC,MAAY;AACX,cAAI;AACF;AAAA,yCAAsB,QAAtB,0EAA6B;AAAlB,sBAAM,IAAjB;AACE,oBAAI;AAAa;AACjB,2BAAW,KAAK,CAAC;AAAA,cACnB;AAAA,qBAHA,MAzCZ;AAyCY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,uBAAW,SAAS;AAAA,UACtB,SAAS,KAAK;AACZ,uBAAW,MAAM,GAAG;AAAA,UACtB;AAAA,QACF,IAAG;AACH,eAAO,MAAM;AACX,wBAAc;AAAA,QAChB;AAAA,MACF,CAAC;AAAA,IACH,WAAW,MAAM,OAAO,QAAQ,GAAG;AACjC,aAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAI;AACF,qBAAW,KAAK,OAAO;AACrB,uBAAW,KAAK,CAAC;AAAA,UACnB;AACA,qBAAW,SAAS;AAAA,QACtB,SAAS,KAAK;AACZ,qBAAW,MAAM,GAAG;AAAA,QACtB;AACA,eAAO,MAAM;AACX,cAAI,CAAC,aAAa,QAAQ;AACxB,yBAAa,YAAY;AAAA,UAC3B;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,WAAW,iBAAiB,SAAS;AACnC,aAAO,IAAI,kBAAiB,gBAAc;AACxC,cAAM;AAAA,UACJ,OAAK;AACH,uBAAW,KAAK,CAAC;AACjB,uBAAW,SAAS;AAAA,UACtB;AAAA,UACA,SAAO,WAAW,MAAM,GAAG;AAAA,QAC7B;AACA,eAAO,MAAM;AAAA,QAAC;AAAA,MAChB,CAAC;AAAA,IACH,OAAO;AACL,YAAM,IAAI,UAAU,6FAA6F;AAAA,IACnH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,IAAI,aAAa;AACf,WAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS,WAAW,KAAK,YAAY,KAAK,CAAC;AAAA,QACjD,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,OAAO,aAAa;AAClB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,cAAI,YAAY,KAAK,GAAG;AACtB,uBAAW,KAAK,KAAK;AAAA,UACvB;AAAA,QACF;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,OAAO,WAAW,cAAc;AAC9B,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,cAAc;AAClB,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,wBAAc,UAAU,aAAa,KAAK;AAAA,QAC5C;AAAA,QACA,OAAO,SAAO,OAAO,GAAG;AAAA,QACxB,UAAU,MAAM,QAAQ,WAAW;AAAA,MACrC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,UAAU,UAAU;AAClB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAM,qBAAqB,KAAK,UAAU;AAAA,QACxC,MAAM,WAAS,WAAW,KAAK,KAAK;AAAA,QACpC,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,YAAM,uBAAuB,SAAS,UAAU;AAAA,QAC9C,MAAM,MAAM;AACV,qBAAW,SAAS;AACpB,6BAAmB,YAAY;AAC/B,+BAAqB,YAAY;AAAA,QACnC;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,MACpC,CAAC;AAED,aAAO,MAAM;AACX,2BAAmB,YAAY;AAC/B,6BAAqB,YAAY;AAAA,MACnC;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,KAAK,GAAG;AACN,WAAO,IAAI,kBAAiB,gBAAc;AACxC,UAAI,IAAI;AACR,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,cAAI,MAAM,GAAG;AACX,uBAAW,KAAK,KAAK;AAAA,UACvB,OAAO;AACL,uBAAW,SAAS;AACpB,YAAAA,cAAa,YAAY;AAAA,UAC3B;AAAA,QACF;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,KAAK,GAAG;AACN,WAAO,IAAI,kBAAiB,gBAAc;AACxC,UAAI,IAAI;AACR,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,cAAI,OAAO,GAAG;AACZ,uBAAW,KAAK,KAAK;AAAA,UACvB;AAAA,QACF;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,QAAQ,aAAa;AACnB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAM,gBAAgB,oBAAI,IAAI;AAE9B,YAAM,qBAAqB,KAAK,UAAU;AAAA,QACxC,MAAM,WAAS;AACb,gBAAM,kBAAkB,YAAY,KAAK;AACzC,gBAAM,oBAAoB,gBAAgB,UAAU;AAAA,YAClD,MAAM,gBAAc,WAAW,KAAK,UAAU;AAAA,YAC9C,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,YAClC,UAAU,MAAM;AACd,4BAAc,OAAO,iBAAiB;AACtC,kBAAI,cAAc,SAAS,GAAG;AAC5B,2BAAW,SAAS;AAAA,cACtB;AAAA,YACF;AAAA,UACF,CAAC;AACD,wBAAc,IAAI,iBAAiB;AAAA,QACrC;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM;AACd,cAAI,cAAc,SAAS,GAAG;AAC5B,uBAAW,SAAS;AAAA,UACtB;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO,MAAM;AACX,2BAAmB,YAAY;AAC/B,sBAAc,QAAQ,CAAAA,kBAAgBA,cAAa,YAAY,CAAC;AAAA,MAClE;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCA,UAAU,aAAa;AACrB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,UAAI,oBAAoB;AAExB,YAAM,qBAAqB,KAAK,UAAU;AAAA,QACxC,MAAM,WAAS;AACb,cAAI,mBAAmB;AACrB,8BAAkB,YAAY;AAAA,UAChC;AAEA,gBAAM,kBAAkB,YAAY,KAAK;AACzC,8BAAoB,gBAAgB,UAAU;AAAA,YAC5C,MAAM,gBAAc,WAAW,KAAK,UAAU;AAAA,YAC9C,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,YAClC,UAAU,MAAM;AACd,kBAAI,mBAAmB;AACrB,kCAAkB,YAAY;AAC9B,oCAAoB;AAAA,cACtB;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM;AACd,cAAI,mBAAmB;AACrB,8BAAkB,YAAY;AAAA,UAChC;AACA,qBAAW,SAAS;AAAA,QACtB;AAAA,MACF,CAAC;AAED,aAAO,MAAM;AACX,2BAAmB,YAAY;AAC/B,YAAI,mBAAmB;AACrB,4BAAkB,YAAY;AAAA,QAChC;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,UAAU;AACR,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,SAAS,CAAC;AAChB,WAAK,UAAU;AAAA,QACb,MAAM,WAAS,OAAO,KAAK,KAAK;AAAA,QAChC,OAAO,SAAO,OAAO,GAAG;AAAA,QACxB,UAAU,MAAM,QAAQ,MAAM;AAAA,MAChC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,QAAQ,UAAU;AAChB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,UAAU;AAAA,QACb,MAAM,WAAS,SAAS,KAAK;AAAA,QAC7B,OAAO,SAAO,OAAO,GAAG;AAAA,QACxB,UAAU,MAAM,QAAQ;AAAA,MAC1B,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,WAAW;AACf,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,QAAQ;AACZ,WAAK,UAAU;AAAA,QACb,MAAM,WAAS;AACb,cAAI,CAAC,UAAU,KAAK,GAAG;AACrB,oBAAQ;AACR,oBAAQ,KAAK;AAAA,UACf;AAAA,QACF;AAAA,QACA,OAAO,SAAO,OAAO,GAAG;AAAA,QACxB,UAAU,MAAM,QAAQ,KAAK;AAAA,MAC/B,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,KAAK,WAAW;AACd,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,cAAI,UAAU,KAAK,GAAG;AACpB,oBAAQ,KAAK;AACb,YAAAA,cAAa,YAAY;AAAA,UAC3B;AAAA,QACF;AAAA,QACA,OAAO,SAAO,OAAO,GAAG;AAAA,QACxB,UAAU,MAAM,QAAQ,MAAS;AAAA,MACnC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,KAAK,WAAW;AACd,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,cAAI,UAAU,KAAK,GAAG;AACpB,oBAAQ,IAAI;AACZ,YAAAA,cAAa,YAAY;AAAA,UAC3B;AAAA,QACF;AAAA,QACA,OAAO,SAAO,OAAO,GAAG;AAAA,QACxB,UAAU,MAAM,QAAQ,KAAK;AAAA,MAC/B,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,QAAQ,UAAU;AAChB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS,WAAW,KAAK,KAAK;AAAA,QACpC,OAAO,SAAO;AACZ,mBAAS;AACT,qBAAW,MAAM,GAAG;AAAA,QACtB;AAAA,QACA,UAAU,MAAM;AACd,mBAAS;AACT,qBAAW,SAAS;AAAA,QACtB;AAAA,MACF,CAAC;AAED,aAAO,MAAM;AACX,QAAAA,cAAa,YAAY;AAAA,MAC3B;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,QAAQ,eAAe,MAAM;AAC3B,UAAM,QAAQ,IAAI,gBAAgB,cAAc,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAClF,SAAK,UAAU;AAAA,MACb,MAAM,WAAS,MAAM,OAAO,MAAM,KAAK;AAAA,MACvC,OAAO,SAAO,MAAM,MAAM,GAAG;AAAA,MAC7B,UAAU,MAAM,MAAM,SAAS;AAAA,IACjC,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,KAAK,OAAO;AACV,QAAI,iBAAiB,YAAY;AAC/B,YAAMA,gBAAe,MAAM,UAAU;AAAA,QACnC,MAAM,OAAK,KAAK,YAAY,QAAQ,cAAY,SAAS,KAAK,CAAC,CAAC;AAAA,QAChE,OAAO,SAAO,KAAK,YAAY,QAAQ,cAAY,SAAS,MAAM,GAAG,CAAC;AAAA,QACtE,UAAU,MAAM,KAAK,YAAY,QAAQ,cAAY,SAAS,SAAS,CAAC;AAAA,MAC1E,CAAC;AAAA,IACH,WAAW,MAAM,OAAO,aAAa,GAAG;AACtC,OAAC,MAAY;AACX,YAAI;AACF;AAAA,uCAAsB,QAAtB,0EAA6B;AAAlB,oBAAM,IAAjB;AACE,mBAAK,YAAY,QAAQ,cAAY,SAAS,KAAK,CAAC,CAAC;AAAA,YACvD;AAAA,mBAFA,MAjqBV;AAiqBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,eAAK,YAAY,QAAQ,cAAY,SAAS,SAAS,CAAC;AAAA,QAC1D,SAAS,KAAK;AACZ,eAAK,YAAY,QAAQ,cAAY,SAAS,MAAM,GAAG,CAAC;AAAA,QAC1D;AAAA,MACF,IAAG;AAAA,IACL,WAAW,MAAM,OAAO,QAAQ,GAAG;AACjC,UAAI;AACF,mBAAW,KAAK,OAAO;AACrB,eAAK,YAAY,QAAQ,cAAY,SAAS,KAAK,CAAC,CAAC;AAAA,QACvD;AACA,aAAK,YAAY,QAAQ,cAAY,SAAS,SAAS,CAAC;AAAA,MAC1D,SAAS,KAAK;AACZ,aAAK,YAAY,QAAQ,cAAY,SAAS,MAAM,GAAG,CAAC;AAAA,MAC1D;AAAA,IACF,WAAW,iBAAiB,SAAS;AACnC,YAAM;AAAA,QACJ,OAAK;AACH,eAAK,YAAY,QAAQ,cAAY,SAAS,KAAK,CAAC,CAAC;AACrD,eAAK,YAAY,QAAQ,cAAY,SAAS,SAAS,CAAC;AAAA,QAC1D;AAAA,QACA,SAAO,KAAK,YAAY,QAAQ,cAAY,SAAS,MAAM,GAAG,CAAC;AAAA,MACjE;AAAA,IACF,OAAO;AACL,WAAK,YAAY,QAAQ,cAAY,SAAS,KAAK,KAAK,CAAC;AAAA,IAC3D;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,KAAK,QAAQ;AACX,WAAO,UAAU;AAAA,MACf,MAAM,WAAS,KAAK,KAAK,KAAK;AAAA,MAC9B,OAAO,SAAO,KAAK,YAAY,QAAQ,cAAY,SAAS,MAAM,GAAG,CAAC;AAAA,MACtE,UAAU,MAAM,KAAK,YAAY,QAAQ,cAAY,SAAS,SAAS,CAAC;AAAA,IAC1E,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM;AACJ,SAAK,YAAY,QAAQ,cAAY;AACnC,UAAI,YAAY,OAAO,SAAS,aAAa,YAAY;AACvD,iBAAS,SAAS;AAAA,MACpB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BA,WAAW,IAAI;AACb,WAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS,WAAW,KAAK,KAAK;AAAA,QACpC,OAAO,SAAO;AACZ,gBAAM,YAAY,GAAG,GAAG;AACxB,oBAAU,UAAU;AAAA,YAClB,MAAM,WAAS,WAAW,KAAK,KAAK;AAAA,YACpC,OAAO,CAAAC,SAAO,WAAW,MAAMA,IAAG;AAAA,YAClC,UAAU,MAAM,WAAW,SAAS;AAAA,UACtC,CAAC;AAAA,QACH;AAAA,QACA,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMD,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,SAAS,OAAO;AACd,WAAO,IAAI,kBAAiB,gBAAc;AACxC,UAAI,YAAY;AAChB,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,uBAAa,SAAS;AACtB,sBAAY,WAAW,MAAM;AAC3B,uBAAW,KAAK,KAAK;AAAA,UACvB,GAAG,KAAK;AAAA,QACV;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM;AACd,uBAAa,SAAS;AACtB,qBAAW,SAAS;AAAA,QACtB;AAAA,MACF,CAAC;AAED,aAAO,MAAM;AACX,qBAAa,SAAS;AACtB,QAAAA,cAAa,YAAY;AAAA,MAC3B;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,IAAI,cAAc;AAChB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,uBAAa,KAAK;AAClB,qBAAW,KAAK,KAAK;AAAA,QACvB;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,SAAS,UAAU;AACjB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,UAAI,eAAe;AACnB,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,gBAAM,cAAc,KAAK,IAAI;AAC7B,cAAI,cAAc,eAAe,UAAU;AACzC,2BAAe;AACf,uBAAW,KAAK,KAAK;AAAA,UACvB;AAAA,QACF;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,uBAAuB;AACrB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,UAAI;AACJ,UAAI,eAAe;AACnB,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS;AACb,cAAI,gBAAgB,UAAU,WAAW;AACvC,2BAAe;AACf,wBAAY;AACZ,uBAAW,KAAK,KAAK;AAAA,UACvB;AAAA,QACF;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,UAAU,aAAa;AACrB,WAAO,IAAI,kBAAiB,gBAAc;AACxC,UAAI,oBAAoB;AACxB,UAAI,UAAU;AACd,YAAM,eAAe,CAAC;AAEtB,YAAM,qBAAqB,KAAK,UAAU;AAAA,QACxC,MAAM,WAAS;AACb,cAAI,CAAC,SAAS;AACZ,sBAAU;AACV,kBAAM,kBAAkB,YAAY,KAAK;AACzC,gCAAoB,gBAAgB,UAAU;AAAA,cAC5C,MAAM,gBAAc,WAAW,KAAK,UAAU;AAAA,cAC9C,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,cAClC,UAAU,MAAM;AACd,oBAAI,aAAa,SAAS,GAAG;AAC3B,wBAAM,YAAY,aAAa,MAAM;AACrC,wBAAM,sBAAsB,YAAY,SAAS;AACjD,sCAAoB,oBAAoB,UAAU;AAAA,oBAChD,MAAM,gBAAc,WAAW,KAAK,UAAU;AAAA,oBAC9C,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,oBAClC,UAAU,MAAM,UAAU;AAAA,kBAC5B,CAAC;AAAA,gBACH,OAAO;AACL,4BAAU;AAAA,gBACZ;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH,OAAO;AACL,yBAAa,KAAK,KAAK;AAAA,UACzB;AAAA,QACF;AAAA,QACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM;AACd,cAAI,CAAC,SAAS;AACZ,uBAAW,SAAS;AAAA,UACtB;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO,MAAM;AACX,2BAAmB,YAAY;AAC/B,YAAI,mBAAmB;AACrB,4BAAkB,YAAY;AAAA,QAChC;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,iBAAiB,aAAa;AAC5B,WAAO,IAAI,kBAAiB,gBAAc;AACxC,YAAM,SAAS,IAAI,MAAM,YAAY,MAAM,EAAE,KAAK,MAAS;AAC3D,YAAM,gBAAgB,YAAY;AAAA,QAAI,CAAC,YAAY,MACjD,WAAW,UAAU;AAAA,UACnB,MAAM,WAAS;AACb,mBAAO,CAAC,IAAI;AACZ,gBAAI,CAAC,OAAO,SAAS,MAAS,GAAG;AAC/B,yBAAW,KAAK,CAAC,GAAG,MAAM,CAAC;AAAA,YAC7B;AAAA,UACF;AAAA,UACA,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,UAClC,UAAU,MAAM;AAAA,UAAC;AAAA,QACnB,CAAC;AAAA,MACH;AAEA,aAAO,MAAM,cAAc,QAAQ,CAAAA,kBAAgBA,cAAa,YAAY,CAAC;AAAA,IAC/E,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,aAAa,eAAe;AAC1B,WAAO,IAAI,kBAAiB,gBAAc;AACxC,oBAAc,QAAQ,WAAS,WAAW,KAAK,KAAK,CAAC;AACrD,YAAMA,gBAAe,KAAK,UAAU;AAAA,QAClC,MAAM,WAAS,WAAW,KAAK,KAAK;AAAA,QACpC,OAAO,SAAO,WAAW,MAAM,GAAG;AAAA,QAClC,UAAU,MAAM,WAAW,SAAS;AAAA,MACtC,CAAC;AAED,aAAO,MAAMA,cAAa,YAAY;AAAA,IACxC,CAAC;AAAA,EACH;AACF;;;ACvlCA,IAAM,oBAAoB;AAAA,EACxB,SAAS;AACX;AAWA,IAAM,kBAAN,cAA8B,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUvC,YAAY,eAAe,MAAM,aAAa,MAAM,EAAC,OAAO,OAAO,OAAO,KAAI,IAAI,CAAC,GAAG;AACpF,UAAM;AACN,QAAI,MAAM;AACR,WAAK,iBAAiB;AAAA,IACxB,OAAO;AACL,WAAK,YAAY,KAAK,UAAU;AAAA,IAClC;AACA,SAAK,UAAU,QAAQ,cAAc,WAAS;AAAA,IAAC,CAAC;AAChD,SAAK,mBAAmB,CAAC;AACzB,SAAK,oBAAoB;AACzB,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,QAAQ;AACV,QAAI,kBAAkB,WAAW,MAAM;AACrC,wBAAkB,QAAQ,cAAc,IAAI;AAAA,IAC9C;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,MAAM,UAAU;AAClB,SAAK,OAAO,MAAM,QAAQ;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,KAAK;AACV,QAAI,OAAO,KAAK,YAAY,YAAY,KAAK,YAAY,MAAM;AAC7D,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AACA,SAAK,OAAO,WAAS,OAAO,OAAO,OAAO,GAAG,CAAC;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,KAAK,OAAO;AACd,QAAI,OAAO,KAAK,YAAY,YAAY,KAAK,YAAY,MAAM;AAC7D,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AACA,SAAK,OAAO,WAAS;AACnB,YAAM,OAAO,IAAI,MAAM,GAAG;AAC1B,UAAIE,WAAU;AACd,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KAAK;AACxC,QAAAA,WAAUA,SAAQ,KAAK,CAAC,CAAC;AAAA,MAC3B;AACA,MAAAA,SAAQ,KAAK,KAAK,SAAS,CAAC,CAAC,IAAI;AAAA,IACnC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,KAAK;AACV,QAAI,OAAO,KAAK,YAAY,YAAY,KAAK,YAAY,MAAM;AAC7D,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AACA,SAAK,OAAO,WAAS;AACnB,YAAM,OAAO,IAAI,MAAM,GAAG;AAC1B,UAAIA,WAAU;AACd,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KAAK;AACxC,QAAAA,WAAUA,SAAQ,KAAK,CAAC,CAAC;AAAA,MAC3B;AACA,aAAOA,SAAQ,KAAK,KAAK,SAAS,CAAC,CAAC;AAAA,IACtC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ;AACN,SAAK,OAAO,OAAO,CAAC,EAAE;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,UAAU;AAChB,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,WAAS;AACnB,YAAM,KAAK,GAAG,QAAQ;AAAA,IACxB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM;AACJ,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,WAAS;AACnB,YAAM,IAAI;AAAA,IACZ,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ;AACN,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,WAAS;AACnB,YAAM,MAAM;AAAA,IACd,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,OAAO,gBAAgB,OAAO;AACnC,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,SAAO;AACjB,UAAI,OAAO,OAAO,aAAa,GAAG,KAAK;AAAA,IACzC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,UAAU;AACnB,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,WAAS;AACnB,YAAM,QAAQ,GAAG,QAAQ;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU;AACR,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,WAAS;AACnB,YAAM,QAAQ;AAAA,IAChB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAK,iBAAiB;AACpB,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,WAAS;AACnB,YAAM,KAAK,eAAe;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,KAAK,OAAO,QAAQ,GAAG,MAAM,KAAK,QAAQ,QAAQ;AAChD,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,SAAO;AACjB,UAAI,KAAK,OAAO,OAAO,GAAG;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,WAAW,QAAQ,OAAO,MAAM,KAAK,QAAQ,QAAQ;AACnD,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AACA,SAAK,OAAO,SAAO;AACjB,UAAI,WAAW,QAAQ,OAAO,GAAG;AAAA,IACnC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,SAAS;AACd,SAAK,iBAAiB,KAAK,OAAO;AAClC,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,mBAAmB;AACjB,QAAI,CAAC,KAAK,mBAAmB;AAC3B,WAAK,oBAAoB;AACzB,WAAK,eAAe;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,oBAAoB;AAClB,UAAM,oBAAoB,CAAC,GAAG,KAAK,aAAa,KAAK,cAAc;AACnE,sBAAkB,QAAQ,cAAY;AACpC,UAAI,YAAY,OAAO,aAAa,YAAY;AAC9C,iBAAS,KAAK,OAAO;AAAA,MACvB,WAAW,YAAY,SAAS,MAAM;AACpC,iBAAS,KAAK,KAAK,OAAO;AAAA,MAC5B;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB;AACf,QAAI,WAAW,KAAK;AACpB,WAAO,KAAK,iBAAiB,SAAS,GAAG;AACvC,YAAM,UAAU,KAAK,iBAAiB,MAAM;AAC5C,UAAK,OAAO,KAAK,YAAY,YAAY,KAAK,YAAY,QAAQ,KAAK,QAAQ,gBAAgB,UAAW,MAAM,QAAQ,KAAK,OAAO,GAAG;AACrI,aAAK,UAAU,QAAQ,KAAK,SAAS,OAAO;AAAA,MAC9C,OAAO;AACL,aAAK,UAAU,QAAQ,KAAK,OAAO;AAAA,MACrC;AAAA,IACF;AACA,QAAI,aAAa,KAAK,SAAS;AAC7B,WAAK,kBAAkB;AAEvB,UAAI,SAAS,OAAO,aAAa,OAAO,WAAW,aAAa;AAC9D,cAAM,QAAQ,IAAI,YAAY,qBAAqB;AAAA,UACjD,QAAQ;AAAA,YACN,MAAM,KAAK;AAAA,YACX;AAAA,YACA,UAAU,KAAK;AAAA,UACjB;AAAA,QACF,CAAC;AACD,eAAO,cAAc,KAAK;AAAA,MAC5B;AAEA,cAAQ,qBAAqB,KAAK,QAAQ,UAAU,KAAK,OAAO;AAAA,IAClE;AACA,SAAK,oBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW;AACT,UAAM,SAAS,IAAI,iBAAiB;AACpC,SAAK,UAAU;AAAA,MACb,MAAM,WAAS,OAAO,KAAK,KAAK;AAAA,MAChC,OAAO,SAAO,OAAO,MAAM,GAAG;AAAA,MAC9B,UAAU,MAAM,OAAO,IAAI;AAAA,IAC7B,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW;AACT,SAAK,YAAY,QAAQ,cAAY;AACnC,UAAI,YAAY,OAAO,SAAS,aAAa,YAAY;AACvD,iBAAS,SAAS;AAAA,MACpB;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAOA,IAAM,gBAAN,cAA4B,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1C,YAAY,WAAW;AACrB,UAAM,IAAI;AACV,SAAK,YAAY;AACjB,SAAK,eAAe,oBAAI,IAAI;AAC5B,SAAK,gBAAgB,oBAAI,IAAI;AAC7B,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,QAAQ;AACV,QAAI,kBAAkB,SAAS;AAC7B,wBAAkB,QAAQ,cAAc,IAAI;AAAA,IAC9C;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY;AASV,UAAM,UAAU;AAAA,MACd,eAAe,CAAC,eAAe;AAC7B,YAAI,CAAC,KAAK,aAAa,IAAI,UAAU,GAAG;AACtC,gBAAMC,gBAAe,WAAW,QAAQ,MAAM,KAAK,UAAU,CAAC;AAC9D,eAAK,aAAa,IAAI,UAAU;AAChC,eAAK,cAAc,IAAI,YAAYA,aAAY;AAAA,QACjD;AAAA,MACF;AAAA,IACF;AAUA,sBAAkB,UAAU;AAC5B,UAAM,WAAW,KAAK,UAAU;AAChC,sBAAkB,UAAU;AAE5B,QAAI,aAAa,KAAK,SAAS;AAC7B,WAAK,UAAU;AACf,WAAK,kBAAkB;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,UAAU;AACR,SAAK,cAAc,QAAQ,CAACA,kBAAiB;AAC3C,MAAAA,cAAa,YAAY;AAAA,IAC3B,CAAC;AAAA,EACH;AACF;AAUA,IAAM,WAAW,SAAS,WAAW;AACnC,SAAO,IAAI,cAAc,SAAS;AACpC;AAWA,IAAM,SAAS,SAAS,UAAU;AAChC,MAAI,UAAU,MAAM;AAAA,EAAC;AACrB,MAAI,eAAe,oBAAI,IAAI;AAC3B,MAAI,gBAAgB,oBAAI,IAAI;AAS5B,QAAM,UAAU;AAAA,IACd,eAAe,CAAC,eAAe;AAC7B,UAAI,CAAC,aAAa,IAAI,UAAU,GAAG;AACjC,cAAMA,gBAAe,WAAW,QAAQ,UAAU;AAClD,qBAAa,IAAI,UAAU;AAC3B,sBAAc,IAAI,YAAYA,aAAY;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AAWA,QAAM,aAAa,MAAM;AACvB,YAAQ;AACR,sBAAkB,UAAU;AAC5B,cAAU,SAAS,MAAM,MAAM;AAAA,IAAC;AAChC,sBAAkB,UAAU;AAAA,EAC9B;AAEA,MAAI,OAAO,WAAW,aAAa;AACjC,0BAAsB,UAAU;AAAA,EAClC,OAAO;AACL,eAAW,YAAY,CAAC;AAAA,EAC1B;AAUA,QAAM,UAAU,MAAM;AACpB,kBAAc,QAAQ,CAACA,kBAAiB;AACtC,MAAAA,cAAa,YAAY;AAAA,IAC3B,CAAC;AACD,YAAQ;AAAA,EACV;AAEA,SAAO;AACT;;;ACjjBA,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,YAAY;AACtB,QAAI,EAAE,sBAAsB,kBAAkB;AAC5C,YAAM,IAAI,UAAU,0DAA0D;AAAA,IAChF;AAEA,WAAO,IAAI,MAAM,YAAY;AAAA,MAC3B,KAAK,CAAC,QAAQ,aAAa;AACzB,YAAI,OAAO,OAAO,QAAQ,MAAM,YAAY;AAC1C,iBAAO,OAAO,QAAQ,EAAE,KAAK,MAAM;AAAA,QACrC,WAAW,YAAY,QAAQ;AAC7B,iBAAO,OAAO,QAAQ;AAAA,QACxB,WAAW,OAAO,OAAO,MAAM,QAAQ,MAAM,YAAY;AACvD,iBAAO,IAAI,SAAS,OAAO,MAAM,QAAQ,EAAE,GAAG,IAAI;AAAA,QACpD,OAAO;AACL,iBAAO,OAAO,MAAM,QAAQ;AAAA,QAC9B;AAAA,MACF;AAAA,MACA,KAAK,CAAC,QAAQ,UAAU,UAAU;AAChC,eAAO,QAAQ,IAAI;AACnB,eAAO,OAAO,MAAM,OAAO,KAAK;AAChC,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;AC2CA,IAAM,aAAa,oBAAI,IAAI;AA0B3B,IAAM,kBAAN,cAA8B,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxC,cAAc;AACZ,UAAM;AACN,SAAK,SAAS;AACd,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,aAAa,SAAS,KAAK,IAAI;AACpC,SAAK,SAAS,OAAO,KAAK,IAAI;AAC9B,SAAK,mBAAmB,oBAAI,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,qBAAqB,YAAY;AAC/B,WAAO,QAAQ,UAAU,EAAE,QAAQ,CAAC,CAAC,UAAU,OAAO,MAAM;AAE1D,UAAI,YAAY,KAAK,aAAa,QAAQ;AAC1C,YAAM,cAAc,OAAO,YAAY,aAAa,UAAU,CAAC,MAAM;AACrE,kBAAY,QAAQ,WAAW,WAAW;AAG1C,YAAM,aAAa,KAAK,aAAa,WAAW,QAAQ;AACxD,UAAI,KAAK,kBAAkB,WAAW,KAAK,GAAG;AAC5C,aAAK,sCAAsC,MAAM,UAAU,YAAY,IAAI;AAAA,MAC7E,OAAO;AACL,aAAK,uCAAuC,MAAM,UAAU,YAAY,IAAI;AAAA,MAC9E;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,WAAW,WAAW;AACpB,UAAM,kBAAkB,MAAM,UAAU,SAAS;AACjD,YAAQ,IAAI,eAAe;AAC3B,SAAK,sBAAsB,eAAe;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,OAAO,UAAU;AACf,UAAM,UAAU,MAAM,OAAO,QAAQ;AACrC,SAAK,gBAAgB,IAAI,UAAU,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBE,QAAQC,QAAO,KAAK;AAClB,QAAI,EAAEA,kBAAiB,kBAAkB;AACvC,YAAM,IAAI,UAAU,qDAAqD;AAAA,IAC3E;AAEA,UAAM,aAAa,KAAK,aAAaA,OAAM,MAAM,GAAG,GAAG,GAAG;AAC1D,UAAM,cAAcA,OAAM,UAAU,cAAY;AAC9C,iBAAW,OAAO,MAAM,SAAS,GAAG,CAAC;AAAA,IACvC,CAAC;AACD,SAAK,gBAAgB,IAAI,KAAK,WAAW;AAEzC,QAAI,KAAK,kBAAkB,WAAW,KAAK,GAAG;AAC5C,WAAK,sCAAsC,MAAM,KAAK,UAAU;AAChE,aAAO,KAAK,GAAG;AAAA,IACjB,OAAO;AACL,WAAK,uCAAuC,MAAM,KAAK,UAAU;AACjE,aAAO,KAAK,GAAG;AAAA,IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBF,OAAO,aAAa;AAClB,WAAO,IAAI,iBAAiB,WAAW;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,WAAW;AACT,UAAM,IAAI,MAAM,wDAAwD;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,MAAM,EAAE,UAAU,SAAS,YAAY,GAAG,uBAAuB,MAAM,iBAAiB,MAAM,qBAAqB,MAAM,kBAAkB,MAAM,SAAS,MAAO,KAAK,GAAG,QAAQ,GAAG,aAAa,CAAC,YAAY,KAAK,IAAI,GAAG,OAAO,IAAI,IAAK,GAAG;AAC3O,UAAM,MAAM,MAAM,QAAQ,QAAQ,IAChC,SAAS,IAAI,OAAK,OAAO,MAAM,WAAW,KAAK,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,GAAG,IACzE;AACF,SAAK,iBAAiB,IAAI,KAAK,OAAO;AAEtC,YAAQ,SAAS,4BAA4B,GAAG;AAEhD,UAAM,aAAa,KAAK,aAAa;AAAA,MACnC,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,OAAO;AAAA,MACP,aAAa,WAAW,IAAI,GAAG,IAAI,WAAW,IAAI,GAAG,EAAE,cAAc;AAAA,IACvE,GAAG,GAAG;AAEN,UAAM,aAAa,KAAK,kBAAkB,UAAU;AAEpD,UAAM,YAAY,CAAO,UAAU,MAAM;AACvC,YAAM,MAAM,KAAK,IAAI;AACrB,YAAM,aAAa,WAAW,IAAI,GAAG;AAErC,UAAI,cAAe,MAAM,WAAW,cAAe,WAAW;AAC5D,gBAAQ,kBAAkB,8BAA8B,GAAG;AAC3D,mBAAW,OAAO,WAAS;AACzB,gBAAM,OAAO,WAAW;AACxB,gBAAM,SAAS;AACf,gBAAM,cAAc;AAAA,QACtB,CAAC;AAAA,MACH,OAAO;AACL,gBAAQ,oBAAoB,0BAA0B,GAAG;AACzD,YAAI;AACF,qBAAW,OAAO,WAAS;AACzB,kBAAM,SAAS;AACf,kBAAM,cAAc;AAAA,UACtB,CAAC;AACD,gBAAM,OAAO,MAAM,QAAQ;AAC3B,qBAAW,IAAI,KAAK,EAAE,MAAM,aAAa,IAAI,CAAC;AAC9C,qBAAW,OAAO,WAAS;AACzB,kBAAM,OAAO;AACb,kBAAM,SAAS;AACf,kBAAM,cAAc;AAAA,UACtB,CAAC;AAAA,QACH,SAAS,OAAO;AACd,kBAAQ,qBAAqB,wBAAwB,KAAK,KAAK;AAC/D,cAAI,UAAU,OAAO;AACnB,uBAAW,MAAM,UAAU,UAAU,CAAC,GAAG,WAAW,OAAO,CAAC;AAAA,UAC9D,OAAO;AACL,uBAAW,OAAO,WAAS;AACzB,oBAAM,eAAe,EAAE,SAAS,MAAM,SAAS,OAAO,MAAM,MAAM;AAClE,oBAAM,SAAS;AACf,oBAAM,cAAc;AAAA,YACtB,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,QAAI,gBAAgB;AAClB,cAAQ,SAAS,wCAAwC,GAAG;AAC5D,gBAAU;AAAA,IACZ;AAGA,QAAI,sBAAsB;AACxB,cAAQ,SAAS,+CAA+C,GAAG;AACnE,YAAM,iBAAiB,MAAM,UAAU;AACvC,aAAO,iBAAiB,SAAS,cAAc;AAC/C,WAAK,gBAAgB,IAAI,SAAS,GAAG,IAAI,MAAM,OAAO,oBAAoB,SAAS,cAAc,CAAC;AAAA,IACpG;AAGA,QAAI,oBAAoB;AACtB,cAAQ,SAAS,4CAA4C,GAAG;AAChE,aAAO,iBAAiB,UAAU,SAAS;AAC3C,WAAK,gBAAgB,IAAI,UAAU,GAAG,IAAI,MAAM,OAAO,oBAAoB,UAAU,SAAS,CAAC;AAAA,IACjG;AAGA,QAAI,iBAAiB;AACnB,cAAQ,SAAS,wCAAwC,GAAG;AAC5D,YAAM,aAAa,YAAY,WAAW,eAAe;AACzD,WAAK,gBAAgB,IAAI,YAAY,GAAG,IAAI,MAAM,cAAc,UAAU,CAAC;AAAA,IAC7E;AAGA,UAAM,YAAY,WAAW,MAAM;AACjC,iBAAW,OAAO,GAAG;AAAA,IACvB,GAAG,MAAM;AACT,SAAK,gBAAgB,IAAI,MAAM,GAAG,IAAI,MAAM,aAAa,SAAS,CAAC;AAEnE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCA,SAAS,EAAE,YAAY,UAAU,SAAS,WAAW,UAAU,GAAG;AAChE,UAAM,gBAAgB,KAAK,aAAa;AAAA,MACtC,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,WAAW;AAAA,IACb,GAAG,UAAU;AAEb,UAAM,gBAAgB,KAAK,kBAAkB,aAAa;AAE1D,UAAM,kBAAkB,CAAO,cAAc;AAC3C,cAAQ,YAAY,oCAAoC,SAAS;AACjE,UAAI;AACJ,YAAM,gBAAgB,cAAc;AAEpC,UAAI,UAAU;AACZ,gBAAQ,YAAY,+CAA+C,SAAS;AAC5E,kBAAU,SAAS,WAAW,aAAa;AAC3C,sBAAc,OAAO,WAAS;AAC5B,gBAAM,OAAO,QAAQ;AACrB,gBAAM,SAAS;AACf,gBAAM,eAAe;AAAA,QACvB,CAAC;AAAA,MACH,OAAO;AACL,gBAAQ,YAAY,gEAAgE,SAAS;AAC7F,sBAAc,OAAO,WAAS;AAC5B,gBAAM,SAAS;AACf,gBAAM,eAAe;AAAA,QACvB,CAAC;AAAA,MACH;AAEA,UAAI;AACF,cAAM,OAAO,MAAM,WAAW,SAAS;AACvC,sBAAc,OAAO,WAAS;AAC5B,gBAAM,OAAO;AACb,gBAAM,SAAS;AAAA,QACjB,CAAC;AACD,YAAI,WAAW;AACb,oBAAU,MAAM,WAAW,OAAO;AAAA,QACpC;AACA,gBAAQ,YAAY,sCAAsC,WAAW,IAAI;AAAA,MAC3E,SAAS,OAAO;AACd,gBAAQ,YAAY,iCAAiC,WAAW,KAAK;AACrE,sBAAc,OAAO,WAAS;AAC5B,gBAAM,eAAe,EAAE,SAAS,MAAM,QAAQ;AAC9C,gBAAM,SAAS;AACf,cAAI,CAAC,WAAW,WAAW,QAAQ,UAAU;AAC3C,oBAAQ,YAAY,wCAAwC,SAAS;AACrE,oBAAQ,SAAS;AAAA,UACnB;AAAA,QACF,CAAC;AACD,YAAI,SAAS;AACX,kBAAQ,OAAO,WAAW,OAAO;AAAA,QACnC;AAAA,MACF,UAAE;AACA,YAAI,CAAC,cAAc,MAAM,WAAW;AAClC,wBAAc,OAAO,WAAS;AAC5B,kBAAM,YAAY;AAAA,UACpB,CAAC;AACD,cAAI,WAAW;AACb,oBAAQ,YAAY,oCAAoC,SAAS;AACjE,sBAAU,cAAc,MAAM,MAAM,cAAc,MAAM,OAAO,WAAW,OAAO;AAAA,UACnF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,kBAAc,SAAS;AAEvB,kBAAc,QAAQ,MAAM;AAC1B,oBAAc,OAAO,WAAS;AAC5B,cAAM,OAAO;AACb,cAAM,SAAS;AACf,cAAM,eAAe;AACrB,cAAM,YAAY;AAAA,MACpB,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,kBAAkB,UAAU;AAE1B,UAAM,MAAM,MAAM,QAAQ,QAAQ,IAAI,SAAS,KAAK,GAAG,IAAI;AAC3D,YAAQ,qBAAqB,gCAAgC,GAAG;AAEhE,eAAW,OAAO,GAAG;AAErB,SAAK,cAAc,GAAG;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,WAAW;AAAA,EAGX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,oBAAoB;AAClB,SAAK,QAAQ,EAAE,OAAO,KAAK,CAAC;AAC5B,SAAK,OAAO,MAAM,KAAK,OAAO,CAAC;AAC/B,SAAK,OAAO;AACZ,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,YAAY;AAAA,EAEZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,uBAAuB;AACrB,SAAK,aAAa;AAClB,SAAK,gBAAgB,QAAQ,iBAAe,YAAY,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,eAAe;AAAA,EAEf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,yBAAyB,MAAM,UAAU,UAAU;AACjD,SAAK,kBAAkB,MAAM,UAAU,QAAQ;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,kBAAkB,MAAM,UAAU,UAAU;AAAA,EAE5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,kBAAkB;AAChB,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,UAAU;AAAA,EAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kBAAkB,OAAO;AACvB,WAAO,UAAU,SAAS,OAAO,UAAU,YAAY,MAAM,QAAQ,KAAK;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,sCAAsC,SAAS,KAAK,YAAY,cAAc,OAAO;AACnF,QAAI,EAAE,sBAAsB,kBAAkB;AAC5C,YAAM,IAAI,UAAU,0DAA0D;AAAA,IAChF;AAEA,UAAM,QAAQ,KAAK,kBAAkB,UAAU;AAC/C,WAAO,eAAe,SAAS,KAAK;AAAA,MAClC,KAAK,MAAM;AAAA,MACX,KAAK,cAAY;AACf,mBAAW,OAAO,MAAM,QAAQ;AAChC,YAAI,aAAa;AACf,eAAK,aAAa,KAAK,QAAQ;AAAA,QACjC;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,uCAAuC,SAAS,KAAK,YAAY,cAAc,OAAO;AACpF,QAAI,EAAE,sBAAsB,kBAAkB;AAC5C,YAAM,IAAI,UAAU,0DAA0D;AAAA,IAChF;AAEA,WAAO,eAAe,SAAS,KAAK;AAAA,MAClC,KAAK,MAAM,WAAW;AAAA,MACtB,KAAK,cAAY;AACf,mBAAW,OAAO,MAAM,QAAQ;AAChC,YAAI,aAAa;AACf,eAAK,aAAa,KAAK,QAAQ;AAAA,QACjC;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,kBAAkB,YAAY;AAC5B,WAAO,IAAI,gBAAgB,UAAU;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,QAAQ;AACd,QAAI,OAAO,UAAU,MAAM;AACzB,aAAO,KAAK,IAAI,EAAE,QAAQ,SAAO;AAC/B,YAAI,OAAO,KAAK,GAAG,MAAM,cAAc,CAAC,IAAI,WAAW,IAAI,GAAG;AAC5D,cAAI,KAAK,GAAG,aAAa,YAAY;AACnC;AAAA,UACF,OAAO;AACL,kBAAM,aAAa,KAAK,aAAa,KAAK,GAAG,GAAG,GAAG;AACnD,gBAAI,KAAK,kBAAkB,WAAW,KAAK,GAAG;AAC5C,mBAAK,sCAAsC,MAAM,KAAK,UAAU;AAAA,YAClE,OAAO;AACL,mBAAK,uCAAuC,MAAM,KAAK,UAAU;AAAA,YACnE;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,aAAa,cAAc,OAAO;AAChC,QAAI,CAAC,KAAK,gBAAgB,YAAY,GAAG;AACvC,YAAM,OAAO,OAAO,UAAU,SAAS,KAAK,YAAY;AACxD,YAAM,IAAI,MAAM,+BAA+B,IAAI,+FAA+F;AAAA,IACpJ;AAEA,UAAM,aAAa,IAAI,gBAAgB,cAAc,MAAM,EAAE,MAAM,MAAM,CAAC;AAE1E,SAAK,sBAAsB,UAAU;AACrC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,KAAK;AACjB,YAAQ,iBAAiB,gCAAgC,GAAG;AAC5D,UAAM,UAAU,KAAK,iBAAiB,IAAI,GAAG;AAE7C,QAAI,SAAS;AACX,cAAQ,iBAAiB,iCAAiC,GAAG;AAE7D,YAAM,gBAAgB,WAAW,IAAI,GAAG,KAAK,EAAE,MAAM,QAAW,QAAQ,QAAQ,OAAO,KAAK;AAG5F,iBAAW,IAAI,KAAK,iCACf,gBADe;AAAA,QAElB,QAAQ;AAAA,QACR,OAAO;AAAA,MACT,EAAC;AAGD,cAAQ,EAAE,KAAK,UAAQ;AACrB,mBAAW,IAAI,KAAK;AAAA,UAClB;AAAA,UACA,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,aAAa,KAAK,IAAI;AAAA,QACxB,CAAC;AACD,gBAAQ,iBAAiB,+BAA+B,KAAK,IAAI;AAAA,MACnE,CAAC,EAAE,MAAM,WAAS;AAChB,YAAI,cAAc,SAAS,QAAW;AACpC,kBAAQ,iBAAiB,iCAAiC,GAAG;AAC7D,qBAAW,IAAI,KAAK,aAAa;AAAA,QACnC;AAEA,mBAAW,IAAI,KAAK,iCACf,gBADe;AAAA,UAElB,QAAQ;AAAA,UACR;AAAA,QACF,EAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBAAgB,OAAO;AACrB,UAAM,eAAe,CAAC,UAAU,UAAU,WAAW,UAAU,WAAW;AAC1E,UAAM,YAAY,OAAO;AAEzB,QAAI,cAAc,UAAU;AAC1B,aAAO,UAAU,QAAQ,MAAM,QAAQ,KAAK,KAAK,KAAK,gBAAgB,KAAK;AAAA,IAC7E;AAEA,WAAO,aAAa,SAAS,SAAS;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBAAgB,OAAO;AACrB,QAAI,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM,mBAAmB;AAC/D,aAAO;AAAA,IACT;AAEA,UAAM,YAAY,OAAO,eAAe,KAAK;AAC7C,WAAO,cAAc,QAAQ,cAAc,OAAO;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,sBAAsB,iBAAiB;AACrC,QAAI,EAAE,2BAA2B,kBAAkB;AACjD,YAAM,IAAI,UAAU,+DAA+D;AAAA,IACrF;AAGA,SAAK,gBAAgB,IAAI,iBAAiB,MAAM;AAC/C,UAAI,OAAO,gBAAgB,YAAY,YAAY;AACjD,wBAAgB,QAAQ;AAAA,MAC1B;AAAA,IACF,CAAC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS;AACP,UAAM,WAAW,KAAK,SAAS;AAC/B,WAAY,UAAU,IAAI;AAAA,EAC5B;AACF;;;AC/4BA,IAAM,oBAAN,cAAgC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW/C,YAAY,mBAAmB;AAC7B,UAAM;AAEN,QAAI,OAAO,sBAAsB,UAAU;AACzC,WAAK,UAAU,SAAS,cAAc,iBAAiB;AACvD,UAAI,CAAC,KAAK,SAAS;AACjB,cAAM,IAAI,MAAM,6CAA6C,iBAAiB,EAAE;AAAA,MAClF;AAAA,IACF,WAAW,6BAA6B,WAAW,6BAA6B,UAAU;AACxF,WAAK,UAAU;AAAA,IACjB,OAAO;AACL,YAAM,IAAI,MAAM,+BAA+B,iBAAiB,EAAE;AAAA,IACpE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,GAAG,WAAW,UAAU,CAAC,GAAG;AAC1B,WAAO,IAAI,iBAAiB,gBAAc;AACxC,YAAM,gBAAgB,WAAS;AAC7B,mBAAW,KAAK,KAAK;AAAA,MACvB;AAEA,WAAK,QAAQ,iBAAiB,WAAW,eAAe,OAAO;AAE/D,aAAO,MAAM;AACX,aAAK,QAAQ,oBAAoB,WAAW,eAAe,OAAO;AAAA,MACpE;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;ACvDA,IAAM,aAAN,cAAyB,iBAAiB;AAAA,EAA1C;AAAA;AACE,sCAAa,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAad,SAAS;AACP,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,UAAU;AAAA,QACb,MAAM,UAAQ;AACZ,cAAI;AACF,gBAAI,OAAO,SAAS,UAAU;AAC5B,sBAAQ,IAAI;AAAA,YACd,OAAO;AACL,sBAAQ,KAAK,MAAM,IAAI,CAAC;AAAA,YAC1B;AAAA,UACF,SAAS,OAAO;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF;AAAA,QACA,OAAO,WAAS,OAAO,KAAK;AAAA,MAC9B,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,GAAG,OAAO,SAAS;AACjB,QAAI,CAAC,KAAK,WAAW,KAAK,GAAG;AAC3B,WAAK,WAAW,KAAK,IAAI,CAAC;AAAA,IAC5B;AACA,SAAK,WAAW,KAAK,EAAE,KAAK,OAAO;AACnC,WAAO;AAAA,EACT;AACF;AAYA,IAAM,OAAO,CAAC,WAAW;AACvB,MAAI,OAAO,WAAW,UAAU;AAC9B,WAAO,KAAK,IAAI,MAAM;AAAA,EACxB;AAEA,SAAO,IAAI,WAAW,CAAC,aAAa;AAClC,UAAM,MAAM,IAAI,eAAe;AAC/B,QAAI,KAAK,OAAO,UAAU,OAAO,OAAO,GAAG;AAE3C,QAAI,OAAO,SAAS;AAClB,aAAO,KAAK,OAAO,OAAO,EAAE,QAAQ,CAAC,QAAQ;AAC3C,YAAI,iBAAiB,KAAK,OAAO,QAAQ,GAAG,CAAC;AAAA,MAC/C,CAAC;AAAA,IACH;AAEA,QAAI,SAAS,MAAM;AACjB,UAAI,WAAW,IAAI;AACnB,YAAM,oBAAoB,OAAO,sBAAsB,CAAC,SAAS;AAC/D,YAAI;AACF,iBAAO,KAAK,MAAM,IAAI;AAAA,QACxB,SAAQ;AACN,iBAAO;AAAA,QACT;AAAA,MACF;AACA,iBAAW,kBAAkB,QAAQ;AACrC,eAAS,KAAK,QAAQ;AACtB,eAAS,SAAS;AAAA,IACpB;AAEA,QAAI,UAAU,MAAM,SAAS,MAAM,IAAI,UAAU;AACjD,QAAI,KAAK,OAAO,OAAO,KAAK,UAAU,OAAO,IAAI,IAAI,IAAI;AAEzD,WAAO,MAAM;AACX,UAAI,MAAM;AAAA,IACZ;AAAA,EACF,CAAC;AACH;AAaA,KAAK,MAAM,CAAC,KAAK,SAAS,CAAC,MAAM;AAC/B,SAAO,MAAM;AACb,SAAO,SAAS;AAChB,SAAO,KAAK,MAAM;AACpB;AAcA,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM;AAC3C,SAAO,MAAM;AACb,SAAO,OAAO;AACd,SAAO,SAAS;AAChB,SAAO,KAAK,MAAM;AACpB;AAcA,KAAK,MAAM,CAAC,KAAK,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM;AAC1C,SAAO,MAAM;AACb,SAAO,OAAO;AACd,SAAO,SAAS;AAChB,SAAO,KAAK,MAAM;AACpB;AAcA,KAAK,QAAQ,CAAC,KAAK,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM;AAC5C,SAAO,MAAM;AACb,SAAO,OAAO;AACd,SAAO,SAAS;AAChB,SAAO,KAAK,MAAM;AACpB;AAaA,KAAK,SAAS,CAAC,KAAK,SAAS,CAAC,MAAM;AAClC,SAAO,MAAM;AACb,SAAO,SAAS;AAChB,SAAO,KAAK,MAAM;AACpB;AAaA,KAAK,MAAM,CAAC,KAAK,SAAS,CAAC,MAAM;AAC/B,QAAM,SAAS,IAAI,WAAW,CAAC,aAAa;AAC1C,UAAM,SAAS,IAAI,YAAY,KAAK,MAAM;AAE1C,WAAO,YAAY,CAAC,UAAU;AAC5B,UAAI,OAAO,WAAW,MAAM,IAAI,GAAG;AACjC,eAAO,WAAW,MAAM,IAAI,EAAE,QAAQ,aAAW,QAAQ,KAAK,CAAC;AAAA,MACjE;AACA,eAAS,KAAK,KAAK;AAAA,IACrB;AACA,WAAO,UAAU,CAAC,UAAU,SAAS,MAAM,KAAK;AAEhD,WAAO,MAAM;AACX,aAAO,MAAM;AAAA,IACf;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;AClNA,IAAM,EAAE,OAAO,OAAO,IAAI;",
  "names": ["html", "strings", "isArray", "error", "queryName", "store", "state", "subscription", "err", "current", "subscription", "store"]
}
